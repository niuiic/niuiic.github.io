<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Advanced Tutorial of Vue-Vite-Typescript</title>
      <link href="2021/06/06/advanced-tutorial-of-vue-vite-typescript/"/>
      <url>2021/06/06/advanced-tutorial-of-vue-vite-typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="Advanced-Tutorial-of-Vue-Vite-Typescript"><a href="#Advanced-Tutorial-of-Vue-Vite-Typescript" class="headerlink" title="Advanced Tutorial of Vue-Vite-Typescript"></a>Advanced Tutorial of Vue-Vite-Typescript</h1><p>The following are the notes I took when I studied vue with reference to the official tutorial. The biggest difference between my notes and official tutorial is that I use typescript while the tutorial uses javascript. I suggest you learn vue following the official tutorial , but I firmly believe that you need to know some of the differences in the use of ts and js.</p><p>And please forgive my stiff English, I was just too lazy to switch input methods.</p><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>The default root component is <code>src/App.vue</code>. The custom components should be placed in <code>src/components</code>.</p><p>All components would be mounted in <code>src/main.ts</code>.</p><p>Next you will learn the process of defining and using custom components</p><h3 id="Define-and-use-custom-components"><a href="#Define-and-use-custom-components" class="headerlink" title="Define and use custom components"></a>Define and use custom components</h3><p>First, we will create a new file in <code>src/components</code>. The content should look like this.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; msg &#125;&#125;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;HelloWorld&quot;,  data() &#123;    return &#123;      msg: &quot;hello&quot;,    &#125;;  &#125;,&#125;);&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now we have defined a component named <code>HelloWorld</code>.</p><p>Next, we need to import it in <code>src/main.ts</code>.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token comment">// import HelloWorld</span><span class="token comment">// `HelloWorld` is not necessary to be the name of the component</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Then, you can declare a mount point in <code>index.html</code>.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- the mount point is declared here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/src/main.ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Finally, you need to mount the component to the mount point. Continue to write in <code>src/main.ts</code>.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">createApp</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The components can also be defined and used in a simple way. For example, the code may look like this.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;button @click="count++">      You clicked me &#123;&#123; count &#125;&#125; times.    &lt;/button></span><span class="token template-punctuation string">`</span></span>t<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And you can simply reuse the components by add labels like this.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>components-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The <code>div</code> with id <code>components-demo</code> contains a pair of labels with a name which is the same as the component.</p><h3 id="Component-registration"><a href="#Component-registration" class="headerlink" title="Component registration"></a>Component registration</h3><p>Components registered like this can be used globally. That means all components, including root component and child components can use these components.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component-a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component-b"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component-c"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-b</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-c</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-c</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Components registered like this can only be used locally. That means only the root component can use these components.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">"./ComponentA.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ComponentB <span class="token keyword">from</span> <span class="token string">"./ComponentB.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"component-a"</span><span class="token operator">:</span> ComponentA<span class="token punctuation">,</span>    <span class="token string">"component-b"</span><span class="token operator">:</span> ComponentB<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The code below is the same.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">"./ComponentA.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ComponentB <span class="token keyword">from</span> <span class="token string">"./ComponentB.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component-a"</span><span class="token punctuation">,</span> ComponentA<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component-b"</span><span class="token punctuation">,</span> ComponentB<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you want to use ComponentA in ComponentB. You need to do like this.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">ComponentB<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component-a"</span><span class="token punctuation">,</span> ComponentA<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Interact-with-child-components"><a href="#Interact-with-child-components" class="headerlink" title="Interact with child components"></a>Interact with child components</h3><h4 id="Passing-data-to-child-components"><a href="#Passing-data-to-child-components" class="headerlink" title="Passing data to child components"></a>Passing data to child components</h4><p>In order to pass data to child components, we need to modify <code>src/components/HelloWorld.vue</code> like this.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; msg &#125;&#125;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;HelloWorld&quot;,  props: [&quot;msg&quot;],&#125;);&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above code, we use <code>props</code> instead of <code>data</code>. Any value passed to a prop attribute will become a property on that component instance. And after a property is registered, we can pass data to it as a custom html attribute like this.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HelloWorld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Now, you can launch the project and watch the result in a broswer. But soon, you will find there is nothing displaying on the broswer. The reason is that our component has an uppercase name. We difined an uppercase name in our project but something changed it to a lowercase name when it finally arrived at broswer. So use a lowercase name is enough to fix the error.</p><p>Now, our code looks like this.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; msg &#125;&#125;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;hello-world&quot;,  props: [&quot;msg&quot;],&#125;);&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">"./components/HelloWorld.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"hello-world"</span><span class="token punctuation">,</span> HelloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then we can try a more complicated demo.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      posts<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"My journey with Vue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"Blogging with Vue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"Why Vue is so fun"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"blog-post"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h4>&#123;&#123; title &#125;&#125;&lt;/h4></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#blog-posts-demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog-posts-demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post in posts<span class="token punctuation">"</span></span>    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.id<span class="token punctuation">"</span></span>    <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post.title<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There is still something which you need to notice. For an instance, see the code below.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- src&#x2F;components&#x2F;Demo.vue --&gt;&lt;template&gt;  &#123;&#123; msg &#125;&#125;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;demo&quot;,  props: [&quot;msg&quot;],&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* src/main.ts */</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> EnlargeText <span class="token keyword">from</span> <span class="token string">"./components/EnlargeText.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"enlarge-text"</span><span class="token punctuation">,</span> EnlargeText<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- src&#x2F;App.vue --&gt;&lt;template&gt;  &lt;div&gt;hello&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;App&quot;,&#125;);&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot;&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;!-- index.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;Vite App&lt;&#x2F;title&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;div id&#x3D;&quot;app&quot;&gt;      &lt;demo msg&#x3D;&quot;world&quot;&gt;&lt;&#x2F;demo&gt;    &lt;&#x2F;div&gt;    &lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;&#x2F;src&#x2F;main.ts&quot;&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this example, we define templates in both main component and child component. And we try to display them in <code>index.html</code> together. But something would happen to the template of the child component. It is covered by the template of the main component. Take care of this problem. And if you really want to show them together, you can move <code>&lt;demo msg=&quot;world&quot;&gt;&lt;/demo&gt;</code> from <code>index.html</code> to main component’s template.</p><h4 id="Listening-to-the-events-of-child-components"><a href="#Listening-to-the-events-of-child-components" class="headerlink" title="Listening to the events of child components"></a>Listening to the events of child components</h4><p>Let’s ceate a new file named <code>Demo.vue</code> in <code>src/components</code>.</p><p>First, we modify <code>src/components/Demo.vue</code> like this.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h4&gt;      &#123;&#123; title &#125;&#125;    &lt;&#x2F;h4&gt;    &lt;button @click&#x3D;&quot;$emit(&#39;enlargeText&#39;)&quot;&gt;Enlarge text&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;demo&quot;,  props: [&quot;title&quot;],  emits: [&quot;enlargeText&quot;],&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this file, we define an event of child component called <code>enlargeText</code> with <code>emits</code>. And we bind this to the button click event. Once the button is clicked, the super component will receive this event.</p><p>Then, we modify <code>src/App.vue</code> like this.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;demo      :style&#x3D;&quot;&#123; fontSize: postFontSize + &#39;em&#39; &#125;&quot;      @enlarge-text&#x3D;&quot;postFontSize +&#x3D; 0.1&quot;      title&#x3D;&quot;hello&quot;    &gt;&lt;&#x2F;demo&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;import Demo from &quot;.&#x2F;components&#x2F;Demo.vue&quot;;export default defineComponent(&#123;  data() &#123;    return &#123;      postFontSize: 1,    &#125;;  &#125;,  components: &#123; Demo &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this file, we define the mount point of the child component <code>Demo</code>. And we set its style with a variable <code>postFontSize</code>. Also, we define the response function for <code>enlarge-text</code> event. And finally, we import <code>Demo</code> from <code>Demo.vue</code> and register it as a clild component.</p><p>Be careful that <code>enlarge-text</code> is different from the event we defined in the child component called <code>enlargeText</code>. Although, <code>enlargeText</code> is also worked here, the broswer will interpret any uppercase characters as lowercase. So you’d better use <code>enlarge-text</code>.</p><p>Since we have imported the child component in <code>src/App.vue</code>, the <code>src/main.ts</code> becomes more simple.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now you can run your project and check the result in your broswer.</p><p>If you are careful enough, you would find that <code>emits</code> is similar to <code>props</code>. <code>props</code> passes data to super component and <code>emits</code> passes event to super component.</p><h5 id="Emit-a-value-with-an-event"><a href="#Emit-a-value-with-an-event" class="headerlink" title="Emit a value with an event"></a>Emit a value with an event</h5><p>To go futher, I will introduce you how to emit a value with an event.</p><p>The code would look like this.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;button @click&#x3D;&quot;$emit(&#39;enlargeText&#39;, 0.1)&quot;&gt;  Enlarge text&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Then you can get the value with <code>$event</code>.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;demo  :style&#x3D;&quot;&#123; fontSize: postFontSize + &#39;em&#39; &#125;&quot;  @enlarge-text&#x3D;&quot;postFontSize +&#x3D; $event&quot;  title&#x3D;&quot;hello&quot;&gt;&lt;&#x2F;demo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And if the event handler is a method, the value will be passed as the first parameter.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;demo  :style&#x3D;&quot;&#123; fontSize: postFontSize + &#39;em&#39; &#125;&quot;  @enlarge-text&#x3D;&quot;onEnlargeText&quot;  title&#x3D;&quot;hello&quot;&gt;&lt;&#x2F;demo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;import Demo from &quot;.&#x2F;components&#x2F;Demo.vue&quot;;export default defineComponent(&#123;  data() &#123;    return &#123;      postFontSize: 1,    &#125;;  &#125;,  components: &#123; Demo &#125;,  methods: &#123;    onEnlargeText(enlargeText: any) &#123;      this.postFontSize +&#x3D; enlargeText;    &#125;,  &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Use-v-model-on-components"><a href="#Use-v-model-on-components" class="headerlink" title="Use v-model on components"></a>Use v-model on components</h5><p><code>src/App.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;demo v-model&#x3D;&quot;searchText&quot;&gt;&lt;&#x2F;demo&gt;    &lt;!-- it&#39;s the same as the code below --&gt;    &lt;!-- &lt;demo --&gt;    &lt;!-- :model-value&#x3D;&quot;searchText&quot; --&gt;    &lt;!-- @update:model-value&#x3D;&quot;searchText &#x3D; $event&quot; --&gt;    &lt;!-- &gt;&lt;&#x2F;demo&gt; --&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;import Demo from &quot;.&#x2F;components&#x2F;Demo.vue&quot;;export default defineComponent(&#123;  components: &#123; Demo &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/components/Demo.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;input      :value&#x3D;&quot;modelValue&quot;      @input&#x3D;&quot;$emit(&#39;update:modelValue&#39;, $event.target.value)&quot;    &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;demo&quot;,  props: [&quot;modelValue&quot;],  emits: [&quot;update:modelValue&quot;],&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With the code above, we have implemented a simple input function. We use <code>&lt;demo v-model=&quot;searchText&quot;&gt;&lt;/demo&gt;</code> to simply our code in this example. The key point is you need to bind some properties in child components before using <code>v-model</code>.</p><p>There is another way to define child components.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;input v-model&#x3D;&quot;value&quot; &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &quot;vue&quot;;export default defineComponent(&#123;  name: &quot;demo&quot;,  props: [&quot;modelValue&quot;],  emits: [&quot;update:modelValue&quot;],  computed: &#123;    value: &#123;      get(): any &#123;        return this.modelValue;      &#125;,      set(value: any) &#123;        this.$emit(&quot;update:modelValue&quot;, value);      &#125;,    &#125;,  &#125;,&#125;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Content-Distribution-with-slots"><a href="#Content-Distribution-with-slots" class="headerlink" title="Content Distribution with slots"></a>Content Distribution with slots</h3><p>The name of the feature may be confusing, but the work is quite simple.</p><p>This feature means pass html content to a component. We have used this feature before.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">app.component(&#39;alert-box&#39;, &#123; template: &#96;&lt;div class&#x3D;&quot;demo-alert-box&quot;&gt;      &lt;strong&gt;Error!&lt;&#x2F;strong&gt;      &lt;slot&gt;&lt;&#x2F;slot&gt;    &lt;&#x2F;div&gt;&#96; &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dynamic-components"><a href="#Dynamic-components" class="headerlink" title="Dynamic components"></a>Dynamic components</h3><p>It’s a feature to change components dynamicly when you swith to different tabs or other similar things, so that you can see different content.</p><p>The code is also simple. <code>&lt;component :is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</code> is all you need. What you need to do is changing <code>currentTabComponent</code> when needed.</p><h3 id="DOM-template-parsing-caveats"><a href="#DOM-template-parsing-caveats" class="headerlink" title="DOM template parsing caveats"></a>DOM template parsing caveats</h3><p>Some HTML elements, such as <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;table&gt;</code> and <code>&lt;select&gt;</code> have restrictions on what elements can appear inside them, and some elements such as <code>&lt;li&gt;</code>, <code>&lt;tr&gt;</code>, and <code>&lt;option&gt;</code> can only appear inside certain other elements.</p><p>For example:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>demo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>demo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The custom component <code>&lt;demo&gt;</code> cannot be inside a pair of <code>&lt;table&gt;</code> label. To fix the error, you can use <code>v-is</code> with a allowed label instead.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>demo<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Also, HTML attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you’re using in-DOM templates, camelCased prop names and event handler parameters need to use their kebab-cased (hyphen-delimited) equivalents. This has been mentioned before.</p><p>It should be noted that these limitations do not apply if you are using string templates from one of the following sources:</p><ul><li>String templates (e.g. <code>template: &#39;...&#39;</code>)</li><li>Single-file (<code>.vue</code>) components</li><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The most basic part of vue ends here, you are already be able to build some simple vue applications with this knowladge. To go futher, you can continue to learn more syntactic sugar following the <a href="https://v3.vuejs.org/guide/installation.html">official tutorial</a>. It won’t be difficult for you.</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vite </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Custom Snippets in Vim</title>
      <link href="2021/06/05/use-custom-snippets-in-vim/"/>
      <url>2021/06/05/use-custom-snippets-in-vim/</url>
      
        <content type="html"><![CDATA[<h1 id="在-vim-中使用自定义-snippets"><a href="#在-vim-中使用自定义-snippets" class="headerlink" title="在 vim 中使用自定义 snippets"></a>在 vim 中使用自定义 snippets</h1><p>本文介绍如何在 vim 中使用自定义 snippets。本文不详解 snippets 语法。</p><h2 id="插件安装与配置"><a href="#插件安装与配置" class="headerlink" title="插件安装与配置"></a>插件安装与配置</h2><p>首先，安装<code>coc-snippets</code>插件，该插件依赖<code>coc.nvim</code>。安装好<code>coc.nvim</code>之后，只需要使用<code>:CocInstall coc-snippets</code>命令即可安装。具体设置可以参考其<a href="https://github.com/neoclide/coc-snippets">github 主页</a>。安装该插件后需要同步安装<code>honza/vim-snippets</code>来提供 snippets。<code>SirVer/ultisnips</code>需要拆卸掉，因为该插件会对自定义的 snippets 文件报错。</p><p>接下来，使用<code>:CocConfig</code>打开<code>coc.nvim</code>配置文件，设置自定义 snippets 文件路径。如<code>&quot;snippets.userSnippetsDirectory&quot;: &quot;/home/niuiic/.config/nvim/snippets&quot;</code>。（注意这是个 json 文件，最外层需要花括号）</p><h2 id="自定义-snippets-文件"><a href="#自定义-snippets-文件" class="headerlink" title="自定义 snippets 文件"></a>自定义 snippets 文件</h2><p>然后就可以在该目录下自定义 snippets 文件，文件名称保持和文件类型相同即可。snippets 语法还是比较复杂的，下面给出一个简单例子，足以实现基本功能。更高级的功能请自行学习。（coc.nvim 提供的自动补全筛选能力已经足够强大，即使是简单的设置也可以带来极佳的体验。更复杂的设置个人觉得没有必要。）</p><p><code>systemverilog.snippets</code></p><pre class="line-numbers language-none"><code class="language-none"># nomal alwayssnippet alwalways @($&#123;0&#125;) beginend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>alw</code>是缩写，也就是当你打出 alw 时可以调用该 snippets。<code>$&#123;0&#125;</code>的作用比较复杂，最简单也是对新手来说最实用的作用就是当你添加这一项后，补全 snippets 之后光标会自动停留在这个位置。</p><p>如果再加一项，如下。</p><pre class="line-numbers language-none"><code class="language-none"># nomal alwayssnippet alwalways @($&#123;1&#125;) begin$&#123;0&#125;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时光标会停留在<code>$&#123;1&#125;</code>的位置。</p><p>按照上述例子继续补充自己想要的 snippets 即可。注意标准写法中应当是用<code>endsnippet</code>的，不过这插件似乎不需要这个，而且加上这一句之后反而会出现在补全内容中，因此还是不加为好。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Tauri Project with Vue-Typescript-Less-Vite</title>
      <link href="2021/06/04/create-tauri-project-with-vue-typescript-less-vite/"/>
      <url>2021/06/04/create-tauri-project-with-vue-typescript-less-vite/</url>
      
        <content type="html"><![CDATA[<h1 id="创建-Tauri-Vue-Typescript-Vite-Less-应用"><a href="#创建-Tauri-Vue-Typescript-Vite-Less-应用" class="headerlink" title="创建 Tauri + Vue + Typescript + Vite + Less 应用"></a>创建 Tauri + Vue + Typescript + Vite + Less 应用</h1><h2 id="项目创建流程"><a href="#项目创建流程" class="headerlink" title="项目创建流程"></a>项目创建流程</h2><p>直接上代码</p><p><code>app_init.sh</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">templatePath&#x3D;xxxecho &quot;What&#39;s your app&#39;s name?&quot;read appNameyarn create @vitejs&#x2F;app $appName --template vue-tscd $appNameyarn set version berrycp &quot;$templatePath&#x2F;tauri&#x2F;yarnrc.yml&quot; .yarnrc.ymlyarn installyarn add less -Dyarn add eslint eslint-plugin-vue -Dyarn add @vuedx&#x2F;typescript-plugin-vue -Drm .&#x2F;tsconfig.jsoncp &quot;$templatePath&#x2F;tauri&#x2F;tsconfig.json&quot; tsconfig.jsonrm src&#x2F;shims-vue.d.tsrm vite.config.tscp &quot;$templatePath&#x2F;tauri&#x2F;vite.config.ts&quot; vite.config.tscp &quot;$templatePath&#x2F;tauri&#x2F;tauri-plugin.ts&quot; tauri-plugin.tsyarn add tauri @types&#x2F;sharpyarn add @rollup&#x2F;plugin-replace -Dyarn tauri init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$templatePath</code>自定，注意模板文件在<code>$templatePath/tauri</code>下。</p><p>以上涉及的几个文件放在下面。</p><p><code>yarnrc.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">yarnPath: &quot;.yarn&#x2F;releases&#x2F;yarn-berry.cjs&quot;nodeLinker: node-modulesnpmRegistryServer: &quot;https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>tauri-plugin.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TauriConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"tauri/src/types"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> Plugin<span class="token punctuation">,</span> ConfigEnv<span class="token punctuation">,</span> ResolvedConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> tauriConf <span class="token keyword">from</span> <span class="token string">"./src-tauri/tauri.conf.json"</span><span class="token punctuation">;</span><span class="token keyword">import</span> dev <span class="token keyword">from</span> <span class="token string">"tauri/dist/api/dev"</span><span class="token punctuation">;</span><span class="token keyword">import</span> build <span class="token keyword">from</span> <span class="token string">"tauri/dist/api/build"</span><span class="token punctuation">;</span><span class="token keyword">import</span> replace <span class="token keyword">from</span> <span class="token string">"@rollup/plugin-replace"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isAbsolute<span class="token punctuation">,</span> resolve <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">&#123;</span>  config<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>c<span class="token operator">:</span> TauriConfig<span class="token punctuation">,</span> e<span class="token operator">:</span> ConfigEnv<span class="token punctuation">)</span> <span class="token operator">=></span> TauriConfig<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> Options<span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> tauriConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>tauriConf <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> viteConfig<span class="token operator">:</span> ResolvedConfig<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token string">"process.env.IS_TAURI"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"tauri-plugin"</span><span class="token punctuation">,</span>    <span class="token function">configureServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      server<span class="token punctuation">.</span>httpServer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"listening"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TAURI_SERVE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TAURI_SERVE</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> serverOptions <span class="token operator">=</span> server<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> port <span class="token operator">=</span> serverOptions<span class="token punctuation">.</span>port <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> hostname <span class="token operator">=</span> serverOptions<span class="token punctuation">.</span>host <span class="token operator">||</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>hostname <span class="token operator">===</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hostname <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">const</span> protocol <span class="token operator">=</span> serverOptions<span class="token punctuation">.</span>https <span class="token operator">?</span> <span class="token string">"https"</span> <span class="token operator">:</span> <span class="token string">"http"</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> base <span class="token operator">=</span> server<span class="token punctuation">.</span>config<span class="token punctuation">.</span>base<span class="token punctuation">;</span>          <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>protocol<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hostname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>base<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          tauriConfig<span class="token punctuation">.</span>build<span class="token punctuation">.</span>devPath <span class="token operator">=</span> url<span class="token punctuation">;</span>          <span class="token function">dev</span><span class="token punctuation">(</span>tauriConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">closeBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TAURI_BUILD</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TAURI_BUILD</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> distDir <span class="token operator">=</span> viteConfig<span class="token punctuation">.</span>build<span class="token punctuation">.</span>outDir<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>distDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          distDir <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>viteConfig<span class="token punctuation">.</span>root<span class="token punctuation">,</span> distDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        tauriConfig<span class="token punctuation">.</span>build<span class="token punctuation">.</span>distDir <span class="token operator">=</span> distDir<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>tauriConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">config</span><span class="token punctuation">(</span>viteConfig<span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">IS_TAURI</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        options<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span>tauriConfig<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">"build"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        viteConfig<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">configResolved</span><span class="token punctuation">(</span>resolvedConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      viteConfig <span class="token operator">=</span> resolvedConfig<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>tsconfig.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@vuedx/typescript-plugin-vue"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"eslint-plugin-vue"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"esnext"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vite/client"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.d.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.tsx"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.vue"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vite.config.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> tauri <span class="token keyword">from</span> <span class="token string">"./tauri-plugin"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tauri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  server<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    hmr<span class="token operator">:</span> <span class="token punctuation">&#123;</span> overlay<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span> vue<span class="token operator">:</span> <span class="token string">"vue/dist/vue.esm-bundler.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>初始化 tauri 应用时，设置目录需要与上面的配置对应，即为<code>../dist</code>。设置 url 为<code>http://127.0.0.1:3000</code>。</p><p><code>vite.config.ts</code>中关于 server 的配置是为了屏蔽调试出现的一个错误。该错误原因不明（测试结果为当 tauri 应用的名称和 vue 项目的名称相同时会发生），应该是 vite 的问题，不影响项目调试和编译打包。</p><p>使用<code>yarn dev</code>进行调试，使用<code>yarn build</code>进行打包。当前设置默认打包格式为 deb 和 AppImage。打包需要额外的工具与配置，根据报错信息自行补充即可。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vite </tag>
            
            <tag> Typescript </tag>
            
            <tag> Tauri </tag>
            
            <tag> Less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Tutorial of Spartan Edge Accelerator Board</title>
      <link href="2021/06/03/spartan-edge-accelerator-board-tutorial/"/>
      <url>2021/06/03/spartan-edge-accelerator-board-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="Spartan-Edge-Accelerator-Board-入门教程"><a href="#Spartan-Edge-Accelerator-Board-入门教程" class="headerlink" title="Spartan Edge Accelerator Board 入门教程"></a>Spartan Edge Accelerator Board 入门教程</h1><p>本文介绍一块 FPGA 开发板——Spartan Edge Accelerator Board。也称 Spartan-7 FPGA 开发板或 SEA-S7。</p><p><img src="1.png" alt="develop board"></p><h2 id="选择与不选择理由"><a href="#选择与不选择理由" class="headerlink" title="选择与不选择理由"></a>选择与不选择理由</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>便宜。整板价格在 200-300 元之间，且可以不需要下载器。</li><li>性能好。比起几百块级别的入门板性价比相当高。规格参数可以翻阅官方的文档。<a href="https://wiki.seeedstudio.com/Spartan-Edge-Accelerator-Board/">英文</a> <a href="https://wiki.seeedstudio.com/cn/Spartan-Edge-Accelerator-Board/">中文</a></li><li>可以使用 vivado。vivado 不兼容 Spartan6（常见的入门板）但兼容 Spartan7。</li><li>arduino 和 FPGA 的结合体，看起来像低配版的 FPGA ZYNQ（arm + FPGA）。</li><li>提供用封装好的 arduino 接口。方便 arduino 用户入门。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>没有详细的文档，更没有视频教程。绝对不适合没有任何经验的 FPGA 小白以及自学能力不够强的新手。</li><li>比一般的以教学为目的的入门板少了很多外设。</li></ol><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>下面以一个 blink 项目为例，介绍该开发板的使用。</p><blockquote><p>官方的文档上有入门教程，不过好久没维护了，一些链接也没了，有兴趣折腾的可以搞一下。</p></blockquote><h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h3><ol><li>开发板。</li><li>一根 Type-C 数据线。</li><li>[可选] Platform Cable USB II （JTAG 接口的 FPGA 下载器）。</li><li>一张 SD 卡（外加读卡器）。</li></ol><h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><ol><li>arduino IDE。</li><li>vivado（免费的 webpack 版也支持 Spartan-7）。</li><li>CP2102 USB 驱动，可以前往<a href="https://www.usb-drivers.org/cp2102-usb-to-uart-bridge-driver.html">这里</a>下载。</li></ol><h3 id="软硬件设置"><a href="#软硬件设置" class="headerlink" title="软硬件设置"></a>软硬件设置</h3><p>首先明确是要将开发板当作独立的 FPGA 使用，所以 arduino 的部分只是辅助。</p><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>首先找到板子上唯一一个跳线帽。这里标有 PWR_MODE，可以设置电源模式。如果将该开发板作为 arduino 的扩展板使用，可以通过设置 PWR_MODE 为 off 来隔离系统电源，同时给两块板供电。现在只是作为独立的 FPGA 使用，暂时不用管。</p><p>然后找到跳线帽旁边的一排拨码开关。新买的板子应该在上面有一层塑料膜封着，将其揭开。将 Slave 下的拨码开关向上推，也就是推向 Slave。这里是设置向 FPGA 写入比特流的方式。当前设置为 arduino 部分将 SD 卡中的比特流文件写入 FPGA。这样就不需要下载器。</p><p>将 SD 卡格式化为 FAT16 或 FAT32 文件系统。</p><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>启动 arduino IDE。在<code>文件-首选项-附加开发板管理器网址</code>处设置<code>https://dl.espressif.com/dl/package_esp32_index.json</code>。</p><p>在<code>工具-开发板-开发板管理器</code>中找到 esp32 并下载安装。</p><p>安装完成后，在<code>工具-开发板</code>中选择<code>DOIT ESP32 DEVKIT V1</code>。</p><p>现在测试一下是否可以与开发板正常通信。</p><p>用 Type-C 线连接开发板与电脑。可以使用设备管理器（windows）或者(<code>lsusb</code> linux)查看是否连接上。也可以在 arduino IDE 中查看<code>工具-端口</code>，看是否连接上。</p><blockquote><p>注意开发板应上电（检查电源开关），驱动程序应安装，Type-C 线应可传数据。</p></blockquote><p>接下来向 arduino 部分中烧录向 FPGA 写入比特流的程序。</p><p>下载<a href="https://github.com/sandrobenigno/spartan-edge-esp32-boot/archive/master.zip">已经写好的库</a>。在 arduino IDE 中通过<code>项目-加载库-添加.ZIP库</code>将库导入。</p><p>使用<code>文件-打开</code>打开<code>01LoadDefaultBitstream.ino</code>文件。这就是需要的程序文件。</p><p>接下来，将<code>工具-Upload Speed</code>设置为 115200。使用<code>项目-上传</code>下载程序到开发板。</p><p>至此，arduino 辅助下载 FPGA 比特流文件的部分已经完成。</p><h3 id="Blink"><a href="#Blink" class="headerlink" title="Blink"></a>Blink</h3><p>下载<a href="https://gitee.com/SEA-S7/SEA">官方例程库</a>。找到其中的<code>Hello-World/FPGA/Verilog/HelloWorld-Verilog</code>。使用 vivado 打开该项目。修改以下文件内容。</p><p><code>Hello-World.v</code></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> <span class="token function">Hello_World</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> signal_2    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        m <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">100000000</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            signal_2 <span class="token operator">=</span> signal_2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>system.xdc</code></p><pre class="line-numbers language-none"><code class="language-none">set_property -dict &#123;PACKAGE_PIN H4 IOSTANDARD LVCMOS33&#125; [get_ports clk]create_clock -add -name sys_clk_pin -period 10.00 -waveform &#123;0 5&#125; [get_ports &#123;clk&#125;];set_property IOSTANDARD LVCMOS33 [get_ports &#123;signal_2&#125;]set_property PACKAGE_PIN J1 [get_ports &#123;signal_2&#125;]set_property PULLDOWN true [get_ports &#123;signal_2&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接使用<code>generate bitstream</code>生成比特流文件。将位于<code>HelloWorld-Verilog.runs\impl_1</code>下的比特流文件<code>Hello_World.bit</code>复制到 SD 卡根目录下的<code>overlay</code>目录下，并改名为<code>default.bit</code>。</p><p>断开开发板与电脑的连接，将 SD 卡插入开发板，再连接开发板与电脑。</p><p>不出意外的话就可以看到位于右上角的 LED 灯闪烁。</p><p>此后如果要写入新的比特流文件，还是需要按照上述操作，将文件放到 SD 卡中然后改名。</p><p>这种写入方式非常麻烦。熟悉 arduino 的用户可能可以尝试通过串行通信直接把电脑上的文件传给 FPGA。</p><p>鉴于<code>Platform Cable USB II</code>的价格并不高(便宜的大概 100 多)。建议嫌麻烦的还是通过<code>Platform Cable USB II</code>连接开发板右上角的 JTAG 接口直接用 vivado 下载比特流文件（注意要先把前面的 Slave 设置回来）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>初步使用之后个人感觉这块板子还是挺不错的，用来玩一玩谐波分析和图像识别还是挺适合的。</p><p>PCB 可以从<a href="https://wiki.seeedstudio.com/Spartan-Edge-Accelerator-Board/">官方文档</a>处下载。有问题可以到他们的<a href="https://forum.seeedstudio.com/">论坛</a>提问。</p>]]></content>
      
      
      <categories>
          
          <category> Embedded </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Tutorial of Vue-Vite-Typescript</title>
      <link href="2021/05/17/basic-tutorial-of-vue-vite-typescript/"/>
      <url>2021/05/17/basic-tutorial-of-vue-vite-typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-Tutorial-of-Vue-Vite-Typescript"><a href="#Basic-Tutorial-of-Vue-Vite-Typescript" class="headerlink" title="Basic Tutorial of Vue-Vite-Typescript"></a>Basic Tutorial of Vue-Vite-Typescript</h1><p>The following are the notes I took when I studied vue with reference to the official tutorial. The biggest difference between my notes and official tutorial is that I use typescript while the tutorial uses javascript. I suggest you learn vue following the official tutorial , but I firmly believe that you need to know some of the differences in the use of ts and js.</p><p>And please forgive my stiff English, I was just too lazy to switch input methods.</p><h2 id="Init-a-vue-project"><a href="#Init-a-vue-project" class="headerlink" title="Init a vue project"></a>Init a vue project</h2><p>Create the project</p><pre class="line-numbers language-none"><code class="language-none">npm init @vitejs&#x2F;app appName -- --template vue-tscd appNamenpm installnpm install less -Dnpm install eslint eslint-plugin-vue -Dnpm install @vuedx&#x2F;typescript-plugin-vue -Dnode node_modules&#x2F;esbuild&#x2F;install.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Modify <code>coc-settings.json</code></p><pre class="line-numbers language-none"><code class="language-none">&quot;vetur.useWorkspaceDependencies&quot;: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Add the content below to <code>tsconfig.json</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@vuedx/typescript-plugin-vue"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Modify <code>vite.config.ts</code> which is located in the root path of the project.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span> vue<span class="token operator">:</span> <span class="token string">"vue/dist/vue.esm-bundler.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Directory-structure-of-the-project"><a href="#Directory-structure-of-the-project" class="headerlink" title="Directory structure of the project"></a>Directory structure of the project</h2><p><img src="1.png" alt="directory structure"></p><ol><li>public : public resource directory</li><li>src/assets : static resource directory</li><li>src/components : custom components</li><li>src/App.vue : root component</li><li>src/main.ts : root entry</li><li>index.css : root css</li><li>index.html : page entry</li></ol><h2 id="Run-project"><a href="#Run-project" class="headerlink" title="Run project"></a>Run project</h2><p>Use <code>yarn dev</code> to run the project. And then you can check your page at browser.</p><h2 id="Content-of-the-vue-file"><a href="#Content-of-the-vue-file" class="headerlink" title="Content of the vue file"></a>Content of the vue file</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue"># src&#x2F;App.vue # html part&lt;template&gt;  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;&lt;&#x2F;template&gt;# typescript part&lt;script charset&#x3D;&quot;utf-8&quot;&gt;export default &#123;  data() &#123;    return &#123;      msg: &quot;hello vue&quot;,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;# css part&lt;style type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;screen&quot;&gt;h1 &#123;  text-align: center;  color: red;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Commentary"><a href="#Commentary" class="headerlink" title="Commentary"></a>Commentary</h2><p>In html part (inside of template lable), the commentary looks like this. <code>&lt;!-- annotation --&gt;</code></p><p>In css part (inside of style lable), the commentary looks like this. <code>/* annotation */</code></p><p>In typescript part (inside of script lable), the commentary looks like this. <code>// annotation</code> or <code>/* annotation */</code></p><p>The content outside of the label does not effect.</p><h2 id="Create-an-application-instance"><a href="#Create-an-application-instance" class="headerlink" title="Create an application instance"></a>Create an application instance</h2><p>Each vue application is created by function <code>createApp</code>. For example, you can create an application like this.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>In the above code, <code>app</code> is our root component. We use method <code>mount</code> to mount <code>app</code> to <code>#app</code>.</p><p><code>#app</code> represents a html label whose id is app. And by default, <code>#app</code> is declared in <code>index.html</code>. For example, <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>.</p><p>The method <code>mount</code> returns an instance of the root component. You can get the properties of the component through its instance.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A component contains custom properties and inner properties. You can also get inner properties through the instance of the component using <code>$</code>. For example, <code>$attrs</code>.</p><h2 id="lifecycle-hook"><a href="#lifecycle-hook" class="headerlink" title="lifecycle hook"></a>lifecycle hook</h2><p>Lifetime hook is a function which would be called automatically in different stages of the program runtime.</p><p>For instance, you can use <code>created</code> hook to execute your code after an instance has been created.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* `this` point to the instance of the component */</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"count is: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Do not use arrow function in properties. For example, <code>created: () =&gt; console.log(&quot;hello&quot;)</code>.</p><h2 id="Template-syntax"><a href="#Template-syntax" class="headerlink" title="Template syntax"></a>Template syntax</h2><h3 id="Variable-binding"><a href="#Variable-binding" class="headerlink" title="Variable binding"></a>Variable binding</h3><p>You can bind typescript variables to html part.</p><ol><li><p>Usually the syntax is <code>&#123;&#123; variable &#125;&#125;</code>.</p></li><li><p>But if you want to bind a html label, the code needs to be changed.</p></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;p&gt;      &lt;!-- failed to bind --&gt;      &#123;&#123; msg &#125;&#125;    &lt;&#x2F;p&gt;    &lt;!-- successfully bind to html --&gt;    &lt;p&gt;bind html label : &lt;span v-html&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script charset&#x3D;&quot;utf-8&quot;&gt;export default &#123;  data() &#123;    return &#123;      msg: &quot;&lt;h2&gt; hello &lt;&#x2F;h2&gt;&quot;,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>In order to bind attributes, the syntax will look like this.</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;img v-bind:src&#x3D;&quot;imgPath&quot; alt&#x3D;&quot;&quot; &#x2F;&gt;    &lt;!-- or --&gt;    &lt;img :src&#x3D;&quot;imgPath&quot; alt&#x3D;&quot;&quot; &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script charset&#x3D;&quot;utf-8&quot;&gt;export default &#123;  data() &#123;    return &#123;imgPath&#x3D;&quot;imgPath&quot;    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>To bind dynamic attributes.</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;!-- cause an error due to the static url --&gt;    &lt;a v-bind:[attributeName]&#x3D;&quot;http:&#x2F;&#x2F;www.url.com&quot; target&#x3D;&quot;_blank&quot;      &gt;Anchor Text&lt;&#x2F;a    &gt;    &lt;!-- you can fix the error in this way --&gt;    &lt;a v-bind:[attributeName]&#x3D;&quot;&#39;http:&#x2F;&#x2F;www.url.com&#39;&quot; target&#x3D;&quot;_blank&quot;      &gt;Anchor Text&lt;&#x2F;a    &gt;    &lt;!-- or you can also bind the url --&gt;    &lt;a v-bind:[attributeName]&#x3D;&quot;link&quot; target&#x3D;&quot;_blank&quot;&gt;Anchor Text&lt;&#x2F;a&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script charset&#x3D;&quot;utf-8&quot;&gt;export default &#123;  data() &#123;    return &#123;      attributeName: &quot;href&quot;,      link: &quot;http:&#x2F;&#x2F;www.url.com&quot;,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>Loop traversal</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;ul&gt;      &lt;!-- :key is necessary, and each key must be unique --&gt;      &lt;li v-for&#x3D;&quot;(item, index) in list&quot; :key&#x3D;&quot;index&quot;&gt;        &#123;&#123; index &#125;&#125;--&#123;&#123; item &#125;&#125;      &lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script charset&#x3D;&quot;utf-8&quot;&gt;export default &#123;  data() &#123;    return &#123;      list: [&quot;hello&quot;, &quot;world&quot;],    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>v-for</code> with a range.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n in 10<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; n &#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>Only bind once</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- this would never change --&gt;  &lt;span v-once&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>Bind js expressions</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; msg + 1 &#125;&#125;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Method-class-and-style-binding"><a href="#Method-class-and-style-binding" class="headerlink" title="Method, class and style binding"></a>Method, class and style binding</h3><ol><li>Bind method</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &#123;&#123; msg &#125;&#125;    &lt;button @click&#x3D;&quot;setMsg&quot;&gt;set msg&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;getMsg&quot;&gt;get msg&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script charset&#x3D;&quot;utf-8&quot;&gt;export default &#123;  data() &#123;    return &#123;      msg: &quot;hello&quot;,    &#125;;  &#125;,  methods: &#123;    setMsg() &#123;      this.msg &#x3D; &quot;changed msg&quot;;      &#x2F;* you can call methods with &#96;this&#96; *&#x2F;      this.getMsg();    &#125;,    getMsg() &#123;      alert(this.msg);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; counter &#125;&#125;  &lt;br &#x2F;&gt;  &lt;!-- You can call a method directly in the template. It will be called multiple --&gt;  &lt;!-- times in the rendering stage of the template. So the value of counter is not --&gt;  &lt;!-- sure. --&gt;  &#123;&#123; count() &#125;&#125;  &lt;button @click&#x3D;&quot;count&quot;&gt;click here to count&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;      counter: 1,    &#125;;  &#125;,  methods: &#123;    count() &#123;      this.$data.counter++;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bind method with paramaters.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click&#x3D;&quot;getMessage($event)&quot;&gt;click here&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;    getMessage(e: any) &#123;      e.target.style.background &#x3D; &quot;red&quot;;      alert(e);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also bind methods with mutiple paramaters, like this. Note that event must be the last paramater.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click&#x3D;&quot;getMessage(&#39;hello&#39;, $event)&quot;&gt;click here&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;    getMessage(str: string, e: any) &#123;      e.target.style.background &#x3D; &quot;red&quot;;      console.log(str);      alert(e);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bind mutiple methods.</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;button @click&#x3D;&quot;hello1($event), hello2($event)&quot;&gt;click here&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;    hello1(e: any) &#123;      e.target.style.background &#x3D; &quot;red&quot;;    &#125;,    hello2(e: any) &#123;      alert(e);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Use event modifiers.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- the modifiers provided by vue is listed below --></span><span class="token comment">&lt;!-- 1. .stop --></span><span class="token comment">&lt;!-- 2. .prevent --></span><span class="token comment">&lt;!-- 3. .capture --></span><span class="token comment">&lt;!-- 4. .self --></span><span class="token comment">&lt;!-- 5. .once --></span><span class="token comment">&lt;!-- 6. .passive --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There are also key modifiers, such as <code>&lt;input @keyup.enter = &quot;submit&quot; /&gt;</code>.</p><p>You can use key aliases, such as <code>.enter</code>, <code>.tab</code>, <code>.delete</code>, <code>.esc</code>, <code>.space</code>, <code>.up</code>, <code>.down</code>, <code>.left</code>, <code>.right</code>, instead of key modifiers.</p><p>System modifier keys such as <code>.ctrl</code>, <code>.alt</code>, <code>.shift</code>, <code>.meta</code> are also useful.</p><ol start="2"><li>Bind class</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;custom&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;.custom &#123;  background: red;  height: 100px;  width: 100px;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also bind classes dynamically.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class&#x3D;&quot;myClass&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;      myClass: &quot;custom&quot;,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;.custom &#123;  background: red;  height: 100px;  width: 100px;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Optionally bind classes and bind more than one class at one time.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- bind class &#96;active&#96; and &#96;error&#96; optionally and also bind class &#96;custom&#96; --&gt;  &lt;div class&#x3D;&quot;custom&quot; :class&#x3D;&quot;&#123; active: isActive, error: isError &#125;&quot;&gt;&lt;&#x2F;div&gt;  &lt;!-- bind class &#96;active&#96; or &#96;error&#96; --&gt;  &lt;div class&#x3D;&quot;&#123;isActive ? active : error&#125;&quot;&gt;&lt;&#x2F;div&gt;  &lt;!-- bind class &#96;custom&#96; and &#96;active&#96; --&gt;  &lt;div :class&#x3D;&quot;[&#39;active&#39;, &#39;custom&#39;]&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;      isActive: true,      isError: false,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;.custom &#123;  margin: 10px;&#125;.active &#123;  background: yellowgreen;  height: 100px;  width: 100px;&#125;.error &#123;  background: red;  height: 100px;  width: 100px;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Bind style</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :style&#x3D;&quot;&#123; color: myColor, fontSize: myFontSize &#125;&quot;&gt;hello&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;      myColor: &quot;red&quot;,      myFontSize: &quot;190px&quot;,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can also bind styles optionally or in a form of array like the class binding.</p><h4 id="Instance-monitor-an-input-box"><a href="#Instance-monitor-an-input-box" class="headerlink" title="Instance : monitor an input box"></a>Instance : monitor an input box</h4><ol><li>The first option</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- key up event will be triggered when your keyboard pops up. --&gt;  &lt;input type&#x3D;&quot;text&quot; @keyup&#x3D;&quot;doSearch($event)&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;    doSearch(e: any) &#123;      console.log(e.keyCode);      &#x2F;* check the input to confirm whether &#96;enter&#96; is pressed. *&#x2F;      if (e.keyCode &#x3D;&#x3D; 13) &#123;        alert(&quot;enter key is pressed&quot;);        &#x2F;* do search *&#x2F;      &#125;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>The second option</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;!-- key up event will be triggered when your keyboard pops up. --&gt;  &lt;!-- keyup.enter will be triggered when you input a &#96;enter&#96; --&gt;  &lt;input type&#x3D;&quot;text&quot; @keyup.enter&#x3D;&quot;doSearch($event)&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;    doSearch(e: any) &#123;      &#x2F;* no need to check the input *&#x2F;      console.log(e.keyCode);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;ul&gt;    &lt;li&gt;name : &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; &#x2F;&gt;&lt;&#x2F;li&gt;    &lt;li&gt;age : &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;age&quot; &#x2F;&gt;&lt;&#x2F;li&gt;  &lt;&#x2F;ul&gt;  &lt;button @click&#x3D;&quot;doSubmit()&quot; class&#x3D;&quot;submit&quot;&gt;get content&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;    doSubmit() &#123;      var username &#x3D; document.querySelector(&quot;#username&quot;);      if (username !&#x3D; null) &#123;        console.log(username);      &#125;      console.log(this.$refs.age);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Two-way-binding"><a href="#Two-way-binding" class="headerlink" title="Two-way binding"></a>Two-way binding</h3><p>DOM consumes a lot of resources. We use the way of two-way binding to get values instead.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;ul&gt;    &lt;!-- two-way binding --&gt;    &lt;li&gt;name : &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; v-model&#x3D;&quot;username&quot; &#x2F;&gt;&lt;&#x2F;li&gt;  &lt;&#x2F;ul&gt;  &lt;button @click&#x3D;&quot;doSubmit()&quot; class&#x3D;&quot;submit&quot;&gt;get content&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;      &#x2F;* two-way binding *&#x2F;      username: &quot;jack&quot;,    &#125;;  &#125;,  methods: &#123;    doSubmit() &#123;      console.log(this.username);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There are some modifiers for <code>v-model</code> binding, suck as <code>.lazy</code>, <code>.number</code>, <code>.trim</code>.</p><h3 id="If-else"><a href="#If-else" class="headerlink" title="If else"></a>If else</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; num &#x3D;&#x3D; 1 ? &quot;num&#x3D;1&quot; : &quot;num!&#x3D;1&quot; &#125;&#125;  &lt;div v-if&#x3D;&quot;num &#x3D;&#x3D; 1&quot;&gt;hello div&lt;&#x2F;div&gt;  &lt;!-- this is invaild and will not take effect --&gt;  &lt;span vi-else&gt;hello span&lt;&#x2F;span&gt;  &lt;!-- this is the correct code --&gt;  &lt;div v-if&#x3D;&quot;num &#x3D;&#x3D; 1&quot;&gt;hello div&lt;&#x2F;div&gt;  &lt;!-- if num !&#x3D; 1, the label will be deleted by DOM --&gt;  &lt;div v-else&gt;goodbye div&lt;&#x2F;div&gt;  &lt;!-- if num !&#x3D; 1, the label will be hidden by css --&gt;  &lt;div v-show&#x3D;&quot;num &#x3D;&#x3D; 1&quot;&gt;hello div&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123;      num: 2,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Compute"><a href="#Compute" class="headerlink" title="Compute"></a>Compute</h3><p>The function declared in <code>computed</code> will be called when variables changed.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; calculateNum &#125;&#125;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123; message: &quot;hello&quot; &#125;;  &#125;,  computed: &#123;    calculateNum: function () &#123;      let self &#x3D; this as any;      return self.message.split(&quot;&quot;).reverse().join(&quot;&quot;);      &#x2F;* The lsp will report an error when using the code below. But it will not cause error during the runtime.*&#x2F;      &#x2F;* return this.message.split(&quot;&quot;).reverse().join(&quot;&quot;); *&#x2F;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The error in above code is caused by the static type checking of typescript lsp. Once you meet this error, and feel confused about the solution. You can fix it by transforming the type to <code>any</code>.</p><h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; counter &#125;&#125;  &#123;&#123; count &#125;&#125;  &lt;button @click&#x3D;&quot;counter++&quot;&gt;click me&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;    return &#123; counter: 1, count: 0 &#125;;  &#125;,  watch: &#123;    &#x2F;* the name of the function must be the same as the variable you want to watch *&#x2F;    counter: function (value) &#123;      this.count &#x3D; value * 2;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;todolist&quot;&gt;    &lt;h3&gt;TodoList&lt;&#x2F;h3&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;export default &#123;  data() &#123;&#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; scoped&gt;.todolist &#123;  width: 500px;  height: 500px;  background-color: green;  h3 &#123;    color: red;  &#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Debouncing-and-Throttling"><a href="#Debouncing-and-Throttling" class="headerlink" title="Debouncing and Throttling"></a>Debouncing and Throttling</h3><p>You can implement debouncing and throttling by using libraries such as <code>Lodash</code>.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/lodash@4.17.20/lodash.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Debouncing with Lodash</span>      click<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ... respond to click ...</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you want to keep the component instance independently, you can add the debounced function in the created lifecycle hook.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"save-button"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Debouncing with Lodash</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>debouncedClick <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Cancel the timer when the component is removed</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>debouncedClick<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// ... respond to click ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;button @click="debouncedClick">      Save    &lt;/button>  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I will continue to make notes on the advanced usage of vue, so please stay tuned.</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vite </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Vue3 Project</title>
      <link href="2021/05/15/create-vue3-project/"/>
      <url>2021/05/15/create-vue3-project/</url>
      
        <content type="html"><![CDATA[<h1 id="创建-vue3-项目（vue3-vite-typescript-less）"><a href="#创建-vue3-项目（vue3-vite-typescript-less）" class="headerlink" title="创建 vue3 项目（vue3 + vite + typescript + less）"></a>创建 vue3 项目（vue3 + vite + typescript + less）</h1><p>首先声明一下，笔者只是刚玩了会 vue, 和 <code>cannot find module vue</code>斗智斗勇了半天。好不容易搞定了，来分享一下。以下不会涉及关于 vue 开发的具体内容。</p><p>使用 npm 作为包管理器。</p><blockquote><p>yarn2 的一系列操作让人迷惑，本来不想折腾了。最后还是忍不住折腾了一把，用法放在最后面。</p></blockquote><p>创建项目</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 使用vue + ts的模板创建项目npm init @vitejs&#x2F;app $appName -- --template vue-tscd appName# 安装lessnpm install less -D# 这是coc-vetur的依赖项，不使用vim + coc.nvim 的可以忽略npm install eslint eslint-plugin-vue -D# 这是在vue文件中解决cannot find module问题的插件npm install @vuedx&#x2F;typescript-plugin-vue -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以进入项目，使用<code>npm run dev</code>运行。</p><blockquote><p>npm7 以上版本会出错，使用<code>node node_modules/esbuild/install.js</code>解决。</p></blockquote><p>为了解决 ts 文件中<code>cannot find module vue</code>的问题，还需要做以下设置。</p><p>在<code>tsconfig.json</code>中加入</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@vuedx/typescript-plugin-vue"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以以同样方式加入 eslint-plugin-vue。</p></blockquote><p>如果你使用的是 vim/neovim + coc-vetur，则在<code>coc-settings.json</code>中配置<code>&quot;vetur.useWorkspaceDependencies&quot;: true</code>。这一步是让插件使用项目内的依赖，否则插件在全局找不到刚才安装的插件。</p><p>如果你使用 vscode，设置<code> &quot;Select TypeScript version&quot; -&gt; &quot;Use workspace version&quot;</code>。<a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vue-ts">参考</a></p><p>注意，此时已经不需要<code>src/shims-vue.d.ts</code>。</p><p>笔者不使用 vscode，不过从<a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vue-ts">参考</a>的描述来看，应该是可以对 vue 文件和 ts 文件都产生作用。在 vim + coc.nvim 的环境中，两种文件均可生效。</p><p>在 neovim + coc.nvim 环境下进行测试。</p><ol><li>不启用任何插件，无论有没有<code>src/shims-vue.d.ts</code>文件，vue 文件中<code>import &#123; defineComponent &#125; from &#39;vue&#39;</code>都不报错，<code>import HelloWorld from &#39;./components/HelloWorld.vue&#39;</code>也不报错。</li><li>只要启用<code>eslint-plugin-vue</code>插件，就可以防止 ts 文件中<code>import &#123; createApp &#125; from &#39;vue&#39;</code>出错。但是如果没有<code>src/shims-vue.d.ts</code>文件，<code>import App from &#39;./App.vue&#39;</code>还是会出错。</li><li>继续启用<code>@vuedx/typescript-plugin-vue</code>，删掉<code>src/shims-vue.d.ts</code>，一切正常。</li></ol><p>为了在挂载自定义组件的时候不出错，还需要设置根目录下的<code>vite.config.ts</code>如下。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span> vue<span class="token operator">:</span> <span class="token string">"vue/dist/vue.esm-bundler.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 yarn2 代替 npm。</p><p>首先安装 yarn1。</p><blockquote><p>yarn2 的默认用法是把自己当成依赖安装在项目中。如果在全局安装 yarn2，也需要在项目中才能执行命令。同时 yarn2 无法执行 create 命令，还需要依靠 yarn1。</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 在全局安装yarn1npm -g install yarn# 初始化项目yarn create @vitejs&#x2F;app appName --template vue-ts# 升级成yarn2cd appNameyarn set version berry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改项目根目录下<code>.yarnrc.yml</code>。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">yarnPath: &quot;.yarn&#x2F;releases&#x2F;yarn-berry.cjs&quot;nodeLinker: node-modulesnpmRegistries: https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二行的配置是让 yarn2 完全用 npm 的方式安装依赖。否则是不存在<code>node_modules</code>的，也就不能调用插件。虽然这样做丧失了 yarn2 的特性，但是比起 npm 至少速度上可以快点。</p><p>继续完成项目初始化。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yarn installyarn add less -Dyarn add eslint eslint-plugin-vue -Dyarn add @vuedx&#x2F;typescript-plugin-vue -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vite </tag>
            
            <tag> Typescript </tag>
            
            <tag> Less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Realvnc on Manjaro on rpi4</title>
      <link href="2021/05/15/use-realvnc-on-manjaro-on-rpi4/"/>
      <url>2021/05/15/use-realvnc-on-manjaro-on-rpi4/</url>
      
        <content type="html"><![CDATA[<h1 id="在安装-manjaro-系统的树莓派上使用-realvnc"><a href="#在安装-manjaro-系统的树莓派上使用-realvnc" class="headerlink" title="在安装 manjaro 系统的树莓派上使用 realvnc"></a>在安装 manjaro 系统的树莓派上使用 realvnc</h1><p>本文主要介绍如何在树莓派 4 上的 manjaro 或 arch 系统上使用 realvnc。如果设置不成功，也可以参考我的<a href="https://www.niuiic.top/2021/05/15/install-manjaro-on-rpi4/">另一篇文章</a>使用 tigervnc 代替。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-none"><code class="language-none">yay -S aur&#x2F;realvnc-vnc-server-aarch64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>注意，以下步骤是我在折腾时用到的，不一定全部有用，但设置完成后应该可以达到效果。</p><ol><li>设置<code>~/.vnc/config.d/vncserver-x11</code>文件，将<code>Authentication=SystemAuth</code>改为<code>Authentication=VncAuth</code>。如果原本没有，直接写上就行。</li><li>使用<code>sudo vncpasswd -service</code>设置密码。</li><li>设置开机启动 vnc。<br><code>sudo systemctl enable vncserver-x11-serviced.service sudo systemctl enable vncserver-virtuald.service</code></li><li>安装一个驱动。<code>yay -S xf86-video-dummy</code></li><li>修改<code>/etc/X11/xorg.conf.d/10-headless.conf</code>为以下内容。</li></ol><pre class="line-numbers language-none"><code class="language-none">Section &quot;Monitor&quot;        Identifier &quot;dummy_monitor&quot;        HorizSync 28.0-80.0        VertRefresh 48.0-75.0        Modeline &quot;1920x1080&quot; 172.80 1920 2040 2248 2576 1080 1081 1084 1118EndSectionSection &quot;Device&quot;        Identifier &quot;dummy_card&quot;        VideoRam 256000        Driver &quot;dummy&quot;EndSectionSection &quot;Screen&quot;        Identifier &quot;dummy_screen&quot;        Device &quot;dummy_card&quot;        Monitor &quot;dummy_monitor&quot;        SubSection &quot;Display&quot;        EndSubSectionEndSection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>允许用户使用<code>system-xorg</code>。<code>vncinitconfig -enable-system-xorg</code>。输出提示该发行版不支持 system-xorg。不用管他，继续设置就行。</li><li>这里是设置分辨率，是最关键的一步。熟悉 vnc 的应该知道如果 vncserver 不知道分辨率就不能显示。而通过<code>raspi-config</code>修改分辨率在这两个系统上是无效的。因此需要修改<code>/etc/X11/vncserver-virtual-dummy.conf</code>，写入<code>gtf 1920 1080 60</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
            <tag> Manjaro </tag>
            
            <tag> Realvnc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Manjaro on rpi4</title>
      <link href="2021/05/15/install-manjaro-on-rpi4/"/>
      <url>2021/05/15/install-manjaro-on-rpi4/</url>
      
        <content type="html"><![CDATA[<h1 id="在树莓派-4-上安装-manjaro"><a href="#在树莓派-4-上安装-manjaro" class="headerlink" title="在树莓派 4 上安装 manjaro"></a>在树莓派 4 上安装 manjaro</h1><p>本文介绍如何在树莓派 4 上安装系统并做一定的性能提升。</p><h2 id="方案介绍"><a href="#方案介绍" class="headerlink" title="方案介绍"></a>方案介绍</h2><ol><li>放弃孱弱的 SD 卡，使用固态硬盘从 USB 引导启动。</li><li>加装 USB 网卡，解决内置网卡被外壳屏蔽的问题。</li><li>使用 64 位 manjaro 系统。既容易安装，又可以使用 arch 庞大的软件库，还更加稳定。</li></ol><blockquote><ol><li>SD 卡接口读写速度大概在几十 M 左右，换成 USB3.0 后可以达到几百 M，差不多可以翻 10 倍。</li><li>如果使用全封闭式金属外壳，内置网卡甚至总是连不上网。不过就算全敞开，也不见得有号称的千兆网卡的性能。</li><li>使用 manjaro 主要是软件比较新而且丰富。不使用 arch 主要还是没空折腾。</li></ol></blockquote><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><ol><li>一张 SD 卡（16G 就可以）。</li><li>一个 USB 读卡器。</li><li>一个免驱 USB 网卡。</li><li>一个的 128G 固态硬盘。</li><li>一条网线。</li></ol><blockquote><ol><li>固态的容量不需要很大。因为树莓派不能当电脑用，不需要安装过多软件。如果要存储，可以另加。</li><li>不需要使用 m2 接口的固态。因为 USB3.0 接口的读写速度有限，500M/s 读写速度的硬盘就足够了。</li></ol></blockquote><h2 id="设置从-USB-引导"><a href="#设置从-USB-引导" class="headerlink" title="设置从 USB 引导"></a>设置从 USB 引导</h2><p>设置从 USB 引导需要升级固件并做设置。</p><blockquote><p>如果是较新的树莓派 4，固件已经不需要升级。不过为了方便做设置，也需要进行以下步骤。</p></blockquote><h3 id="安装-Raspberry-Pi-OS"><a href="#安装-Raspberry-Pi-OS" class="headerlink" title="安装 Raspberry Pi OS"></a>安装 Raspberry Pi OS</h3><p>访问<a href="https://www.raspberrypi.org/software/">树莓派系统官网</a>下载 Raspberry Pi Imager。</p><p>用该软件向 SD 卡中写入 Raspberry Pi OS 镜像（只有字符界面的就可以）。</p><p>写完后拔下读卡器。</p><p>以下假设电脑有以太网接口，且为 windows 系统（其他情况上网查找如何连接树莓派）。</p><p>打开 windows 中的更改适配器设置。将当前联网的适配器，如 wifi，共享给以太网接口（新版本的 windows 中已经没有具体共享给哪个接口的选项，只需要设置共享即可）。</p><p>把卡插入树莓派，用网线连接树莓派与电脑，启动树莓派。</p><p>待树莓派启动后（查看网络适配器，发现以太网接口已经连接，只是无法识别），打开 cmd，输入<code>arp -a</code>。结果如下所示。</p><p><img src="1.png" alt="cmd"></p><p>一般进行上述设置后，以太网接口的 ip 变成<code>192.168.137.1</code>。如果是别的，需要根据实际 ip 修改下面的设置。</p><blockquote><p>为什么要共享网络。虽然不共享网络也会有以太网 ip。但是这个 ip 基本不会是 192.168 开头的，会影响到树莓派连接 wifi。</p></blockquote><p>给树莓派断电，拔出 SD 卡，再用读卡器插回电脑。</p><p>现在可以看到的是树莓派系统的 boot 分区。修改<code>cmdline.txt</code>的第一行，再开头添加<code>ip=192.168.137.20</code>。<code>192.168.137</code>是网段，这一段必须和前面查出的一致。最后一个数字可以随便选择，这里以 20 为例。</p><p>新建 SSH 文件。注意该文件空白且无后缀。这是为了正常启用 SSH。</p><p>再把 SD 卡插回树莓派，启动。</p><p>等树莓派完全启动后就可以在电脑上使用 putty 或者其他软件通过<code>192.168.137.20</code>访问树莓派。默认用户为 pi，密码为 raspberry。</p><p>登录后，先来连接网络。首先把免驱 USB 网卡插到 USB2.0（黑色）接口上。</p><blockquote><p>一般家用网络传输速度不会超过 USB2.0 的传输速度，所谓的千兆网卡一般也不行。当然如果另一个 USB3 没用的话可以插上。</p></blockquote><p>由于是字符界面，因此使用命令行工具来连接。</p><pre class="line-numbers language-none"><code class="language-none"># wifi name 和 password 改成实际的值。wifi名称可以在手机或者电脑上看。wpa_passphrase &quot;wifi name&quot; password &gt; internet.conf# wlan0是内置网卡接口的名称。可以使用ip a来查看USB网卡的名称，然后使用USB网卡。sudo wpa_supplicant -c .&#x2F;internet.conf -i wlan0 &amp;sudo dhcpcd &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连上网后，给系统换源。</p><pre class="line-numbers language-none"><code class="language-none"># 编辑&#x2F;etc&#x2F;apt&#x2F;sources.list，修改内容为deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main non-free contrib# 编辑&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list，修改内容为deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberrypi&#x2F; buster main ui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新固件"><a href="#更新固件" class="headerlink" title="更新固件"></a>更新固件</h3><pre class="line-numbers language-none"><code class="language-none">sudo apt updatesudo apt full-upgrade# 编辑&#x2F;etc&#x2F;default&#x2F;rpi-eeprom-update，修改为FIRMWARE_RELEASE_STATUS&#x3D;&quot;stable&quot;sudo rpi-eeprom-update -d -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置引导顺序"><a href="#设置引导顺序" class="headerlink" title="设置引导顺序"></a>设置引导顺序</h3><p>使用<code>sudo raspi-config</code>启动配置工具。在其中设置 boot order 即可。</p><h2 id="安装-manjaro"><a href="#安装-manjaro" class="headerlink" title="安装 manjaro"></a>安装 manjaro</h2><p>前往<a href="https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/m/ma/manjaro-arm/rpi4/">清华镜像站</a>下载自己想要的系统。</p><blockquote><p>如果你需要桌面，且又不想耗费太多性能，可以选择 i3 或者 xfce 桌面。如果你不熟悉 wayland，最好不要选择 sway。</p></blockquote><p>下载完成之后，使用树莓派镜像刻录工具将镜像写入固态硬盘中。</p><p>写完后拔出固态，再插回。在<code>cmdline.txt</code>文件的第一行开头加上<code>ip=192.168.137.20</code>，然后再新建<code>SSH</code>文件。</p><p>把固态硬盘接到树莓派 USB3 接口（蓝色）上，上电。</p><h3 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h3><p>使用<code>root</code>用户登录。首次登录无密码，直接进入设置页面。自行设置。</p><ol><li>一般的键盘，其布局为 us。</li><li>时区选择<code>Asia/Shanghai</code>。</li><li>locale 可以选<code>en_US.UTF-8</code>或者<code>zh_CN.UTF-8</code>。</li></ol><p>设置完成后会自动重启。</p><h3 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h3><p>使用<code>ip a</code>查看网络连接情况，结果如下。<br><img src="2.png" alt="ip a"></p><ol><li>关闭内置网卡。<code>sudo ip link set wlan0 down</code></li><li>连接 wifi。<code>sudo nmcli d wifi connect &quot;KFC_free&quot; password &quot;12345678&quot;</code><blockquote><p>第一步的目的是让 NetworkManager 在树莓派启动时不会自动使用 wlan0 连接 wifi。如果第一次联网时不先关闭 wlan0，则下次联网时两个接口都会获得 ip。但是系统一次只能用一个，如果用到内置网卡，可能就会影响速度。如果你熟悉网络方面的设置，可以设置轮流使用两个网卡。比如一个网卡在下载，用另一个网卡浏览网页。本文不做这方面介绍。</p></blockquote></li></ol><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><pre class="line-numbers language-none"><code class="language-none">sudo pacman-mirrors -i -c China -m rank# 编辑 &#x2F;etc&#x2F;pacman.conf，在最后写入[archlinuxcn]SigLevel &#x3D; Optional TrustAllServer &#x3D; http:&#x2F;&#x2F;mirrors.163.com&#x2F;archlinux-cn&#x2F;$arch# 更新sudo pacman -Syyy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>为了稳定，只使用 manjaro 的稳定源，不添加 arch 源。</li><li>清华源总是莫名其妙的对 ip 限流，个人选择绕开它。</li></ol></blockquote><p>安装 yay。<code>sudo pacman -S yay</code><br>换源。<code>yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</code></p><blockquote><p>这个只能选清华源了。</p></blockquote><p>升级所有软件。<code>sudo pacman -Syu</code></p><h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><p>设置远程连接桌面。</p><pre class="line-numbers language-none"><code class="language-none">sudo pacman -S tigervnc# 设置密码vncpasswd# 配置用户，把niuiic换成自己的用户名if [ -z &quot;$(grep niuiic &#x2F;etc&#x2F;tigervnc&#x2F;vncserver.users)&quot; ];then        #sudo sed -i &#39;&#x2F;niuiic&#x2F;d&#39; &#x2F;etc&#x2F;tigervnc&#x2F;vncserver.users        echo &quot;  :1&#x3D;niuiic&quot; | sudo tee -a &#x2F;etc&#x2F;tigervnc&#x2F;vncserver.users    fi# 查看自己的桌面。注意如果你前面安装了sway桌面，这里就麻烦了。# 因为sway使用wayland协议，你压根不会有这个目录。# 可以参考https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;sway&#x2F;issues&#x2F;100自己设置。ls   &#x2F;usr&#x2F;share&#x2F;xsessions&#x2F;# 编辑~&#x2F;.vnc&#x2F;config# session是桌面名，geometry是分辨率。session&#x3D;xfcegeometry&#x3D;1920x1080alwaysshared# 启动vnc# 默认端口为5901sudo systemctl enable vncserver@:1sudo systemctl start vncserver@:1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载 vncviewer 软件。使用<code>192.168.137.20:5901</code>连接树莓派。以下是连接成功后的桌面截图。有点黑边，调整下软件窗口大小即可。</p><p><img src="3.png" alt="screen"></p><h3 id="vulkan"><a href="#vulkan" class="headerlink" title="vulkan"></a>vulkan</h3><p>安装 vulkan 只是为了测试一些特定的包。不需要的可以略过。（想玩游戏的就省省吧，树莓派这性能还跑不了需要 vulkan 的游戏，除非是你自己写的贪吃蛇~~。）</p><pre class="line-numbers language-none"><code class="language-none">sudo pacman -Syu linux-rpi4-rc linux-rpi4-rc-headers mesa-git# 如果显示没有xf86-video-fbturbo包，就不管它。sudo pacman -U xf86-video-fbturbo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目前 mesa-git 还不支持 DRI3。</p><p>还有一件事，源里的 v2ray 有点问题，去 GitHub 上下个吧。</p><p>到此为止了，其他配置网上都查得到，多数也都是正确的，不需要折腾。</p>]]></content>
      
      
      <categories>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust Tauri &quot;Hello World&quot;</title>
      <link href="2021/05/11/rust-tauri-hello-world/"/>
      <url>2021/05/11/rust-tauri-hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust-Tauri-“Hello-World”"><a href="#Rust-Tauri-“Hello-World”" class="headerlink" title="Rust Tauri “Hello World”"></a>Rust Tauri “Hello World”</h1><p>本文介绍如何在 linux 系统上运行第一个 tauri 应用。</p><blockquote><p>js 开发人员应当可以直接参考官方文档跑通程序。本文旨在为不熟悉此类开发的人士梳理开发流程。</p></blockquote><h2 id="什么是-tauri"><a href="#什么是-tauri" class="headerlink" title="什么是 tauri"></a>什么是 tauri</h2><p>用一句话回答：tauri 是 electron 的替代品。目前它已经可以做到比 electron 更好。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>接下来，来看如何使用 tauri 框架。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>根据<a href="https://tauri.studio/en/docs/getting-started/setup-linux">官方文档</a>。</p><p>在 linux 下使用 tauri 需要 webkit library、nodejs runtime 以及 rust 环境的支持。</p><blockquote><p>以下默认以 yarn 作为 js 包管理器。</p></blockquote><p>这部分可以参考文档解决。另外记得给 yarn 和 cargo 换源。</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><ol><li><code>yarn init</code></li></ol><p>一切默认即可。</p><ol start="2"><li><code>yarn add @tauri-apps/cli</code></li></ol><p>在当前项目目录添加 tauri 可执行程序及其依赖。</p><p>为了方便使用，在<code>package.json</code>中设置如下内容。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"tauri"</span><span class="token operator">:</span> <span class="token string">"tauri"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置完成之后就可以使用<code>yarn tauri</code>命令代替<code>tauri.js</code>。</p><ol start="3"><li><code>yarn tauri init</code></li></ol><p>初始化 tauri 项目，设置相应信息。</p><p><code>Where are your web assets (HTML/CSS/JS) located</code>指的是存放 html、css、js 文件的目录，可以设置为<code>../dist</code>。</p><p><code>What is the url of your dev server</code>指的是开发服务器的 url。所谓开发服务器，就是开发过程中使用的显示、调试等工具的集合。这里先将其设置为<code>http://localhost:8080</code>。</p><ol start="4"><li><code>yarn tauri info</code></li></ol><p>查看一下刚才设置的信息。</p><ol start="5"><li><code>yarn tauri dev</code></li></ol><p>编译项目并运行。</p><blockquote><p>如果你在上面的步骤中因为网络问题而中断操作，很有可能在这一步出现报错。最快的解决方案只需简单粗暴的重头再来。</p></blockquote><p>这时，你会发现项目编译完成并运行，但是显示<code>could not connect to server</code>。</p><p>这是因为没有启动开发服务器。</p><ol start="6"><li><code>yarn add webpack-dev-server</code></li></ol><p>安装开发服务器。</p><p>在<code>package.json</code>文件中设置如下。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"tauri"</span><span class="token operator">:</span> <span class="token string">"tauri"</span><span class="token punctuation">,</span>  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack serve"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继续安装<code>yarn add webpack</code></p><p>这时可以使用<code>yarn dev</code>来启动开发服务器。</p><p>此时，你又会发现有报错。这是因为没有配置开发服务器。</p><ol start="7"><li>配置开发服务器</li></ol><p>在项目根目录下新建<code>webpack.config.js</code>。写入以下内容。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/js/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里只是简单的配置。更多配置可以参考该服务器的文档。</p></blockquote><p>以上配置应当容易理解，只是需要注意各路径必须是绝对路径。</p><p>在项目根目录下新建 src 目录，在 src 目录下新建 css、js 目录。在 src 目录下新建一个<code>index.html</code>空文件，在 js 目录下新建一个<code>index.js</code>空文件。</p><p>在项目跟目录下新建 dist 目录。</p><p>修改<code>package.json</code>如下。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"tauri"</span><span class="token operator">:</span> <span class="token string">"tauri"</span><span class="token punctuation">,</span>  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack serve --config webpack.config.js --mode development"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在先使用<code>yarn dev</code>开启语言服务器。等服务器完全启动后，再使用<code>yarn tauri dev</code>编译运行项目。</p><p>此时可以看到弹出窗口显示为文件浏览器。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tauri </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Better Highlight for Go Files in Vim</title>
      <link href="2021/04/28/better-highlight-for-go-files-in-vim/"/>
      <url>2021/04/28/better-highlight-for-go-files-in-vim/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-中更好的-go-语言高亮"><a href="#vim-中更好的-go-语言高亮" class="headerlink" title="vim 中更好的 go 语言高亮"></a>vim 中更好的 go 语言高亮</h1><p>本文主要说明如何解决 go 方法在大多数配色方案中无法高亮的问题。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>vim 现有的绝大多数高亮插件都没有对 go 语言方法进行高亮。如<code>fmt.Printf</code>。则<code>Printf</code>不会被高亮。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>访问<a href="https://github.com/athom/more-colorful.vim/blob/master/after/syntax/go.vim">athom/more-colorful.vim</a>。将文件内容拷贝到<code>~/.vim/after/syntax/</code>。如果是 neovim，则拷贝到<code>～/.config/nvim/after/syntax/</code>。</p><p>该配置提供了操作符、函数、方法、结构体的高亮。需要取消某一高亮只需要修改以下内容。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"go_highlight_operators"</span><span class="token punctuation">)</span><span class="token keyword">let</span> go_highlight_operators <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要给各高亮组换色只需要设置以下内容。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token builtin">hi</span> goMethod guifg<span class="token operator">=</span>#4dffff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Better Use of Rust on Gentoo</title>
      <link href="2021/04/24/better-use-of-rust-on-gentoo/"/>
      <url>2021/04/24/better-use-of-rust-on-gentoo/</url>
      
        <content type="html"><![CDATA[<h1 id="在-gentoo-上更好地使用-rust"><a href="#在-gentoo-上更好地使用-rust" class="headerlink" title="在 gentoo 上更好地使用 rust"></a>在 gentoo 上更好地使用 rust</h1><p>本文介绍在 gentoo 上避开 portage 使用 rust 的方法以及 rust 编译缓存的设置。</p><h2 id="使用官方-rust"><a href="#使用官方-rust" class="headerlink" title="使用官方 rust"></a>使用官方 rust</h2><p>rust 官方提供的 rust 安装方式为<code>curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh</code>。你可以使用该命令安装官方 rust 工具链。但是 gentoo 系统并不会自动识别你安装的 rust。因此在安装一些由 rust 编译的软件时，包管理系统依旧会先编译 rust。之所以不推荐使用系统编译的 rust，主要还是编译耗时太长，对于需要多个版本编译链的用户并不友好。接下来，说明如何使包管理系统识别到用户自己安装的 rust。</p><p>首先，执行以下命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mkdir -p &#x2F;etc&#x2F;portage&#x2F;profile&#x2F;package.provided<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该目录用于向包管理系统标记已经安装的程序。</p><p>编辑<code>/etc/portage/profile/package.provided/rust</code>，写入已经存在的程序。</p><pre class="line-numbers language-none"><code class="language-none">dev-lang&#x2F;rust-1.50.0virtual&#x2F;rust-1.50.0dev-util&#x2F;cargo-1.50.0dev-util&#x2F;rustup-1.23.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，必须指明版本，查看当前软件的版本写入即可，之后如果有升级也不必修改，除非软件依赖要求更高版本。</p><p>编辑<code>/etc/portage/profile/profile.bashrc</code>，写入已安装的这些软件的路径。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export PATH&#x3D;&quot;&#x2F;home&#x2F;yourname&#x2F;.cargo&#x2F;bin:$PATH&quot;STABLE&#x3D;&#x2F;home&#x2F;yourname&#x2F;.rustup&#x2F;toolchains&#x2F;stable-x86_64-unknown-linux-gnurustup toolchain link build-stable $STABLE &amp;&gt; &#x2F;dev&#x2F;nullrustup default build-stable &amp;&gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用 stable 版本的工具链。另外使用自己的用户名。</p><p>至此，包管理系统已经可以自动识别并使用用户自行安装的 rust，如果不放心，你也可以进一步 mask 掉这些包。</p><h2 id="rust-编译缓存"><a href="#rust-编译缓存" class="headerlink" title="rust 编译缓存"></a>rust 编译缓存</h2><p>C、C++的编译可以使用 ccache 作为缓存器，这样下次编译时会调用本次的成果，可以大大节省编译时间。对于 rust 而言，这个工具是 sccache。</p><p>执行以下命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">emerge --ask dev-util&#x2F;sccachemkdir -p &#x2F;var&#x2F;cache&#x2F;sccachechown root:portage &#x2F;var&#x2F;cache&#x2F;sccachechmod 2775 &#x2F;var&#x2F;cache&#x2F;sccache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编辑<code>/etc/sandbox.d/20sccache</code>，写入</p><pre class="line-numbers language-none"><code class="language-none">SANDBOX_WRITE&#x3D;&quot;&#x2F;var&#x2F;cache&#x2F;sccache&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑<code>/etc/portage/make.conf</code>，写入</p><pre class="line-numbers language-none"><code class="language-none">RUSTC_WRAPPER&#x3D;&#x2F;usr&#x2F;bin&#x2F;sccacheSCCACHE_DIR&#x3D;&#x2F;var&#x2F;cache&#x2F;sccacheSCCACHE_MAX_FRAME_LENGTH&#x3D;104857600<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim File Encoding</title>
      <link href="2021/04/18/vim-file-encoding/"/>
      <url>2021/04/18/vim-file-encoding/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-文件编码"><a href="#Vim-文件编码" class="headerlink" title="Vim 文件编码"></a>Vim 文件编码</h1><p>本文主要介绍 vim 文件编码，主要解决中文乱码问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>vim 默认打开文件的编码为 utf-8，如果是 gbk 编码的文件或者 gb2312 编码的文件，其中文一定会乱码。</p><p>首先，设置 vim 打开文件的编码。</p><p>在配置文件中写入<code>set fencs=utf-8,gbk,big5,cp936,gb18030,gb2312,utf-16</code>。该配置的意义是让 vim 挨个尝试列出的编码，直到不出错，然后将以该编码打开文件。</p><p>至此，在文件中看到的中文已经不会乱码。但是一些插件，如 vim-clap 中搜索时显示的中文依旧是乱码的。这是因为本质上这些内容依旧不是 utf-8 格式，而这些插件也不遵从上面的配置。于是需要将文件转换为 utf-8 编码。</p><p>使用<code>:set fenc=utf8</code>可以将打开的所有缓冲区修改为 utf-8 编码。如果有大量文件需要转换，可以将其绑定至一个快捷键。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">e</span> <span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token builtin">fenc</span><span class="token operator">=</span>utf8<span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，如果一开始没有正确打开文件，中文仍处于乱码状态，即使修改编码也是无济于事的。因此为保险起见，不建议直接用 shell 命令给所有文件切换编码，而是在用 vim 编辑时边查看是否乱码，边修改编码。如果文件量很大，可以借助其他靠谱的工具。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Quickfix</title>
      <link href="2021/04/17/vim-quickfix/"/>
      <url>2021/04/17/vim-quickfix/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-Quickfix"><a href="#Vim-Quickfix" class="headerlink" title="Vim Quickfix"></a>Vim Quickfix</h1><p>本文主要介绍 vim quickfix 的使用与优化。</p><h2 id="什么是-quickfix"><a href="#什么是-quickfix" class="headerlink" title="什么是 quickfix"></a>什么是 quickfix</h2><p>quickfix 属于 vim 的高级功能，该功能在主流 IDE 或者编辑器中都有集成。</p><p>简单的说，quickfix 就是搜集编译器的输出信息，然后定位错误与警告位置，提供直接跳转功能。可以说有了完善的 quickfix 功能的 vim 编辑器才是真正的编辑器之神。</p><h2 id="如何使用-quickfix"><a href="#如何使用-quickfix" class="headerlink" title="如何使用 quickfix"></a>如何使用 quickfix</h2><p>首先来了解一下 quickfix 的工作流程。</p><ul><li><p>第一步，设定要执行的命令，也就是编译、运行程序的命令。可以在 vim 中通过命令设置。如设置命令为 make，<code>:set makeprg=make</code>。</p></li><li><p>第二步，执行命令<code>:make</code>。注意该 make 是 vim 的命令，而不是 shell 中的 make 命令。此时，开始执行命令并且将输出送到 quickfix 窗口。</p></li><li><p>第三步，使用<code>:copen</code>打开 quickfix 窗口。可以看到刚才的输出内容。假设输出内容如下所示。</p></li></ul><p><img src="1.png" alt="quickfix window"></p><p>可以看到，图中蓝色部分为文件名，之后的为行和列，再后面的为相关信息。</p><ul><li><p>第四步，获取信息之后，跳转到出错位置。vim 提供了<code>:cnext</code>、<code>:cprev</code>、<code>:cfirst</code>、<code>:clast</code>等命令在各个错误之间跳转。也可以借助其他插件，如 vim-clap 对 quickfix 内容进行检索跳转。也可以将光标移动到 quickfix 窗口的文件位置处，键入 enter 进行跳转。</p></li><li><p>第五步，修改完所有错误后，关闭 quickfix 窗口，可以使用<code>:cclose</code>。</p></li></ul><h2 id="优化-quickfix"><a href="#优化-quickfix" class="headerlink" title="优化 quickfix"></a>优化 quickfix</h2><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>使用<code>:copen</code>打开的 quickfix 窗口较小，不利于查看，可以使用<code>:copexx</code>，如<code>:copen25</code>，指定窗口所占的行数，改变窗口大小。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>可以参考以下快捷键设置。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">au VimEnter <span class="token operator">*</span> <span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token builtin">makeprg</span><span class="token operator">=</span><span class="token keyword">make</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>qs <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token keyword">set</span> <span class="token builtin">makeprg</span><span class="token operator">=</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>qo <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>cope25<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>qm <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token keyword">make</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>qc <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token keyword">cclose</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span>A<span class="token operator">-</span><span class="token keyword">j</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">cnext</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span>A<span class="token operator">-</span><span class="token keyword">k</span><span class="token operator">></span> <span class="token punctuation">:</span>cprev<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span>A<span class="token operator">-</span>g<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">cfirst</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span>A<span class="token operator">-</span>G<span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">clast</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">q</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+quickfix'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'set compile cmd'</span><span class="token punctuation">,</span>\ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'open quickfix window'</span><span class="token punctuation">,</span>\ <span class="token string">'m'</span> <span class="token punctuation">:</span> <span class="token string">'make'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'close quickfix window'</span>\<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>quickfix 默认同步执行，也就是说执行<code>:make</code>后，直到任务结束，你将无法使用 vim。在任务执行时间较长的情况下，这是很不利的。因此需要做出优化。</p><p>当前最好的解决方案：使用<code>asynctasks.vim</code>插件。该插件可参考的配置如下。安装请参考官方文档。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>sR <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTask project<span class="token operator">-</span>run<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>sB <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTask project<span class="token operator">-</span>build<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">sb</span> <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTask <span class="token keyword">file</span><span class="token operator">-</span>build<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token builtin">sr</span> <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTask <span class="token keyword">file</span><span class="token operator">-</span>run<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">st</span> <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTaskList<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">se</span> <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTaskEdit<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>sE <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTaskEdit<span class="token operator">!</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>sg <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span><span class="token punctuation">:</span>AsyncTask git<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>asyncrun_rootmarks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.git'</span><span class="token punctuation">,</span> <span class="token string">'.svn'</span><span class="token punctuation">,</span> <span class="token string">'.root'</span><span class="token punctuation">,</span> <span class="token string">'.project'</span><span class="token punctuation">,</span> <span class="token string">'.hg'</span><span class="token punctuation">]</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>asynctasks_term_pos <span class="token operator">=</span> <span class="token string">'bottom'</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>asynctasks_term_rows <span class="token operator">=</span> <span class="token number">10</span>    <span class="token comment">" 设置纵向切割高度</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>asynctasks_term_cols <span class="token operator">=</span> <span class="token number">80</span>    <span class="token comment">" 设置横向切割宽度</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span>s <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+asynctasks'</span><span class="token punctuation">,</span>\ <span class="token string">'R'</span> <span class="token punctuation">:</span> <span class="token string">'run project'</span><span class="token punctuation">,</span>\ <span class="token string">'B'</span> <span class="token punctuation">:</span> <span class="token string">'build project'</span><span class="token punctuation">,</span>\ <span class="token string">'b'</span> <span class="token punctuation">:</span> <span class="token string">'build file'</span><span class="token punctuation">,</span>\ <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'run file'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'edit config'</span><span class="token punctuation">,</span>\ <span class="token string">'E'</span> <span class="token punctuation">:</span> <span class="token string">'edit global config'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'show task list'</span><span class="token punctuation">,</span>\<span class="token punctuation">&#125;</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>asynctasks_config_name <span class="token operator">=</span> <span class="token string">'.git/task.ini'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面说明如何使用该插件。</p><p>使用<code>:AsyncTaskEdit</code>编辑配置文件，比如</p><pre class="line-numbers language-none"><code class="language-none">[git]command&#x3D;git add . &amp;&amp; git commit -m $(?commit context) &amp;&amp; proxychains git pull origin $(?merge branch) &amp;&amp; proxychains git push -u origin $(?commit branch)cwd&#x3D;&lt;VIM_ROOT&gt;output&#x3D;terminal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该文件具体编辑方法可以参考官方文档。以上配置设定了一个 git 任务，可以使用<code>:AsyncTask git</code>执行该任务，其中<code>$(?)</code>的部分是在执行时由用户输入的。将<code>output</code>设置为<code>quickfix</code>即可将内容输出到 quickfix 窗口。</p><p>该插件可以实现异步的 quickfix 功能，但它的功能远不止这点，建议深入挖掘。</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>假设一下（真实情况应当不会出现），你犯了 100 个错，辛辛苦苦修改完了 99 个，但是剩下一个居然找不到了。这事可能发生吗？是的，很有可能。因为默认情况下，quickfix 并不会因为你修改了一个错误自动把错误消除，如果你要在 100 个错误里找 1 个，那自然是很费事的。</p><p>机灵的程序猿很快想出了绝妙的主意：我可以再执行一遍，重新生成信息。想法很不错，不过没准 n 个小时就过去了。</p><p>目前这方面暂时没有较好的插件（在 neovim 下都无法达到预想的效果）。不过可以通过以下方案来实现。</p><p>首先，可以设置快捷键。</p><pre class="line-numbers language-viml" data-language="viml"><code class="language-viml">nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;qw :&lt;C-u&gt;write! build.log&lt;CR&gt;nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;qe :&lt;C-u&gt;set modifiable&lt;CR&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在进入 quickfix 窗口后，使用<code>set modifiable</code>，让 quickfix 可修改。修改完成后使用<code>write! filename</code>保存。这里默认了文件名为<code>build.log</code>。</p><p>然后，可以在 asynctask 插件中设置一个全局的加载文件到 quickfix 的任务。</p><pre class="line-numbers language-none"><code class="language-none">[load-quickfix]command&#x3D;bat .&#x2F;build.logcwd&#x3D;&lt;VIM_ROOT&gt;output&#x3D;quickfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里为了方便，直接指定了文件名，如果需要更加具有通用性，可以设置在执行任务时手动输入文件路径。</p><p>在以上配置下，只要从项目根目录进入 vim，就不会出现 log 文件路径出错的问题。</p><h2 id="quickfix-进阶：骚操作"><a href="#quickfix-进阶：骚操作" class="headerlink" title="quickfix 进阶：骚操作"></a>quickfix 进阶：骚操作</h2><p>vim quickfix 相比 IDE 的 quickfix 功能有更高的灵活度，关键就在于可以执行任意 shell 命令，包括 shell 脚本。</p><p>于是，quickfix 有了无限可能。下面将以跨设备编译调试作为一个场景进行说明。</p><p>我的个人电脑 A 为 gentoo 系统，有配置完美的 vim 编辑器，但没有特定的编译环境。另一台电脑上虚拟机 B 为 ubuntu 系统，有完整的编译环境，且已经配置好与开发板 C（Atlas 200DK）连接。首先了解一下昇腾系列的特点：指定版本的一切。我并不想在自己电脑上装一堆乱七八糟的编译器，设一堆乱七八糟的环境变量，更不想重新配置与 C 连接。事实上以上也很难做到，强行做到相当于废了这个系统。那么在 B 上配好 vim 呢？ubuntu18.04？？？这还不得累死人，而且用不了多久。于是，骚操作开始了。</p><p>首先，把 B 上的头文件搞到 A 上，再搞出个<code>compile_commands.json</code>（假设是 C、CPP 项目）满足一下 lsp 的需求。</p><p>然后，来理一下逻辑。在 A 上写好代码后，git 推上去（单独开一个分支用来推送），在 B 上拉下来。在 B 上完成编译，甚至可以放到 C 上试一试。把出错信息传回 A，用于 quickfix。</p><p>那么，先来搞定 ssh 免密登陆，不然无法输入密码会卡住。这个可以参考网上解决方案。或者你也可以用其他语言，如 go 来实现 ssh 登陆以及交互，然后调用该程序即可。</p><p>接下来，写一个 shell 脚本，实现上述逻辑。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ssh niuiic@192.168.1.108 &quot;cd ~&#x2F;AscendProjects&#x2F;samples&#x2F;cplusplus&#x2F;level2_simple_inference&#x2F;n_performance&#x2F;1_multi_process_thread&#x2F;face_recognition_camera &amp;&amp; .&#x2F;make.sh&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A 处 git 上传未列入其中，B 处的操作已经全部包含至<code>make.sh</code>中。</p><p>这样，就可以控制 B 拉取最新代码，并进行编译，然后将信息传输回来。</p><p>但，此时遇到一个重大问题，B 上编译器输出的路径是 B 上项目的路径，传回来的自然也是，那如果 A 上的路径不同呢。quickfix 自然没有自动处理能力，会直接跳到空文件。</p><p>一个解决方案，是两边使用同一个路径。这里介绍另一个更灵活的方案。</p><p>修改上述<code>build.sh</code>。用 shell 对接收到的内容进行处理。将路径换过来。这里可以直接保存到变量修改后输出，保存到文件是为之后查看所用。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ssh niuiic@192.168.1.108 &quot;cd ~&#x2F;AscendProjects&#x2F;samples&#x2F;cplusplus&#x2F;level2_simple_inference&#x2F;n_performance&#x2F;1_multi_process_thread&#x2F;face_recognition_camera &amp;&amp; .&#x2F;make.sh&quot; &gt; .&#x2F;build.log 2&gt;&amp;1sed -i &quot;s&#x2F;\&#x2F;home\&#x2F;niuiic\&#x2F;AscendProjects\&#x2F;samples\&#x2F;cplusplus\&#x2F;level2_simple_inference\&#x2F;n_performance\&#x2F;1_multi_process_thread\&#x2F;face_recognition_camera&#x2F;\&#x2F;home\&#x2F;niuiic\&#x2F;Documents\&#x2F;Project\&#x2F;Cpp\&#x2F;face_recognition&#x2F;g&quot; .&#x2F;build.logcat .&#x2F;build.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再进一步，通过观察上文 quickfix 窗口图片可以发现，quickfix 不仅仅列出错误，也会列出警告等信息。如果没有明确的标识，就需要仔细查看才能知道是警告还是错误。所以，需要做进一步优化。</p><p>为 quickfix 窗口配置关键词高亮。对于 neovim 而言，应在<code>~/.config/nvim/after/syntax</code>目录下创建<code>qf.vim</code>。当 vim 打开 quickfix 窗口时，会自动加载该配置文件并进行关键词高亮。</p><p>修改文件内容如下。</p><pre class="line-numbers language-none"><code class="language-none">syn match QuickFixWarn &#x2F;warning&#x2F;syn match QuickFixWarn &#x2F;warn&#x2F;syn match QuickFixErr &#x2F;error&#x2F;syn match QuickFixNote &#x2F;note&#x2F;hi def link     QuickFixErr         Functionhi def link     QuickFixWarn         Functionhi def link     QuickFixNote         Functionhi QuickFixErr guifg&#x3D;redhi QuickFixWarn guifg&#x3D;yellowhi QuickFixNote guifg&#x3D;green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里分别将 warning、error、note 设置为黄色、红色、绿色。可以参考以上配置进行自定义。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install rpm/deb Packages on Gentoo</title>
      <link href="2021/03/23/install-rpm-deb-packages-on-gentoo/"/>
      <url>2021/03/23/install-rpm-deb-packages-on-gentoo/</url>
      
        <content type="html"><![CDATA[<h1 id="在-gentoo-系统上“安装”-deb-rpm-包"><a href="#在-gentoo-系统上“安装”-deb-rpm-包" class="headerlink" title="在 gentoo 系统上“安装” deb/rpm 包"></a>在 gentoo 系统上“安装” deb/rpm 包</h1><h2 id="安装原理"><a href="#安装原理" class="headerlink" title="安装原理"></a>安装原理</h2><p>众所周知，与本系统包管理体系不相容的安装包不能安装在系统上。但这里的情况分两种。</p><p>第一种，安装包内可执行文件编译时对应的架构与你的系统不同。比如你不能将 arm 架构下的软件直接跑在 amd64 的系统上。这种情况属于无解，除非自己做一个中间层。</p><p>第二种，仅仅是安装包的打包方式不同。如 deb 和 rpm。对于这种情况，完全可以将安装包拆解，然后手动将解压出来的文件放到该放的位置。这样，软件依旧可以运行，也就变相地完成了”安装“。但这并不意味着所有安装包都可以采用这种方式安装，需要解决的最大问题就是依赖。</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>这里以 utools 为例，仅介绍安装流程，不包括如何补全依赖。</p><p>该软件只提供了 deb 安装包。</p><p>首先获得 deb 安装包。</p><p>然后，解压安装包。</p><p>解压后可以看到两个目录，control 和 data。data 目录下有 usr 和 opt 两个子目录。显然，这里存放了应该被放入系统 usr 和 opt 目录下的文件。</p><p>一般这种软件都会自动创建一个快捷方式，即.desktop 文件。先找到这个文件。utools 的 utools.desktop 文件（已修改）如下。</p><pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]Name&#x3D;uToolsExec&#x3D;&#x2F;opt&#x2F;utools&#x2F;data&#x2F;opt&#x2F;uTools&#x2F;utoolsTerminal&#x3D;falseType&#x3D;ApplicationIcon&#x3D;&#x2F;opt&#x2F;utools&#x2F;data&#x2F;usr&#x2F;share&#x2F;icons&#x2F;hicolor&#x2F;512x512&#x2F;apps&#x2F;utools.pngStartupWMClass&#x3D;uToolsComment&#x3D;你的生产力工具集Categories&#x3D;System;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的文件内容是修改后的。修改之前，你可以通过<code>Exec</code>这一行看到可执行文件的位置。</p><p>找到可执行文件，直接在当前目录下运行一下，如<code>./utools</code>。如果软件可以跑起来，那基本上可以确定该软件不缺依赖，且可以直接通过相对位置找到它的配置文件等文件。对于这样的软件，建议不要直接将文件放到 usr 和 opt 下，因为这样将很难维护该软件。可以直接将整个解压出来的目录放到/opt 目录下，如/opt/utools。</p><p>将.desktop 文件修改后，放到<code>~/.local/share/applications</code>目录或者<code>/usr/share/applications</code>目录下。一般<code>/usr/share/applications</code>目录必是存放.desktop 文件的目录，前者可能因为系统或设置不同而不同。注意必须把文件修改好之后再放入。如果先放再修改，可能修改会无效，这可能是桌面环境设置造成的问题。</p><p>至此，该软件安装已经完成。</p><p>整个步骤中最关键的一步是运行可执行文件时可以运行起来，如果不能，就需要手动补全依赖或者排查其他问题。</p><p>此外，一些系统上有一些包转换工具，如 arch，可以使用特定的软件将 deb 包等转化为 arch 的安装包。如果存在该类软件（gentoo 系统由于发行源代码，可以说不存在安装包，所以也不会有这种工具），尽量采用这种方式。如果想要或者更好的维护体验，可以自己写个 ebuild。</p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debug Msp430g2 Project on Linux</title>
      <link href="2021/03/23/debug-msp430g2-project-on-linux/"/>
      <url>2021/03/23/debug-msp430g2-project-on-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="在-linux-上-对-MSP430G2-系列工程进行调试"><a href="#在-linux-上-对-MSP430G2-系列工程进行调试" class="headerlink" title="在 linux 上 对 MSP430G2 系列工程进行调试"></a>在 linux 上 对 MSP430G2 系列工程进行调试</h1><p>Warning : 此方案体验太差，笔者已经弃坑了，有兴趣的可以继续折腾，等待社区推出更好的 gcc。</p><p>本文介绍如何在 linux 系统上对 MSP430 程序进行 debug。包括程序的编译、下载、运行、调试以及 vim 编辑器自动补全设置。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>在本方案中，需要用到的主要工具包括 TI 官方提供的 IDE——CCS，mspdebug，msp430-elf-gdb，vim/neovim。</p><p>注意，CCS 的 linux 版本不支持连接 MSP430G2 系列的开发板，否则就没那么多麻烦了。在本方案中，该 IDE 只作为编译工具使用。</p><p>TI 官方提供的 msp430-gcc 虽然可以编译程序，但是缺少部分头文件。下面将介绍配置 GCC 的相关内容，但不建议作为编译工具使用。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>安装 CCS、mspdebug。很简单，过程略。</p><p>关于 CCS 的使用，由于只需要用来做编译器，更好的选择是使用命令行操作，避免开启图形界面，具体上网搜即可。</p><p>msp430-elf-gdb 可以从 TI 官方提供的 msp430-gcc 编译工具链中获得，也可以自己编译。自己编译的过程如下。</p><p>在 GNU 官网下载最版本 gdb。解压，进入目录。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># target是架构，不需要修改# prefix将决定最终安装gdb的位置，可以自行修改.&#x2F;configure --prefix&#x3D;&quot;$&#123;PREFIX&#125;&quot; --target&#x3D;msp430-elfmakesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要拆卸 gdb，需要进入编译好后的目录中所有的子目录，执行<code>sudo make uninstall</code>。</p><p>编辑器可以自由选择，本文介绍时使用 neovim。</p><h3 id="msp430-gcc"><a href="#msp430-gcc" class="headerlink" title="msp430-gcc"></a>msp430-gcc</h3><p>如果想要尝试 gcc，可以参考以下步骤。</p><p>首先，在 TI 官网下载 msp430-gcc 及其 support-files。gcc 下载压缩包即可，不需要下载安装工具。</p><p>解压两个下载包。将 support-files 中所有的.h 与.ld 文件复制到 gcc 的 msp430-elf/include 目录以及 msp430-elf/lib 目录下。这里如果想少一点麻烦就不要参考官方教程将文件放到 include/device，直接按前述操作完成即可。</p><p>至此，gcc 配置完毕，只是仍然缺少部分头文件。如<code>delay_cycles</code>函数未定义。</p><p>想要用 gcc 编译，可以进入 msp430gcc 目录，使用<code>./bin/msp430-elf-gcc -I ./msp430-elf/include -mmcu=msp430g2553 -c main.c</code>编译。注意，必须指定微处理器的具体型号，且不要指明 lib 路径（设定处理器型号后 gcc 会自动调用链接器，不需要指明，指明后有冲突，这是前面放置头文件操作引起的）。</p><p>这样可以成功得到可执行文件。</p><p>需要注意的是，如果不介意官网提供的 gcc 版本较低，尽量使用官网的版本。自己编译的 gcc 缺少头文件等问题的情况只会更严重。如 gentoo crossdev 中编译而成的 msp430-elf-gcc，进行上述操作添加头文件后，虽然可以编译程序，但实际上是错误编译，这些可执行文件不可实际运行。这种情况下还需要做更多的处理。</p><h3 id="编辑器自动补全与语法检查"><a href="#编辑器自动补全与语法检查" class="headerlink" title="编辑器自动补全与语法检查"></a>编辑器自动补全与语法检查</h3><p>neovim 可以使用 coc.nvim，并安装 coc-clangd 插件。对于其他编辑器而言，也可以使用类似的 lsp。通用的一点是<code>compile_commands.json</code>文件，这决定了 lsp 补全与检查的依据。该文件可以使用工具从 makefile 或 CMakeList.txt 生成。</p><p>什么都不会也没有关系，直接写就行，只需要七行即可。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token property">"directory"</span><span class="token operator">:</span> <span class="token string">"工作目录路径"</span><span class="token punctuation">,</span>    <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"编译指令，可以借用一下ccs内置的gcc，把头文件和微处理器型号写入，可参考上面的gcc编译命令"</span><span class="token punctuation">,</span>    <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"需要编译的文件，如./main.c"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其置于工程目录下即可。</p><p>建议将 ccs 安装目录中所有头文件复制到一个目录下，使用<code>-I</code>指定该目录即可。对于部分缺少的定义，可以自行在该目录下的头文件中添加，这样也不影响 ccs 编译程序。这里关于缺少的定义稍微解释一下。举个常见的例子，如<code>__intertupt</code>。如果你使用它，lsp 会报未定义错误，但是在 ccs 编译器中不会发生，且可以成功编译。查找所有的头文件，确实没有定义。这个时候就可以手动加上，骗过 lsp。如调用了”msp430g2553.h”，则在该头文件末尾加上<code>define __intertupt</code>。</p><h2 id="程序烧录与运行"><a href="#程序烧录与运行" class="headerlink" title="程序烧录与运行"></a>程序烧录与运行</h2><p>得到可执行文件后，使用 mspdebug 工具进行烧录。</p><pre class="line-numbers language-none"><code class="language-none">sudo mspdebug rf2500# 进入mspdebug界面load your_file# 或者prog your_file# 运行程序run# 擦除程序erase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h2><pre class="line-numbers language-none"><code class="language-none">sudo mspdebug rf2500gdb# 在另一个终端窗口启动gdb，具体命令看自己的gdb名称msp430-elf-gdb# 进入gdb界面# 监听上面mspdebug提供的调试端口target remote localhost:2000# moniter后加的命令相当于mspdebug下执行的命令moniter prog your_filefile your_file# 使用continue运行程序，不可使用runc# 其他调试自我发挥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用 gdb 打断点，单步调试等等。但是无法查看变量值，更无法查看寄存器的值。对于调试而言，基本上是个废的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Embedded </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSP430G2 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build aarch64 Cross Toolchain on Gentoo with Crossdev</title>
      <link href="2021/03/23/build-aarch64-cross-toolchain-on-gentoo-with-crossdev/"/>
      <url>2021/03/23/build-aarch64-cross-toolchain-on-gentoo-with-crossdev/</url>
      
        <content type="html"><![CDATA[<h1 id="gentoo-使用-crossdev-建立-aarch64-交叉编译链"><a href="#gentoo-使用-crossdev-建立-aarch64-交叉编译链" class="headerlink" title="gentoo 使用 crossdev 建立 aarch64 交叉编译链"></a>gentoo 使用 crossdev 建立 aarch64 交叉编译链</h1><p>crossdev 和 aarch64 交叉编译链的安装指令很简单，网上随处可搜到。这里主要指出其中的一个 bug。即在编译 aarch64-linux-gnu glibc 时出现<code>no such instruction</code>的 bug。该错误的意思主要是缺少汇编指令。但是并不是 binutils 的问题，而是编译 glibc 时自动选择的编译器为 gcc（应该是遵照了<code>/etc/portage/make.conf</code>中的设置，没有自动换过来），而 gcc 在系统上指的是 x86_64 的 gcc。查看是否是该原因引起的错误，看日志文件中<code>CC</code>选项。修复该错误只需要在 crossdev 命令前加上<code>CC=aarch64-unknown-linux-gnu-gcc</code>。然后在编译<code>cross-aarch64-unknown-linux-gnu-gcc-stage2</code>时，再用回 x86_64 的 gcc。</p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Develop Stm32 Project with Rust</title>
      <link href="2021/03/23/develop-stm32-project-with-rust/"/>
      <url>2021/03/23/develop-stm32-project-with-rust/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-rust-开发-stm32"><a href="#使用-rust-开发-stm32" class="headerlink" title="使用 rust 开发 stm32"></a>使用 rust 开发 stm32</h1><p>本文介绍如何用 rust 语言开发 stm32。开发平台为 linux（gentoo）。</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><p>本文使用的芯片为 STM32F103C8T6。该芯片性价比较高，价格低廉，适合入门学习。需要注意的是该款芯片为国产仿品，在烧录的时候需要对软件进行一定修改。</p><p>仿真器选用 STLINK V2。也可以选择 jlink。后者连接似乎更加稳定，不过使用外设时需要更加小心。</p><p>连接时只需要按板子上的标注把相同的引脚连起来即可。</p><p>此外需要至少四根母对母杜邦线。</p><h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><h3 id="安装-rust"><a href="#安装-rust" class="headerlink" title="安装 rust"></a>安装 rust</h3><p>步骤极为简单，建议选用 beta 或者 nightly 版本工具链。</p><p>添加对相应架构的支持。</p><pre class="line-numbers language-none"><code class="language-none">rustup target add thumbv6m-none-eabi thumbv7m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="openocd"><a href="#openocd" class="headerlink" title="openocd"></a>openocd</h3><p>用于驱动仿真器。直接搜索如何安装即可。</p><p>对以上芯片，需要进行如下修改。</p><p>找到 openocd 的安装目录，将<code>/scripts/target/stm32f1x.cfg</code>中的<code>set _CPUTAPID 0x1ba01477</code>修改为<code>set _CPUTAPID 0x2ba01477</code>。</p><h3 id="arm-none-eabi-工具链"><a href="#arm-none-eabi-工具链" class="headerlink" title="arm-none-eabi 工具链"></a>arm-none-eabi 工具链</h3><p>对 gentoo 而言，直接使用 crossdev 进行配置即可。其中 gdb 建议下载源码编译。其他 linux 版本需要搜索如何安装。</p><p>gdb 编译步骤如下。</p><pre class="line-numbers language-none"><code class="language-none"># 进入源码目录.&#x2F;configure --prefix&#x3D;&quot;$&#123;PREFIX&#125;&quot; --target&#x3D;arm-none-eabimakesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果要拆卸，<code>cd</code>进入编译后的各个目录，执行<code>sudo make uninstall</code>即可。</p><p>crossdev 安装 arm-none-eabi 工具链步骤如下。</p><pre class="line-numbers language-none"><code class="language-none"># 首先安装crossdev# 编辑&#x2F;etc&#x2F;portage&#x2F;make.conf，写入PORTDIR_OVERLAY&#x3D;&quot;$&#123;PORTDIR_OVERLAY&#125; &#x2F;usr&#x2F;local&#x2F;portage&quot;# 编译安装工具链sudo crossdev -s4 -t arm-none-eabi# 如果软件编译失败，查看原因为masked by: corruption，则# 编辑&#x2F;var&#x2F;db&#x2F;repos&#x2F;localrepo-crossdev&#x2F;metadata&#x2F;layout.conf，写入masters &#x3D; gentoothin-manifests &#x3D; true# 编辑&#x2F;etc&#x2F;portage&#x2F;repos.conf&#x2F;crossdev.conf，写入[crossdev]location &#x3D; &#x2F;var&#x2F;db&#x2F;repos&#x2F;localrepo-crossdevpriority &#x3D; 10masters &#x3D; gentooauto-sync &#x3D; no# 编译时需要使用gcc作为编译器，编译newlib时，需要把&#x2F;etc&#x2F;portage&#x2F;make.conf中# COMMON_FLAGS&#x3D;&quot;-march&#x3D;native -O2 -pipe&quot;注释掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stlink"><a href="#stlink" class="headerlink" title="stlink"></a>stlink</h3><p>stlink 是仿真器的驱动，在连接中可能需要。</p><h3 id="gdbgui（可选）"><a href="#gdbgui（可选）" class="headerlink" title="gdbgui（可选）"></a>gdbgui（可选）</h3><p>gdb gui 程序，便于调试。</p><h2 id="blink"><a href="#blink" class="headerlink" title="blink"></a>blink</h2><p>新建项目<code>cargo new rusty-blink</code>。</p><p><code>Cargo.toml</code>如下</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"rusty-blink"</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.1.0"</span><span class="token key property">authors</span> <span class="token punctuation">=</span><span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">"2018"</span><span class="token comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><span class="token punctuation">[</span><span class="token table class-name">profile.release</span><span class="token punctuation">]</span><span class="token key property">opt-level</span> <span class="token punctuation">=</span> <span class="token string">'z'</span> <span class="token comment"># turn on maximum optimizations. We only have 64kB</span><span class="token key property">lto</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>      <span class="token comment"># Link-time-optimizations for further size reduction</span><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">cortex-m</span> <span class="token punctuation">=</span> <span class="token string">"^0.6.3"</span>      <span class="token comment"># Access to the generic ARM peripherals</span><span class="token key property">cortex-m-rt</span> <span class="token punctuation">=</span> <span class="token string">"^0.6.12"</span>  <span class="token comment"># Startup code for the ARM Core</span><span class="token key property">embedded-hal</span> <span class="token punctuation">=</span> <span class="token string">"^0.2.4"</span>  <span class="token comment"># Access to generic embedded functions (`set_high`)</span><span class="token key property">panic-halt</span> <span class="token punctuation">=</span> <span class="token string">"^0.2.0"</span>    <span class="token comment"># Panic handler</span><span class="token comment"># Access to the stm32f103 HAL.</span><span class="token punctuation">[</span><span class="token table class-name">dependencies.stm32f1xx-hal</span><span class="token punctuation">]</span><span class="token comment"># Bluepill contains a 64kB flash variant which is called "medium density"</span><span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"stm32f103"</span><span class="token punctuation">,</span> <span class="token string">"rt"</span><span class="token punctuation">,</span> <span class="token string">"medium"</span><span class="token punctuation">]</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"^0.6.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目根目录下新建项目配置<code>mkdir .cargo</code>。其中由于使用 lld 进行链接后会丢失调试信息，因此将 linker 指定为 gcc。runner 是执行<code>cargo run</code>之后自动执行的命令，此处为自动开启 gdb 并加载文件。</p><pre class="line-numbers language-none"><code class="language-none"># .cargo&#x2F;config[build]target &#x3D; &quot;thumbv7m-none-eabi&quot;[target.&#39;cfg(all(target_arch &#x3D; &quot;arm&quot;, target_os &#x3D; &quot;none&quot;))&#39;]runner &#x3D; &#39;gdbgui -g arm-none-eabi-gdb&#39;[target.thumbv7m-none-eabi]rustflags &#x3D; [&quot;-C&quot;, &quot;linker&#x3D;arm-none-eabi-gcc&quot;,&quot;-C&quot;, &quot;link-arg&#x3D;-Wl,-Tlink.x&quot;,&quot;-C&quot;, &quot;link-arg&#x3D;-nostartfiles&quot;,]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>在项目根目录下新建<code>memory.x</code>。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* memory.x - Linker script for the STM32F103C8T6 *&#x2F;MEMORY&#123;  &#x2F;* Flash memory begins at 0x80000000 and has a size of 64kB*&#x2F;  FLASH : ORIGIN &#x3D; 0x08000000, LENGTH &#x3D; 64K  &#x2F;* RAM begins at 0x20000000 and has a size of 20kB*&#x2F;  RAM : ORIGIN &#x3D; 0x20000000, LENGTH &#x3D; 20K&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般网上售卖的该款芯片应当是 64K 和 20K，如果有偏差需要按实际情况填写。</p><p>在 src 下新建<code>main.rs</code>。该程序仅用于测试，效果为绿灯闪烁。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// src/main.rs</span><span class="token attribute attr-name">#![no_std]</span><span class="token attribute attr-name">#![no_main]</span><span class="token keyword">use</span> <span class="token namespace">cortex_m_rt<span class="token punctuation">::</span></span>entry<span class="token punctuation">;</span> <span class="token comment">// The runtime</span><span class="token keyword">use</span> <span class="token namespace">embedded_hal<span class="token punctuation">::</span>digital<span class="token punctuation">::</span>v2<span class="token punctuation">::</span></span><span class="token class-name">OutputPin</span><span class="token punctuation">;</span> <span class="token comment">// the `set_high/low`function</span><span class="token keyword">use</span> <span class="token namespace">stm32f1xx_hal<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">delay<span class="token punctuation">::</span></span><span class="token class-name">Delay</span><span class="token punctuation">,</span> pac<span class="token punctuation">,</span> <span class="token namespace">prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// STM32F1 specific functions</span><span class="token attribute attr-name">#[allow(unused_imports)]</span><span class="token keyword">use</span> panic_halt<span class="token punctuation">;</span> <span class="token comment">// When a panic occurs, stop the microcontroller</span><span class="token attribute attr-name">#[entry]</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">!</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token namespace">pac<span class="token punctuation">::</span></span><span class="token class-name">Peripherals</span><span class="token punctuation">::</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cp <span class="token operator">=</span> <span class="token namespace">cortex_m<span class="token punctuation">::</span></span><span class="token class-name">Peripherals</span><span class="token punctuation">::</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rcc <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token constant">RCC</span><span class="token punctuation">.</span><span class="token function">constrain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> gpioc <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token constant">GPIOC</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> rcc<span class="token punctuation">.</span>apb2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> led <span class="token operator">=</span> gpioc<span class="token punctuation">.</span>pc13<span class="token punctuation">.</span><span class="token function">into_push_pull_output</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> gpioc<span class="token punctuation">.</span>crh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> flash <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token constant">FLASH</span><span class="token punctuation">.</span><span class="token function">constrain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> clocks <span class="token operator">=</span> rcc<span class="token punctuation">.</span>cfgr<span class="token punctuation">.</span><span class="token function">sysclk</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token function">mhz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> flash<span class="token punctuation">.</span>acr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> delay <span class="token operator">=</span> <span class="token class-name">Delay</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token constant">SYST</span><span class="token punctuation">,</span> clocks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        led<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delay<span class="token punctuation">.</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1_000_u16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delay<span class="token punctuation">.</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1_000_u16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="烧录与调试"><a href="#烧录与调试" class="headerlink" title="烧录与调试"></a>烧录与调试</h3><pre class="line-numbers language-none"><code class="language-none"># 连接仿真器openocd -f interface&#x2F;stlink-v2.cfg -f target&#x2F;stm32f1x.cfg# 如果仿真器选用jlink，则命令为openocd -f interface&#x2F;jlink.cfg -f target&#x2F;stm32f1x.cfg# 出现以下信息为连接成功Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints# 编译并开启gdbcargo run# 在gdb窗口执行以下命令target remote :3333moniter reset haltloadcontinue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时如果程序持续执行，应当可以在板子上看到绿灯闪烁。如果停在断点处，就再 continue。</p><p>更进一步可以直接在 gdb 开启时自动执行以上命令。</p><p>将<code>runner</code>改为<code>runner = &#39;arm-none-eabi-gdb -q -x debug.gdb&#39;</code>。在项目根目录下新建<code>debug.gdb</code>，写入以下内容。</p><pre class="line-numbers language-none"><code class="language-none">target remote :3333set backtrace limit 32monitor reset haltload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> Embedded </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Oracle Jdk and Jre on Gentoo</title>
      <link href="2021/03/23/install-oracle-jdk-and-jre-on-gentoo/"/>
      <url>2021/03/23/install-oracle-jdk-and-jre-on-gentoo/</url>
      
        <content type="html"><![CDATA[<h1 id="Gentoo系统安装Oracle-jdk和jre"><a href="#Gentoo系统安装Oracle-jdk和jre" class="headerlink" title="Gentoo系统安装Oracle jdk和jre"></a>Gentoo系统安装Oracle jdk和jre</h1><h2 id="why-not-openjdk"><a href="#why-not-openjdk" class="headerlink" title="why not openjdk"></a>why not openjdk</h2><p>openjdk 在部分情况下无法完全替代闭源版本。尤其是在需要完整 javafx 的情况下。</p><p>gentoo 提供了具有 javafx USE flag 的 openjdk。不过笔者未能成功开启，应该是与主 profile 冲突。另外也有提供 openjfx，不过该 javafx 属于阉割版，比如没有对 webkit 的支持。</p><h2 id="通过包管理器安装"><a href="#通过包管理器安装" class="headerlink" title="通过包管理器安装"></a>通过包管理器安装</h2><p>gentoo overlay 中有 oracle-jdk-bin 的 ebuild，希望通过包管理系统安装的可以使用。但是由于 oracle 禁止从链接直接获取二进制包。必须手动下载合适版本，放入指定位置后才可编译。</p><p>该方案有几个缺点。一是 overlay 上没有提供最新版本。二是由于指定位置实际上是个临时文件夹，也就是说每次 emerge 都会改变位置。然而等你获取提示中的位置信息时，再将下载的文件放入已经无效。笔者未曾遇到过这种问题，偷懒放弃解决。实在解决不了的可以把人家的 ebuild copy 到自己的 overlay 中，改链接到你上传下载的 jdk、jre 的地址也行。</p><h2 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h2><p>从 oracle <a href="https://www.oracle.com/java/technologies/javase-downloads.html">官网</a> 下载 jdk。以 oracle-jdk8u271 为例。</p><ol><li>解压。</li><li>将其移动到合适位置并赋予权限。</li></ol><pre class="line-numbers language-none"><code class="language-none">tar xvzf XXXsudo chown -R 777 XXXmv XXX XXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>XXX</code>部分自行填写。</p><ol start="3"><li>配置 java 信息。</li></ol><p>编辑<code>/usr/share/java-config-2/vm/oracle-jdk8u271</code>。写入</p><pre class="line-numbers language-none"><code class="language-none">VERSION&#x3D;&quot;Oracle-Sun JDK 8u271&quot;JAVA_HOME&#x3D;&quot;&#x2F;opt&#x2F;jdk1.8.0_271&quot;JDK_HOME&#x3D;&quot;&#x2F;opt&#x2F;jdk1.8.0_271&quot;JAVAC&#x3D;&quot;$&#123;JAVA_HOME&#125;&#x2F;bin&#x2F;javac&quot;PATH&#x3D;&quot;$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;bin&quot;ROOTPATH&#x3D;&quot;$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;bin&quot;LDPATH&#x3D;&quot;$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;amd64&#x2F;:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;amd64&#x2F;native_threads&#x2F;:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;amd64&#x2F;xawt&#x2F;:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;amd64&#x2F;server&#x2F;&quot;MANPATH&#x3D;&quot;&#x2F;opt&#x2F;icedtea-bin-8.2.2.1&#x2F;man&quot;PROVIDES_TYPE&#x3D;&quot;JDK JRE&quot;PROVIDES_VERSION&#x3D;&quot;1.8&quot;# Taken from sun.boot.class.path propertyBOOTCLASSPATH&#x3D;&quot;$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;resources.jar:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;jsse.jar:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;jce.jar:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;charsets.jar&quot;GENERATION&#x3D;&quot;2&quot;ENV_VARS&#x3D;&quot;JAVA_HOME JDK_HOME JAVAC PATH ROOTPATH LDPATH MANPATH&quot;VMHANDLE&#x3D;&quot;oracle-jdk8&quot;BUILD_ONLY&#x3D;&quot;FALSE&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意修改版本号。</p><ol start="4"><li>将 jdk 文件夹软链接到<code>/usr/lib/jvm</code>。</li></ol><p>如<code>ln -s /opt/jdk1.8.0_271/ /usr/lib/jvm/oracle-jdk8u271</code>。</p><ol start="5"><li>设置 java 版本。</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 查看当前可用的java虚拟机。eselect java-vm list&#x2F;&#x2F; 设置虚拟机，不可使用sudo。eselect java-vm set user number&#x2F;&#x2F; 或者eselect java-vm set system number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他 linux 版本可以通过<code>java-config -L</code>查看，<code>java-config set number</code>设置。（该操作对 gentoo 无效）</p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
            <tag> Java </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Fuzzy Search Plugin</title>
      <link href="2021/03/23/vim-fuzzy-search-plugin/"/>
      <url>2021/03/23/vim-fuzzy-search-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-模糊搜索"><a href="#vim-模糊搜索" class="headerlink" title="vim 模糊搜索"></a>vim 模糊搜索</h1><p>本文主要介绍 vim 高性能模糊查找插件 vim-clap。另外也推荐尝试 coc.nvim 自带的 coc list。</p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><p>模糊查找的内容包括编辑文件历史、文件内容、mark、tags、vim 主题、buffers、windows、quickfix 等等。</p><p>这些功能在一些 IDE 与 vscode 等编辑器中有直接的集成。而在 vim 中，需要自己扩展。</p><p>vim-clap 的效果图可以查看其<a href="https://github.com/liuchengxu/vim-clap">github 主页</a>。</p><h2 id="vim-clap"><a href="#vim-clap" class="headerlink" title="vim-clap"></a>vim-clap</h2><p>vim-clap 是一款后端用 rust 语言开发的模糊查找插件，因此速度非常快。</p><h3 id="vim-clap-安装"><a href="#vim-clap-安装" class="headerlink" title="vim-clap 安装"></a>vim-clap 安装</h3><p>首先，最好先配置好 rust 语言环境（不配应该也可以）。使用 rustup 安装 rust 语言编译链及配套工具。这一部分可以参考 rust 官方文档，此处不做介绍。提示一下，官方给的安装 rustup 的链接并没有被墙，无需翻墙。</p><p>安装好之后，如果嫌速度慢，可以换上中科大的源。网上教程很多，此处不再介绍。</p><p>如果你已经完成了上述所有步骤，则可以按照文档给出的 vim-plug 配置安装插件。如果你没有完成上述步骤，使用<code>Plug &#39;liuchengxu/vim-clap&#39;, &#123; &#39;do&#39;: &#123; -&gt; clap#installer#force_download() &#125; &#125;</code>来安装你的插件。vim-plug 将在下载好插件之后继续编译或者下载其 rust 依赖。</p><h3 id="vim-clap-配置"><a href="#vim-clap-配置" class="headerlink" title="vim-clap 配置"></a>vim-clap 配置</h3><p>该插件的默认配置已经很完善，你完全可以直接使用。</p><p>该插件的默认快捷键在官方文档中有介绍。其命令也很简单，只需要<code>:Clap xxx</code>，<code>xxx</code>表示你想要搜索的内容。可选的内容在文档中也已经列出。</p><p>最后给出笔者的快捷键配置方案，仅供参考。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" vim-clap</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>op  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>ob  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap <span class="token keyword">buffers</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>oc  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap command<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>oh  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap <span class="token keyword">history</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>of  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap <span class="token keyword">files</span> <span class="token operator">+</span><span class="token operator">+</span>finder<span class="token operator">=</span>rg <span class="token operator">-</span><span class="token operator">-</span>ignore <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">hidden</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">files</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>oq  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap quickfix<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>oj  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap <span class="token keyword">jumps</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>om  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap <span class="token keyword">marks</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>ow  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap windows<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>ot  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap <span class="token keyword">tags</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>os  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap colors<span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>og <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Clap grep2<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">o</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+clap'</span><span class="token punctuation">,</span>\ <span class="token string">'p'</span> <span class="token punctuation">:</span> <span class="token string">'clap'</span><span class="token punctuation">,</span>\ <span class="token string">'b'</span> <span class="token punctuation">:</span> <span class="token string">'buffers'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'command'</span><span class="token punctuation">,</span>\ <span class="token string">'h'</span> <span class="token punctuation">:</span> <span class="token string">'file history'</span><span class="token punctuation">,</span>\ <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'search file'</span><span class="token punctuation">,</span>\ <span class="token string">'q'</span> <span class="token punctuation">:</span> <span class="token string">'quickfix list'</span><span class="token punctuation">,</span>\ <span class="token string">'j'</span> <span class="token punctuation">:</span> <span class="token string">'jumps'</span><span class="token punctuation">,</span>\ <span class="token string">'m'</span> <span class="token punctuation">:</span> <span class="token string">'marks'</span><span class="token punctuation">,</span>\ <span class="token string">'w'</span> <span class="token punctuation">:</span> <span class="token string">'windows'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'tags'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'colors'</span><span class="token punctuation">,</span>\ <span class="token string">'g'</span> <span class="token punctuation">:</span> <span class="token string">'find word'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="coc-list"><a href="#coc-list" class="headerlink" title="coc list"></a>coc list</h2><p>coc list 是 coc.nvim 自带的模糊查找功能模块。它不仅可以用于控制补全源、lsp 等的开关，coc 插件的调用，也具有部分模糊查找的功能，不过功能暂时还没有那么强大，并不支持那么多内容的查找。有兴趣的可以自行研究。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Clipboard History Plugin</title>
      <link href="2021/03/23/vim-clipboard-history-plugin/"/>
      <url>2021/03/23/vim-clipboard-history-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="vim剪贴板历史记录插件"><a href="#vim剪贴板历史记录插件" class="headerlink" title="vim剪贴板历史记录插件"></a>vim剪贴板历史记录插件</h1><p>本文介绍 vim 剪贴板历史管理插件。</p><h2 id="剪贴板历史"><a href="#剪贴板历史" class="headerlink" title="剪贴板历史"></a>剪贴板历史</h2><p>vimer 们在疯狂码字的过程中常会被一个问题打断操作。那就是多次复制与粘贴的冲突。vim 的默认规则是，粘贴的必是最后一次复制的内容。如此，当遇到像要交换两个内容时，就会遇到无法同时复制再粘贴的情况。随着 vim 提供了非常多寄存器，但是，一来，使用寄存器需要多按键，二来，时间一长，你就很难记得那个寄存器里放了什么，又需要手动查看。</p><p>如果有了剪贴板历史插件，一切问题就都将迎刃而解。</p><h2 id="插件选择"><a href="#插件选择" class="headerlink" title="插件选择"></a>插件选择</h2><p>可以选择 YankRing。这算是一个比较古老的插件，很多年没有更新了，但是功能很完善，也十分稳定。只是该插件有部分命令是直接绑死快捷键的，如<code>&lt;C-n&gt;</code>，这意味着你不能再为该键位绑定其他命令。</p><p>如果你介意这一点，且使用<code>coc.nvim</code>插件，可以采用<code>coc-yank</code>插件。该 coc 插件提供了相同的功能。此外，该插件还可以设置复制区域高亮，即高亮显示你的复制内容。插件的配置非常简单，此处不再赘述，仅给出简单的示例。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" coc-yank</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">p</span>  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList <span class="token operator">-</span>A <span class="token operator">-</span><span class="token operator">-</span>normal <span class="token keyword">yank</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Markdown Preview Plugin</title>
      <link href="2021/03/23/vim-markdown-preview-plugin/"/>
      <url>2021/03/23/vim-markdown-preview-plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-markdown预览插件"><a href="#vim-markdown预览插件" class="headerlink" title="vim markdown预览插件"></a>vim markdown预览插件</h1><p>本文主要介绍 markdown 预览插件 vim-markdown-composer 以及 markdown-preview.nvim。</p><h2 id="markdown-预览"><a href="#markdown-预览" class="headerlink" title="markdown 预览"></a>markdown 预览</h2><p>vim 没有内置 markdown 预览功能，也没有办法直接在终端预览。现有的 vim markdown 预览插件多是通过浏览器等第三方软件预览由插件渲染好的 markdown 文件。</p><p>在笔者的体验中 vim-markdown-composer 以及 markdown-preview.nvim 可以算是其中最好的两款预览插件。</p><h2 id="markdown-preview-nvim"><a href="#markdown-preview-nvim" class="headerlink" title="markdown-preview.nvim"></a>markdown-preview.nvim</h2><p>参考其<a href="https://github.com/iamcco/markdown-preview.nvim">github 主页</a>的安装配置信息，很容易搞定。</p><p>该插件的优点很明显。它支持很多内嵌语言的渲染，单文件渲染体验极佳。</p><p>这里主要强调一些问题（仅针对本文写成时存在的问题）。</p><ul><li>目前尚未提供流畅的多文件预览功能。可以通过设置打开文件时预览自动开启和关闭文件时预览自动关闭勉强实现该功能。</li></ul><blockquote><p>这里的多文件指的是当在多个 buffer 切换的时候，可以自动切换预览画面。</p></blockquote><ul><li><p>判定文件开关的机制有点问题。主要表现在一旦使用自动开启和关闭预览。你在 vim 中使用的所有浮动窗口、侧边栏都会被判定为不同形式的文件关闭（经笔者试验，大概浮动窗口不会检测到文件关闭，但退出时会认为文件又一次打开，侧边栏会）。当退出这些窗口时，会再次自动渲染。这将使你的浏览器（或标签页）不断工作在开关状态，耗费资源还容易卡住，严重打击使用体验感。</p></li><li><p>无法重新载入资源。举个例子。当你打开预览之后，新截一张图，在文件中调用，预览将无法显示该图片，需要重启预览。</p></li></ul><p>如果你无法忍受这些问题，可以使用下一个插件。</p><h2 id="vim-markdown-composer"><a href="#vim-markdown-composer" class="headerlink" title="vim-markdown-composer"></a>vim-markdown-composer</h2><p>该插件需要 rust 语言环境支持。关于如何配置 rust 环境，由于步骤非常简单，提倡自行解决。</p><p>参考其<a href="https://github.com/euclio/vim-markdown-composer">github 主页</a>的配置，使用 vim-plug 的用户可以使用以下配置安装。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">BuildComposer</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>  <span class="token keyword">if</span> a<span class="token punctuation">:</span>info<span class="token operator">.</span>status <span class="token operator">!=</span> <span class="token string">'unchanged'</span> <span class="token operator">||</span> a<span class="token punctuation">:</span>info<span class="token operator">.</span>force    <span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'nvim'</span><span class="token punctuation">)</span>      <span class="token operator">!</span>cargo build <span class="token operator">-</span><span class="token operator">-</span>release <span class="token operator">-</span><span class="token operator">-</span>locked    <span class="token keyword">else</span>      <span class="token operator">!</span>cargo build <span class="token operator">-</span><span class="token operator">-</span>release <span class="token operator">-</span><span class="token operator">-</span>locked <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>default<span class="token operator">-</span>features <span class="token operator">-</span><span class="token operator">-</span>features json<span class="token operator">-</span>rpc    <span class="token keyword">endif</span>  <span class="token keyword">endif</span><span class="token keyword">endfunction</span>Plug <span class="token string">'euclio/vim-markdown-composer'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'do'</span><span class="token punctuation">:</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token string">'BuildComposer'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装后使用<code>:help markdown-composer</code>可以查看其文档。主要有几个配置参数，以及插件命令。这里给出插件提供的命令。</p><pre class="line-numbers language-none"><code class="language-none">:ComposerStart              Start the preview server.:ComposerUpdate             Send the current buffer to the preview server.:ComposerOpen               Opens a new browser window containing the markdown preview.:ComposerJob                Echoes the channel that the plugin is listening on.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以自行配置快捷键。这里给出我的配置。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" markdown-composer</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>markdown_composer_external_renderer<span class="token operator">=</span><span class="token string">'pandoc -f markdown -t html'</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>markdown_composer_autostart <span class="token operator">=</span> <span class="token number">0</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>leader<span class="token operator">></span>ms <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>ComposerStart<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>leader<span class="token operator">></span>mu <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>ComposerUpdate<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>leader<span class="token operator">></span>mo <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>ComposerOpen<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>leader<span class="token operator">></span>mj <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>ComposerJob<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map2<span class="token operator">.</span><span class="token keyword">m</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      \ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+markdown_preview'</span><span class="token punctuation">,</span>      \ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'start'</span><span class="token punctuation">,</span>      \ <span class="token string">'u'</span> <span class="token punctuation">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span>      \ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'open another tab'</span><span class="token punctuation">,</span>      \ <span class="token string">'j'</span> <span class="token punctuation">:</span> <span class="token string">'echoes the channel that the plugin is listening on'</span>      \<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该插件多文件切换预览效果非常好。但是注意，该插件本身没有内置 latex 语言的渲染功能，其他语言就更不用说了。所以要想或者最佳体验，还需要使用外部渲染器。即上面给出配置中的第一行，使用 pandoc 渲染 markdown 文件。因此还必须安装 pandoc 软件，并确定可以在全局调用 pandoc 命令。</p><p>另有一个注意事项。假设有目录 X，内有二级目录 A 和 B。A 中存放 markdown 文件，B 中存放图片。如果在 A 目录内打开 markdown 文件，则还是会出现上一个插件新图片无法载入的问题（如果调用时使用绝对路径可能不会出现该问题）。如果在 X 目录下打开 A 中的 markdown 文件，则不会有上述问题。其他位置打开，应该都有该问题。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Vim as the Editor of Systemverilog</title>
      <link href="2021/03/23/use-vim-as-the-editor-of-systemverilog/"/>
      <url>2021/03/23/use-vim-as-the-editor-of-systemverilog/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-vim-作为-systemverilog-编辑器"><a href="#使用-vim-作为-systemverilog-编辑器" class="headerlink" title="使用 vim 作为 systemverilog 编辑器"></a>使用 vim 作为 systemverilog 编辑器</h1><p>本文介绍如何使用 vim 搭建 systemverilog 编辑环境。功能包括自动补全、语法高亮、语法检查、格式化等。</p><p>注意本文内容只是针对 systemverilog 提供最基本编辑体验。关于 vim 的其他功能配置，请见<a href="https://www.niuiic.top/categories/Vim/">vim 专栏</a>。</p><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p>最新版的 neovim 应该默认支持 systemverilog 语法高亮。如果你的 vim 不行的话可以尝试通过安装<code>vhda/verilog_systemverilog.vim</code>插件解决。</p><h2 id="自动补全与语法检查"><a href="#自动补全与语法检查" class="headerlink" title="自动补全与语法检查"></a>自动补全与语法检查</h2><p>自动补全功能使用 lsp。本文选用 svls 作为 systemverilog 的语言服务器。</p><p>svls 使用 rust 语言编写，需要 rust 语言环境，使用 rust 包管理器 cargo 安装。或者可以从 snap 商店下载。</p><p>选择一款管理调用 lsp 的 vim 插件。本文选用 coc.nvim。在 coc.nvim 的配置文件中添加以下内容。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"languageserver"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"svls"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"svls"</span><span class="token punctuation">,</span>        <span class="token property">"filetypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"systemverilog"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，<code>filetypes</code>不一定正确。可以新建一个.sv 文件，查看文件类型。比如，在 neovim5 的某一版本中，文件类型为<code>verilog_systemverilog</code>。</p><p>选用其他插件的可以在<a href="https://github.com/dalance/svls">svls github 主页</a>找到相应配置。</p><p>svls 的配置文件为<code>.svls.toml</code>，该文件放在项目的根目录。配置文件的编写方式非常简单。</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">verilog</span><span class="token punctuation">]</span><span class="token key property">include_paths</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"src/header"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token table class-name">option</span><span class="token punctuation">]</span><span class="token key property">linter</span> <span class="token punctuation">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将以上<code>include_paths</code>的值修改为要编写的.sv 文件所在目录即可。</p><p>关于语法检查功能，可以同时使用 ale 插件。该插件可以通过 iverilog 编译器提供错误信息，两者错误信息并不完全重合。</p><p>虽然在<code>svls</code>的演示视频中存在 snippets 的补全画面，但是经过试用发现这似乎是其他插件提供的。但是<code>vim-snippets</code>插件提供的 snippets 非常不全，因此下面介绍简单的自定义 snippets。</p><p>首先，需要<code>coc-snippets</code>插件，该插件依赖<code>coc.nvim</code>。安装好<code>coc.nvim</code>之后，只需要使用<code>:CocInstall coc-snippets</code>命令即可安装。具体设置可以参考其<a href="https://github.com/neoclide/coc-snippets">github 主页</a>。安装该插件后需要同步安装<code>honza/vim-snippets</code>来提供 snippets。<code>SirVer/ultisnips</code>需要拆卸掉，因为该插件会对自定义的 snippets 文件报错。</p><p>接下来，使用<code>:CocConfig</code>打开<code>coc.nvim</code>配置文件，设置自定义 snippets 文件路径。如<code>&quot;snippets.userSnippetsDirectory&quot;: &quot;/home/niuiic/.config/nvim/snippets&quot;</code>。（注意这是个 json 文件，最外层需要花括号）</p><p>然后就可以在该目录下自定义 snippets 文件，文件名称保持和文件类型相同即可。snippets 语法还是比较复杂的，下面给出一个简单例子，足以实现基本功能。更高级的功能请自行学习。（coc.nvim 提供的自动补全筛选能力已经足够强大，即使是简单的设置也可以带来极佳的体验。更复杂的设置个人觉得没有必要。）</p><p><code>systemverilog.snippets</code></p><pre class="line-numbers language-none"><code class="language-none"># nomal alwayssnippet alwalways @($&#123;0&#125;) beginend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>alw</code>是缩写，也就是当你打出 alw 时可以调用该 snippets。<code>$&#123;0&#125;</code>的作用比较复杂，最简单也是对新手来说最实用的作用就是当你添加这一项后，补全 snippets 之后光标会自动停留在这个位置。</p><p>如果再加一项，如下。</p><pre class="line-numbers language-none"><code class="language-none"># nomal alwayssnippet alwalways @($&#123;1&#125;) begin$&#123;0&#125;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时光标会停留在<code>$&#123;1&#125;</code>的位置。</p><p>按照上述例子继续补充自己想要的 snippets 即可。注意标准写法中应当是用<code>endsnippet</code>的，不过这插件似乎不需要这个，而且加上这一句之后反而会出现在补全内容中，因此还是不加为好。</p><p>除了 snippets，svls 能提供的自动补全功能感觉还是差点意思的。继续使用<code>coc.nvim</code>定义自动补全库。</p><p>新建目录<code>～/.config/nvim/autoload/coc/source</code>。在该目录下新建文件<code>systemverilog.vim</code>，文件名原则同上。</p><p>内容如下。</p><pre class="line-numbers language-none"><code class="language-none">function! coc#source#systemverilog#init() abort    return &#123;        \&#39;triggerCharacters&#39;: [&#39;&#39;],        \&#39;filetypes&#39; : [&#39;systemverilog&#39;],        \&#125;endfunctionfunction! coc#source#systemverilog#complete(opt, cb) abort    let items &#x3D; [&#39;reg&#39;, &#39;wire&#39;, &#39;forever&#39;, &#39;posedge&#39;, &#39;negedge&#39;, &#39;module&#39;, &#39;endmodule&#39;, &#39;initial&#39;, &#39;input&#39;, &#39;output&#39;, &#39;parameter&#39;, &#39;assign&#39;, &#39;integer&#39;]    call a:cb(items)endfunction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>items</code>中添加需要补全的关键词即可。注意这里的补全内容不能解析任何换行字符或转译字符，所以关键词放这里，语句放之前的 snippets。</p><p>至此，完成自动补全与语法检查功能的配置。</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>systemverilog 的格式化需要<a href="https://github.com/google/verible">verible</a>的支持。verible 为 google 为 systemverilog 开发的一套工具集，其中包含了格式化工具。</p><p>verible 提供了.deb 和.rpm 的二进制包，包管理系统兼容该两种打包方式的用户可以直接安装。</p><p>其他用户需要自行编译，从 github 上拉取源码后，在源码目录使用<code>bazel build -c opt //...</code>编译。注意需要支持 C++11 的 gcc 编译器（clang 暂时无法编译成功）。</p><p>编译完成后，使用<code>bazel run -c opt :install -- path</code>安装到指定位置。如果安装位置需要 root 权限，则使用<code>bazel run -c opt :install -- -s path</code>，务必注意不能使用 sudo。</p><p>在 vim 中调用格式化工具的插件选用 neoformat。该插件的安装过程不再赘述。调用格式化程序的配置方式在其文档中有详细说明，这里只给出一个例子。</p><p>环境：neovim、linux</p><p>创建<code>~/.local/share/nvim/site/autoload/neoformat/formatters</code>目录。编写<code>systemverilog.vim</code>，写入以下内容</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> neoformat#formatters#systemverilog#<span class="token function">enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'verible_format'</span><span class="token punctuation">]</span><span class="token keyword">endfunction</span><span class="token keyword">function</span><span class="token operator">!</span> neoformat#formatters#systemverilog#<span class="token function">verible_format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        \ <span class="token string">'exe'</span><span class="token punctuation">:</span> <span class="token string">'/opt/verible/verilog_format'</span><span class="token punctuation">,</span>        \ <span class="token punctuation">&#125;</span><span class="token keyword">endfunction</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意文件名称是 vim 中 systemverilog 的文件类型。如果不是<code>systemverilog</code>则需要替换文件名及文件中所有出现<code>systemverilog</code>的地方。<code>exe</code>需要可执行，即如果格式化程序所在目录不在<code>$PATH</code>中，需要填写其绝对路径。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上方案对比 vscode 以及各类 IDE，如 vivado 等，在编辑体验上可以算是完胜。</p><p>vscode 中虽然有基于 svls 的插件，以及语言格式化插件，但整体补全能力上比不上高度扩展的 vim。并且仅仅依靠 svls 的错误检查，并不能找出所有错误（语法错误，而非逻辑错误），但 vim 可以再叠加其他的检测，如 ale。</p><p>各类 IDE 虽然功能非常强大，甚至可能只需使用图形界面配置就能自动生成 systemverilog 文件，但是在编辑体验上远远比不上前两者。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
          <category> Embedded </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Debugging Scheme</title>
      <link href="2020/10/20/vim-debugging-scheme/"/>
      <url>2020/10/20/vim-debugging-scheme/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-调试方案"><a href="#vim-调试方案" class="headerlink" title="vim 调试方案"></a>vim 调试方案</h1><p>本文介绍在 vim 中使用 vimspector 插件扩展 IDE 式调试功能，获取极致体验。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li>为什么需要扩展调试功能？</li></ul><p>虽然传统上与 vim 更匹配的调试方案是在命令行中使用 gdb、lldb 等调试器，但这就不得不暂时离开 vim。虽然有诸如 tmux、内置 terminal 等工具可以使得命令行调试变得更加方便，但具有 ui 界面，且就在 vim 中的调试无疑会更加直观。</p><ul><li>vimspector 插件的调试能力</li></ul><p>可以查看其<a href="https://github.com/puremourning/vimspector">github 主页</a>。包括可调试的语言、调试输出的信息、调试的主要界面等等均可以看到。可以说 vimspector 是一个相当专业的调试插件。</p><h2 id="vimspector-安装"><a href="#vimspector-安装" class="headerlink" title="vimspector 安装"></a>vimspector 安装</h2><p>可以参考官方提供的安装方式，也可以按照以下笔者推荐的方式安装。</p><p>首先，该插件需要被安装在<code>pack/x/opt</code>的目录下，如果想使用插件管理器安装，必须将安装目录修改为<code>xxx/pack/x/opt</code>。其中<code>xxx</code>是前一段的路径，可以不止一级，可以自定义，<code>x</code>是一级目录，可以为任意名称。然后在 vim 配置文件中，声明<code>set packpath= the_path_to_your_pack_directory</code>，只需要到<code>pack</code>的前一级目录即可。然后直接使用包管理器安装即可。至此，插件本身安装完毕。</p><h2 id="vimspector-配置"><a href="#vimspector-配置" class="headerlink" title="vimspector 配置"></a>vimspector 配置</h2><p>使用<code>:VimspectorInstall</code>来安装调试需要的适配器，如<code>:VimspectorInstall --enable-c</code>，具体参数可以在其主页找到。使用<code>:VimspectorUpdate</code>更新所有适配器。</p><p>安装好所需适配器之后，可以继续配置快捷键。可以使用官方提供的两套快捷键，也可以自定义。</p><p>使用官方快捷键可以设置<code>let g:vimspector_enable_mappings = &#39;HUMAN&#39;</code>或者<code>let g:vimspector_enable_mappings = &#39;VISUAL_STUDIO&#39;</code>。</p><p>如果要自定义，以下配置仅供参考。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dn <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStepOvernmap <span class="token operator">&lt;</span>A<span class="token operator">-</span><span class="token keyword">n</span><span class="token operator">></span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStepOvernmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>db <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorToggleBreakpointnmap <span class="token operator">&lt;</span>A<span class="token operator">-</span><span class="token keyword">b</span><span class="token operator">></span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorToggleBreakpointnmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">ds</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorContinuenmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">dr</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorRestartnmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dp <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorPausenmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dt <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStopnmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>df <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorAddFunctionBreakpointnmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dc <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorToggleConditionalBreakpointnmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>do <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStepOutnmap <span class="token operator">&lt;</span>A<span class="token operator">-</span><span class="token keyword">o</span><span class="token operator">></span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStepOutnmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">di</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStepIntonmap <span class="token operator">&lt;</span>A<span class="token operator">-</span>i<span class="token operator">></span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorStepIntonmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dq <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorReset<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dlc <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Console<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dld <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput stderr<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dlo <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Vimspector<span class="token operator">-</span>out<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dle <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Vimspector<span class="token operator">-</span>err<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dls <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput server<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dlt <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Telemetry<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>de <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>VimspectorEval<span class="token operator">&lt;</span>space<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dw <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>VimspectorWatch<span class="token operator">&lt;</span>space<span class="token operator">></span>nmap <span class="token operator">&lt;</span>A<span class="token operator">-</span><span class="token keyword">w</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>VimspectorWatch<span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">d</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+debug'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'eval'</span><span class="token punctuation">,</span>\ <span class="token string">'w'</span> <span class="token punctuation">:</span> <span class="token string">'variable watch'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'start or continue'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'stop'</span><span class="token punctuation">,</span>\ <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'restart'</span><span class="token punctuation">,</span>\ <span class="token string">'p'</span> <span class="token punctuation">:</span> <span class="token string">'pause'</span><span class="token punctuation">,</span>\ <span class="token string">'b'</span> <span class="token punctuation">:</span> <span class="token string">'set breakpoint'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'set condition breakpoint'</span><span class="token punctuation">,</span>\ <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'add function breakpoint'</span><span class="token punctuation">,</span>\ <span class="token string">'n'</span> <span class="token punctuation">:</span> <span class="token string">'next'</span><span class="token punctuation">,</span>\ <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">'step in'</span><span class="token punctuation">,</span>\ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'step out'</span><span class="token punctuation">,</span>\ <span class="token string">'q'</span> <span class="token punctuation">:</span> <span class="token string">'quit'</span><span class="token punctuation">,</span>\ <span class="token string">'l'</span> <span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+switch_output'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'Console'</span><span class="token punctuation">,</span>\ <span class="token string">'d'</span> <span class="token punctuation">:</span> <span class="token string">'stderr'</span><span class="token punctuation">,</span>\ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'Vimspector-out'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'Vimspector-err'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'server'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'Telemetry'</span><span class="token punctuation">,</span>\<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 vimspector 的一些功能暂不支持 neovim，这一点在主页上有说明。不过并不影响使用。以上配置中这些部分就是在 neovim 中用于切换窗口的命令和快捷键。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dlc <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Console<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dld <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput stderr<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dlo <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Vimspector<span class="token operator">-</span>out<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dle <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Vimspector<span class="token operator">-</span>err<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dls <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput server<span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span><span class="token operator">&lt;</span>space<span class="token operator">></span>dlt <span class="token operator">&lt;</span>Plug<span class="token operator">></span>VimspectorShowOutput Telemetry<span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此为止，该插件仍不可以使用，还差最后一步。</p><p>该插件本身的配置文件有两种，一是<code>.gadgets.json</code>，二是<code>.vimspector.json</code>。前面安装适配器的过程中已经自动产生了不少配置。关于这些配置文件的具体内容和关系可以自行研究，这里只介绍如何完成最后一步配置。</p><p>在工程项目目录下新建<code>.vimspector.json</code>文件。copy 插件主页上给出的示例配置。</p><p>以 rust 语言为例，给出的示例配置为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"launch"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"adapter"</span><span class="token operator">:</span> <span class="token string">"CodeLLDB"</span><span class="token punctuation">,</span>      <span class="token property">"configuration"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>        <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceRoot&#125;/target/debug/vimspector_test"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要修改<code>program</code>的值为可执行文件路径即可。至此，所有配置均已完成。</p><p>最后注意一点，这个配置下插件并不会自动调用编译器编译工程。因此还需要手动编译生成可执行文件。</p><p>另外，该插件也可以监听端口，调试进程，有需要的可以自行研究。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Shortcut Key Management</title>
      <link href="2020/10/19/vim-shortcut-key-management/"/>
      <url>2020/10/19/vim-shortcut-key-management/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-快捷键管理"><a href="#vim-快捷键管理" class="headerlink" title="vim 快捷键管理"></a>vim 快捷键管理</h1><p>本文主要介绍如何使用<code>vim-which-key</code>管理 vim 快捷键。</p><h2 id="快捷键管理"><a href="#快捷键管理" class="headerlink" title="快捷键管理"></a>快捷键管理</h2><ul><li>什么是快捷键管理？</li></ul><p>这里的所谓快捷键管理，不是指修改快捷键，而是快捷键提示。</p><ul><li>为什么需要快捷键管理？</li></ul><p>当你比较熟悉 vim 之后，就会使用各种快捷键。随着 vim 的不断扩展，需要为各种插件设置快捷键。从简单的<code>ctrl</code>、<code>alt</code>、<code>shift</code>组合到<code>&lt;space&gt;</code>、<code>&lt;leader&gt;</code>的使用，你终将配置连自己都数不清的快捷键。幸运的是， vim 的一个好处在于，它可以设置无数快捷键。但不幸的是，人脑不可能记住那么多快捷键。</p><p>快捷键管理的好处在于，只要你有一个印象，甚至哪怕是一点印象都没有，你终将在它的提示中找到你要的那个键。</p><h2 id="vim-which-key"><a href="#vim-which-key" class="headerlink" title="vim-which-key"></a>vim-which-key</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="./vim-shortcut-key-management/1.png" alt="效果图"></p><p>以上为在普通模式下按下空格键时给出的提示。</p><h3 id="vim-which-key-安装"><a href="#vim-which-key-安装" class="headerlink" title="vim-which-key 安装"></a>vim-which-key 安装</h3><p>访问其<a href="https://github.com/liuchengxu/vim-which-key">github 主页</a></p><p>直接用插件管理器安装即可。</p><h3 id="vim-which-key-配置"><a href="#vim-which-key-配置" class="headerlink" title="vim-which-key 配置"></a>vim-which-key 配置</h3><p>首先给出我的部分配置，分析在配置中。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" 定义字典变量，这将是后续为具体快捷键定义提示的基础。注意这些行必须在所有具体定义之前，否则会报错，提示变量未定义。</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1 <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map2 <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">" 设置leader与localleader键位，也可以不设置，明确是哪个就好。</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>mapleader <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>maplocalleader <span class="token operator">=</span> <span class="token string">"\&lt;Space>"</span><span class="token comment">" 为具体的按键绑定字典变量。这样当按下该键一段时间后，会自动展开该键下的提示。</span><span class="token keyword">call</span> which_key#<span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'&lt;Space>'</span><span class="token punctuation">,</span> <span class="token string">"g:which_key_map1"</span><span class="token punctuation">)</span><span class="token keyword">call</span> which_key#<span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'\'</span><span class="token punctuation">,</span> <span class="token string">"g:which_key_map2"</span><span class="token punctuation">)</span><span class="token comment">" 定义vim-which-key自身的快捷键，使得插件在该键按下的时候响应。</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span>localleader<span class="token operator">></span> <span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token keyword">c</span><span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>WhichKey <span class="token string">'&lt;Space>'</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>vnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span>localleader<span class="token operator">></span> <span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token keyword">c</span><span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>WhichKeyVisual <span class="token string">'&lt;Space>'</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span> <span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token keyword">c</span><span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>WhichKey <span class="token string">'\'</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>vnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span> <span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token keyword">c</span><span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>WhichKeyVisual <span class="token string">'\'</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token comment">" 隐藏提供的提供的statusline的主题（该主题不灵活）。也可以不设置。</span><span class="token builtin">autocmd</span><span class="token operator">!</span> FileType which_key<span class="token builtin">autocmd</span>  FileType which_key <span class="token keyword">set</span> <span class="token builtin">laststatus</span><span class="token operator">=</span><span class="token number">0</span> <span class="token builtin">noshowmode</span> <span class="token builtin">noruler</span>\| <span class="token builtin">autocmd</span> BufLeave <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token keyword">set</span> <span class="token builtin">laststatus</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">showmode</span> <span class="token builtin">ruler</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们可以为具体快捷键配置提示信息了。</p><h3 id="具体提示信息配置"><a href="#具体提示信息配置" class="headerlink" title="具体提示信息配置"></a>具体提示信息配置</h3><p>默认情况下，即使不进行配置，vim-which-key 也会自动搜集所有插件的快捷键，但是仅显示快捷键绑定的命令，提示效果较差。</p><p>为获得更好的提示体验，最好手动配置提示信息。提供以下几个案例，参考一下即可。</p><ul><li>案例一</li></ul><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" coc-translator</span><span class="token comment">" popup</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">tp</span>  <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>translator<span class="token operator">-</span><span class="token keyword">p</span><span class="token punctuation">)</span>vmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">tp</span>  <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>translator<span class="token operator">-</span>pv<span class="token punctuation">)</span><span class="token comment">" echo</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">te</span>  <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>translator<span class="token operator">-</span><span class="token keyword">e</span><span class="token punctuation">)</span>vmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">te</span>  <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>translator<span class="token operator">-</span>ev<span class="token punctuation">)</span><span class="token comment">" replace</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">tr</span>  <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>translator<span class="token operator">-</span><span class="token keyword">r</span><span class="token punctuation">)</span>vmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">tr</span>  <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>translator<span class="token operator">-</span><span class="token keyword">rv</span><span class="token punctuation">)</span><span class="token comment">" 以上为其余插件的快捷键配置。以下为vim-which-key的配置。</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">t</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+translate'</span><span class="token punctuation">,</span>\ <span class="token string">'p'</span> <span class="token punctuation">:</span> <span class="token string">'popup'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'echo'</span><span class="token punctuation">,</span>\ <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'replace'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例二</li></ul><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">l</span> <span class="token operator">=</span> <span class="token string">'move to line'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>案例三</li></ul><p>注意该案例中<code>l</code>处又是一层嵌套。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">d</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+debug'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'eval'</span><span class="token punctuation">,</span>\ <span class="token string">'w'</span> <span class="token punctuation">:</span> <span class="token string">'variable watch'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'start or continue'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'stop'</span><span class="token punctuation">,</span>\ <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'restart'</span><span class="token punctuation">,</span>\ <span class="token string">'p'</span> <span class="token punctuation">:</span> <span class="token string">'pause'</span><span class="token punctuation">,</span>\ <span class="token string">'b'</span> <span class="token punctuation">:</span> <span class="token string">'set breakpoint'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'set condition breakpoint'</span><span class="token punctuation">,</span>\ <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'add function breakpoint'</span><span class="token punctuation">,</span>\ <span class="token string">'n'</span> <span class="token punctuation">:</span> <span class="token string">'next'</span><span class="token punctuation">,</span>\ <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">'step in'</span><span class="token punctuation">,</span>\ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'step out'</span><span class="token punctuation">,</span>\ <span class="token string">'q'</span> <span class="token punctuation">:</span> <span class="token string">'quit'</span><span class="token punctuation">,</span>\ <span class="token string">'l'</span> <span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+switch_output'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'Console'</span><span class="token punctuation">,</span>\ <span class="token string">'d'</span> <span class="token punctuation">:</span> <span class="token string">'stderr'</span><span class="token punctuation">,</span>\ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'Vimspector-out'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'Vimspector-err'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'server'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'Telemetry'</span><span class="token punctuation">,</span>\<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以忽略部分按键的提示，将其提示设置为<code>which_key_ignore</code>即可。比如</p><pre><code class="vim">let g:which_key_map2[&#39;\&#39;] = &#39;which_key_ignore&#39;let g:which_key_map2[&#39;\A&#39;] = &#39;which_key_ignore&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Plugin Management</title>
      <link href="2020/10/19/vim-plugin-management/"/>
      <url>2020/10/19/vim-plugin-management/</url>
      
        <content type="html"><![CDATA[<h1 id="vim插件管理"><a href="#vim插件管理" class="headerlink" title="vim插件管理"></a>vim插件管理</h1><p>本文介绍vim插件管理器。主要推荐vim-plug。如果想要更多扩展功能，可以尝试dein.vim。</p><h2 id="vim插件管理器"><a href="#vim插件管理器" class="headerlink" title="vim插件管理器"></a>vim插件管理器</h2><ul><li>为什么需要插件管理器？</li></ul><p>随着你对vim的不断扩展，为vim安装的插件将会越来越多。如果没有插件管理器，一方面，你可能无法高效地更新插件，另一方面，一些插件可能必须手动唤醒或者vim启动时启用的插件过多，导致速度大大降低。</p><ul><li>vim插件管理器能做什么？</li></ul><p>提供统一的插件安装、升级、移除指令。调配各插件的启动时机，提高运行vim效率。</p><h2 id="vim-plug"><a href="#vim-plug" class="headerlink" title="vim-plug"></a>vim-plug</h2><p>vim-plug是继vundle后新一代的插件管理器。支持并行安装插件、支持外部管理的插件、支持按需加载等等功能。</p><h3 id="vim-plug安装"><a href="#vim-plug安装" class="headerlink" title="vim-plug安装"></a>vim-plug安装</h3><p>访问vim-plug <a href="https://github.com/junegunn/vim-plug">github 主页</a>。下载<code>plug.vim</code>，放入<code>~/.vim/autoload/</code>或者<code>~/.local/share/nvim/site/autoload/</code>目录下。vim启动时会自动加载该目录下的插件。</p><p>对于windows和macos可以自行查看说明。</p><h3 id="vim-plug配置"><a href="#vim-plug配置" class="headerlink" title="vim-plug配置"></a>vim-plug配置</h3><pre class="line-numbers language-none"><code class="language-none">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)&quot; 上一行中括号内的是插件存放的目录Plug &#39;junegunn&#x2F;vim-easy-align&#39;&quot; 上一行中引号内的是插件在github上的地址，前面是作者用户名，后面是插件名称call plug#end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vim-plug使用"><a href="#vim-plug使用" class="headerlink" title="vim-plug使用"></a>vim-plug使用</h3><p>配置好插件之后，使用<code>:PlugInstall</code>安装插件。使用<code>PlugUpdate</code>更新所有插件，使用<code>PlugClean</code>清理不在配置内的插件。更多命令可以自行插件<code>README.md</code>。</p><p>关于按需加载，以及各种功能配置，由于vim-plug已经非常流行，一般不是很老的插件都会给出其<code>vim-plug</code>的配置。当然也可以自己根据文档研究。</p><h3 id="dein-vim"><a href="#dein-vim" class="headerlink" title="dein.vim"></a>dein.vim</h3><p>这是一个具有更强大的扩展性以及更加快速的插件管理器，但由于配置麻烦的多，且只有少数插件会给出其<code>dein.vim</code>的配置，因此笔者个人建议在插件未达到好几百的情况下，使用<code>vim-plug</code>足以。</p><p>如果你非常想要尝试，也建议搭配<code>dein-ui.vim</code>使用，可以大大降低配置难度，并且提供类似<code>vim-plug</code>的ui界面。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Tagbar</title>
      <link href="2020/10/19/vim-tagbar/"/>
      <url>2020/10/19/vim-tagbar/</url>
      
        <content type="html"><![CDATA[<h1 id="vim-tagbar"><a href="#vim-tagbar" class="headerlink" title="vim tagbar"></a>vim tagbar</h1><p>本文介绍 vim tagbar 插件替代品，获取更好的 tags 显示体验。</p><h2 id="vista-vim-介绍"><a href="#vista-vim-介绍" class="headerlink" title="vista.vim 介绍"></a>vista.vim 介绍</h2><p>vista.vim 插件相比于 tagbar 插件的优势主要在于异步以及 lsp 支持。lsp 支持意味着有可能为各种语言提取 tags。</p><p>vista.vim 显示 tags 的方式来自于 universal-ctags、ale、vim-lsp、coc.nvim、LanguageClient-neovim、vim-lsc、nvim-lspconfig 等。提取 tags 的方式来自于 fzf、skim、vim-clap 等。这就意味着该插件需要以上插件或者包的支持。这里，笔者推荐第一部分可以采用 universal-ctags、或 coc.nvim 或 ale，第二部分采用 vim-clap。</p><h2 id="vista-vim-安装配置"><a href="#vista-vim-安装配置" class="headerlink" title="vista.vim 安装配置"></a>vista.vim 安装配置</h2><p>vista.vim 的安装很简单，参考其<a href="https://github.com/liuchengxu/vista.vim">github 主页</a>即可。</p><p>配置 vista.vim，可以参考我的配置。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" vista.vim</span><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">NearestMethodOrFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort<span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">b</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">'vista_nearest_method_or_function'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">endfunction</span><span class="token keyword">set</span> <span class="token builtin">statusline</span><span class="token operator">+=</span><span class="token operator">%</span><span class="token punctuation">&#123;</span><span class="token function">NearestMethodOrFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">" By default vista.vim never run if you don't call it explicitly.</span><span class="token comment">"</span><span class="token comment">" If you want to show the nearest function in your statusline automatically,</span><span class="token comment">" you can add the following line to your vimrc</span><span class="token builtin">autocmd</span> VimEnter <span class="token operator">*</span> <span class="token keyword">call</span> vista#<span class="token function">RunForNearestMethodOrFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista_icon_indent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"╰─▸ "</span><span class="token punctuation">,</span> <span class="token string">"├─▸ "</span><span class="token punctuation">]</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista_default_executive <span class="token operator">=</span> <span class="token string">'ctags'</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista_executive_for <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'cpp'</span><span class="token punctuation">:</span> <span class="token string">'coc'</span><span class="token punctuation">,</span>\ <span class="token string">'php'</span><span class="token punctuation">:</span> <span class="token string">'coc'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista_ctags_cmd <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'haskell'</span><span class="token punctuation">:</span> <span class="token string">'hasktags -x -o - -c'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista_fzf_preview <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'right:50%'</span><span class="token punctuation">]</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista#renderer#enable_icon <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>vista#renderer#icons <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\   <span class="token string">"function"</span><span class="token punctuation">:</span> <span class="token string">"\uf794"</span><span class="token punctuation">,</span>\   <span class="token string">"variable"</span><span class="token punctuation">:</span> <span class="token string">"\uf71b"</span><span class="token punctuation">,</span>\  <span class="token punctuation">&#125;</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">m</span> <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>Vista<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">m</span> <span class="token operator">=</span> <span class="token string">'open the file tagbar'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中需要注意的有以下几行</p><pre class="line-numbers language-none"><code class="language-none">let g:vista_default_executive &#x3D; &#39;ctags&#39;let g:vista_executive_for &#x3D; &#123;\ &#39;cpp&#39;: &#39;coc&#39;,\ &#39;php&#39;: &#39;coc&#39;,\ &#125;nnoremap &lt;silent&gt;&lt;nowait&gt; &lt;space&gt;m :&lt;C-u&gt;Vista!!&lt;cr&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一行表示使用的默认显示 tags 工具，其实指的是提取 tags 的工具。不同工具的显示方式不同。笔者在这里使用的是<code>universal-ctags</code>，因此设置为 ctags。其余可选项可以参考其 github 主页。</p><p>第二行是为特殊文件类型配置特殊工具。</p><p>第三行是快捷键设置，只需要为<code>:Vista!!</code>命令配置快捷键即可。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim File Tree</title>
      <link href="2020/10/19/vim-file-tree/"/>
      <url>2020/10/19/vim-file-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-文件树"><a href="#Vim-文件树" class="headerlink" title="Vim 文件树"></a>Vim 文件树</h1><p>本文介绍 nerdtree 替代品，全新 vim filetree 解决方案。</p><h2 id="coc-explorer"><a href="#coc-explorer" class="headerlink" title="coc-explorer"></a>coc-explorer</h2><p>coc-explorer 是一个 coc 插件。运行于 coc.nvim 提供的插件平台上。相比于nerdtree，不说性能问题，直观上就将提供更多的文件信息以及更流畅的体验。同时也可以配置icons。</p><p>关于coc-explorer的效果图及具体配置，请见其<a href="https://github.com/weirongxu/coc-explorer">github主页</a>。</p><p>嫌麻烦的话，直接<code>CocInstall coc-explorer</code>。再设置一下快捷键等就可以直接使用了。以下附上我的配置。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" coc-explorer</span>nnoremap <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">p</span> <span class="token punctuation">:</span>CocCommand explorer<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> which_key_map2<span class="token operator">.</span><span class="token keyword">p</span> <span class="token operator">=</span><span class="token string">'file tree'</span><span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">coc_list_current_dir</span><span class="token punctuation">(</span><span class="token keyword">args</span><span class="token punctuation">)</span><span class="token keyword">let</span> node_info <span class="token operator">=</span> <span class="token function">CocAction</span><span class="token punctuation">(</span><span class="token string">'runCommand'</span><span class="token punctuation">,</span> <span class="token string">'explorer.getNodeInfo'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>execute <span class="token string">'cd '</span> <span class="token operator">.</span> <span class="token function">fnamemodify</span><span class="token punctuation">(</span>node_info<span class="token punctuation">[</span><span class="token string">'fullpath'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">':h'</span><span class="token punctuation">)</span>execute <span class="token string">'CocList '</span> <span class="token operator">.</span> a<span class="token punctuation">:</span><span class="token keyword">args</span><span class="token keyword">endfunction</span><span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">init_explorer</span><span class="token punctuation">(</span>bufnr<span class="token punctuation">)</span><span class="token keyword">call</span> <span class="token function">setbufvar</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span>bufnr<span class="token punctuation">,</span> <span class="token string">'&amp;winblend'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">endfunction</span><span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">enter_explorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">'b:has_enter_coc_explorer'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> &amp;<span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">'coc-explorer'</span><span class="token comment">" more mappings</span>nmap <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>Leader<span class="token operator">></span>fg <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token operator">&lt;</span>SID<span class="token operator">></span><span class="token function">coc_list_current_dir</span><span class="token punctuation">(</span><span class="token string">'-I grep'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>Leader<span class="token operator">></span>fG <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token operator">&lt;</span>SID<span class="token operator">></span><span class="token function">coc_list_current_dir</span><span class="token punctuation">(</span><span class="token string">'-I grep -regex'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>nmap <span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">p</span><span class="token operator">></span> <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token operator">&lt;</span>SID<span class="token operator">></span><span class="token function">coc_list_current_dir</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> <span class="token keyword">b</span><span class="token punctuation">:</span>has_enter_coc_explorer <span class="token operator">=</span> v<span class="token punctuation">:</span>true<span class="token keyword">endif</span><span class="token comment">" statusline</span><span class="token keyword">setl</span> <span class="token builtin">statusline</span><span class="token operator">=</span>coc<span class="token operator">-</span>explorer<span class="token keyword">endfunction</span>augroup CocExplorerCustom<span class="token builtin">autocmd</span><span class="token operator">!</span><span class="token builtin">autocmd</span> BufEnter <span class="token keyword">call</span> <span class="token operator">&lt;</span>SID<span class="token operator">></span><span class="token function">enter_explorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>augroup END<span class="token comment">" hook for explorer window initialized</span><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CocExplorerInited</span><span class="token punctuation">(</span><span class="token keyword">filetype</span><span class="token punctuation">,</span> bufnr<span class="token punctuation">)</span><span class="token comment">" transparent</span><span class="token keyword">call</span> <span class="token function">setbufvar</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span>bufnr<span class="token punctuation">,</span> <span class="token string">'&amp;winblend'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">endfunction</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Automatic Completion</title>
      <link href="2020/10/19/vim-automatic-completion/"/>
      <url>2020/10/19/vim-automatic-completion/</url>
      
        <content type="html"><![CDATA[<p>本文介绍 vim 自动补全方案。主要采用更强大的 coc.nvim 插件来替代 YCM。</p><h1 id="vim-自动补全"><a href="#vim-自动补全" class="headerlink" title="vim 自动补全"></a>vim 自动补全</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自动补全对于任何一个试图取代 IDE 的编辑器的重要性不言而喻。想要将 vim 打造为最契合自己的 IDE，无论如何都不能少了强大的自动补全功能。</p><h2 id="coc-nvim-介绍"><a href="#coc-nvim-介绍" class="headerlink" title="coc.nvim 介绍"></a>coc.nvim 介绍</h2><p>coc.nvim 是针对 neovim 开发的的功能非常强大，完全可以替代 YCM，带来更加优越的补全体验。包括语义补全、片段补全、定义跳转、文档查阅、静态检查等等。</p><p>同时 coc.nvim 也是一个全新的插件平台，除了其原生插件外，理论上也支持所有纯 JS 实现的 vscode 插件。拥有 coc.nvim，就拥有了一个异步插件平台。</p><h2 id="coc-nvim-安装"><a href="#coc-nvim-安装" class="headerlink" title="coc.nvim 安装"></a>coc.nvim 安装</h2><p>coc.nvim 需要<code>nodejs</code>支持。安装<code>nodejs</code>后，用插件管理器安装 coc.nvim 即可。具体可参考其<a href="https://github.com/neoclide/coc.nvim">github 主页</a>。</p><h2 id="使用-coc-nvim-进行补全"><a href="#使用-coc-nvim-进行补全" class="headerlink" title="使用 coc.nvim 进行补全"></a>使用 coc.nvim 进行补全</h2><p>coc.nvim 的补全可以采用安装插件或者配置 lsp 实现。</p><h3 id="语义补全及静态检查"><a href="#语义补全及静态检查" class="headerlink" title="语义补全及静态检查"></a>语义补全及静态检查</h3><p>以 rust 语言为例，可以直接使用<code>:CocInstall</code>安装<code>coc-rust-analyzer</code>插件（会自动安装<code>rust-analyzer</code>）。也可以在安装<code>rust-analyzer</code>后在 coc.nvim 的配置文件中配置。使用<code>:CocConfig</code>打开配置文件，写入</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"languageserver"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"rust"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"rust-analyzer"</span><span class="token punctuation">,</span>      <span class="token property">"filetypes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"rust"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"rootPatterns"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Cargo.toml"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意<code>command</code>必须保证可用。</p><p>关于 coc 插件以及 lsp 配置的具体内容可以参考<a href="https://github.com/neoclide/coc.nvim/wiki">coc.nvim wiki</a>。</p><p>到此，rust 语言的自动补全已经配置完成，静态检查也同步配置完成。但仅仅如此还不可以使用。coc.nvim 的自动配置在项目工程中才能起作用。如单独编写一个<code>main.rs</code>，则不会有语义提示。必须以<code>cargo new demo</code>新建一个工程，插件检测到<code>Cargo.toml</code>后才会启动语义的自动补全。当然也有可以直接在单文件中提示的特例，如 markdown 语言，本身就不存在工程的概念。</p><h3 id="片段补全"><a href="#片段补全" class="headerlink" title="片段补全"></a>片段补全</h3><p>安装<code>coc-actions</code>插件。</p><p>再在<code>coc-snippets</code>、<code>coc-ultisnips</code>中选择一个或全选即可。注意需要同步安装<code>honza/vim-snippets</code>、<code>SirVer/ultisnips</code>。</p><h3 id="自定义补全源"><a href="#自定义补全源" class="headerlink" title="自定义补全源"></a>自定义补全源</h3><p>coc.nvim 默认的补全源来自当前打开的所有 buffer、插件或 lsp 等。此外也可以自定义补全源。具体可参见<a href="https://github.com/neoclide/coc.nvim/wiki/Create-custom-source">coc.nvim wiki</a></p><p>下面以补全 markdown 中的 latex 语法为例，展示如何自定义补全源。</p><p>创建目录<code>~/.config/nvim/autoload/coc/source</code>。这里以 linux 系统为例，其他系统的位置可以自行参考 wiki。</p><p>创建<code>latex.vim</code>，写入</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> coc#<span class="token keyword">source</span>#latex#<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\<span class="token string">'triggerCharacters'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token string">'filetypes'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'markdown'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">&#125;</span><span class="token keyword">endfunction</span><span class="token keyword">function</span><span class="token operator">!</span> coc#<span class="token keyword">source</span>#latex#<span class="token function">complete</span><span class="token punctuation">(</span><span class="token keyword">opt</span><span class="token punctuation">,</span> <span class="token keyword">cb</span><span class="token punctuation">)</span> abort<span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'kappa'</span><span class="token punctuation">,</span> <span class="token string">'theta'</span><span class="token punctuation">,</span> <span class="token string">'dot&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'ddot&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'bar&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'hat&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'sec'</span><span class="token punctuation">,</span> <span class="token string">'csc'</span><span class="token punctuation">,</span> <span class="token string">'vec&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'cot'</span><span class="token punctuation">,</span> <span class="token string">'arcsin'</span><span class="token punctuation">,</span> <span class="token string">'arccos'</span><span class="token punctuation">,</span> <span class="token string">'arctan'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">,</span> <span class="token string">'coth'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'ch'</span><span class="token punctuation">,</span> <span class="token string">'th'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'partial'</span><span class="token punctuation">,</span> <span class="token string">'nabla'</span><span class="token punctuation">,</span> <span class="token string">'prime'</span><span class="token punctuation">,</span> <span class="token string">'backprime'</span><span class="token punctuation">,</span> <span class="token string">'infty'</span><span class="token punctuation">,</span> <span class="token string">'eth'</span><span class="token punctuation">,</span> <span class="token string">'hbar'</span><span class="token punctuation">,</span> <span class="token string">'sqrt&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'sqrt[]&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'pm'</span><span class="token punctuation">,</span> <span class="token string">'mp'</span><span class="token punctuation">,</span> <span class="token string">'times'</span><span class="token punctuation">,</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'cdot'</span><span class="token punctuation">,</span> <span class="token string">'odot'</span><span class="token punctuation">,</span> <span class="token string">'bigodot'</span> <span class="token punctuation">,</span> <span class="token string">'&#123; \&#125;'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'ni'</span><span class="token punctuation">,</span> <span class="token string">'cap'</span><span class="token punctuation">,</span> <span class="token string">'Cap'</span><span class="token punctuation">,</span> <span class="token string">'bigcap'</span><span class="token punctuation">,</span> <span class="token string">'cup'</span><span class="token punctuation">,</span> <span class="token string">'Cup'</span><span class="token punctuation">,</span> <span class="token string">'bigcup'</span><span class="token punctuation">,</span> <span class="token string">'subset'</span><span class="token punctuation">,</span> <span class="token string">'supset'</span><span class="token punctuation">,</span> <span class="token string">'supseteq'</span><span class="token punctuation">,</span> <span class="token string">'subseteq'</span><span class="token punctuation">,</span> <span class="token string">'subseteqq'</span><span class="token punctuation">,</span> <span class="token string">'supseteqq'</span><span class="token punctuation">,</span> <span class="token string">'subsetneq'</span><span class="token punctuation">,</span> <span class="token string">'supsetneq'</span><span class="token punctuation">,</span> <span class="token string">'supsetneqq'</span><span class="token punctuation">,</span> <span class="token string">'subsetneqq'</span><span class="token punctuation">,</span> <span class="token string">'sim'</span><span class="token punctuation">,</span> <span class="token string">'approx'</span><span class="token punctuation">,</span> <span class="token string">'leq'</span><span class="token punctuation">,</span> <span class="token string">'geq'</span><span class="token punctuation">,</span> <span class="token string">'parallel'</span><span class="token punctuation">,</span> <span class="token string">'nparallel'</span><span class="token punctuation">,</span> <span class="token string">'perp'</span><span class="token punctuation">,</span> <span class="token string">'angle'</span><span class="token punctuation">,</span> <span class="token string">'Box'</span><span class="token punctuation">,</span> <span class="token string">'bigtriangleup'</span><span class="token punctuation">,</span> <span class="token string">'bigtriangledown'</span><span class="token punctuation">,</span> <span class="token string">'forall'</span><span class="token punctuation">,</span> <span class="token string">'therefore'</span><span class="token punctuation">,</span> <span class="token string">'because'</span><span class="token punctuation">,</span> <span class="token string">'overline&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'Rightarrow'</span><span class="token punctuation">,</span> <span class="token string">'Leftarrow'</span><span class="token punctuation">,</span> <span class="token string">'rightarrow'</span><span class="token punctuation">,</span> <span class="token string">'leftarrow'</span><span class="token punctuation">,</span> <span class="token string">'leftrightarrow'</span><span class="token punctuation">,</span> <span class="token string">'nRightarrow'</span><span class="token punctuation">,</span> <span class="token string">'nLeftarrow'</span><span class="token punctuation">,</span> <span class="token string">'nleftarrow'</span><span class="token punctuation">,</span> <span class="token string">'nrightarrow'</span><span class="token punctuation">,</span> <span class="token string">'nleftrightarrow'</span><span class="token punctuation">,</span> <span class="token string">'overleftarrow&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'overrightarrow&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'overset&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'underline&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token string">'prod'</span><span class="token punctuation">,</span> <span class="token string">'lim'</span><span class="token punctuation">,</span> <span class="token string">'limits'</span><span class="token punctuation">,</span> <span class="token string">'int'</span><span class="token punctuation">,</span> <span class="token string">'iint'</span><span class="token punctuation">,</span> <span class="token string">'oint'</span><span class="token punctuation">,</span> <span class="token string">'iiint'</span><span class="token punctuation">,</span> <span class="token string">'frac&#123;&#125;&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'tfrac&#123;&#125;&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'dfrac&#123;&#125;&#123;&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;matrix&#125;\end&#123;matrix&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;vmatrix&#125;\end&#123;vmatrix&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;bmatrix&#125;\end&#123;bmatrix&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;Bmatrix&#125;\end&#123;Bmatrix&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;pmatrix&#125;\end&#123;pmatrix&#125;'</span><span class="token punctuation">,</span><span class="token string">'\begin&#123;cases&#125;\end&#123;cases&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;aligned&#125;\end&#123;aligned&#125;'</span><span class="token punctuation">,</span> <span class="token string">'\begin&#123;array&#125;\end&#123;array&#125;'</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">,</span> <span class="token string">'psi'</span><span class="token punctuation">,</span> <span class="token string">'Delta'</span><span class="token punctuation">,</span> <span class="token string">'delta'</span><span class="token punctuation">,</span> <span class="token string">'beta'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'rho'</span><span class="token punctuation">,</span> <span class="token string">'varepsilon'</span><span class="token punctuation">,</span> <span class="token string">'Gamma'</span><span class="token punctuation">,</span> <span class="token string">'chi'</span><span class="token punctuation">,</span> <span class="token string">'mu'</span><span class="token punctuation">,</span> <span class="token string">'sigma'</span><span class="token punctuation">,</span> <span class="token string">'Lambda'</span><span class="token punctuation">,</span> <span class="token string">'tau'</span><span class="token punctuation">,</span> <span class="token string">'varphi'</span><span class="token punctuation">,</span> <span class="token string">'varPhi'</span><span class="token punctuation">,</span> <span class="token string">'phi'</span><span class="token punctuation">,</span> <span class="token string">'Phi'</span><span class="token punctuation">,</span> <span class="token string">'eta'</span><span class="token punctuation">,</span> <span class="token string">'omega'</span><span class="token punctuation">,</span> <span class="token string">'varrho'</span><span class="token punctuation">,</span> <span class="token string">'Pi'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'gamma'</span><span class="token punctuation">,</span> <span class="token string">'xi'</span><span class="token punctuation">,</span> <span class="token string">'Psi'</span><span class="token punctuation">,</span> <span class="token string">'Sigma'</span><span class="token punctuation">,</span> <span class="token string">'varnothing'</span><span class="token punctuation">,</span> <span class="token string">'iiiint'</span><span class="token punctuation">]</span><span class="token keyword">call</span> a<span class="token punctuation">:</span><span class="token function">cb</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token keyword">endfunction</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单分析一下。配置的主体框架按照 wiki 给出的例子照猫画虎即可。其中<code>triggerCharacters</code>表示触发字符，意思就是说当输入该字符时启动补全。<code>filetypes</code>表示该补全源作用的文件类型。更多选项参见 wiki。</p><h2 id="修复定义跳转卡住的问题"><a href="#修复定义跳转卡住的问题" class="headerlink" title="修复定义跳转卡住的问题"></a>修复定义跳转卡住的问题</h2><p>使用 coc.nvim 的定义跳转到其他文件时，可能会直接卡死。原因不明，可能是文件太大加载不过来，但也存在小文件被卡住的问题。</p><p>修复方案是重启语法分析。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" 关闭</span><span class="token punctuation">:</span><span class="token builtin">syn</span> off<span class="token comment">" 开启</span><span class="token punctuation">:</span><span class="token builtin">syn</span> enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以设置进入Vim时自动执行该命令，设置如下。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">au VimEnter <span class="token operator">*</span> <span class="token punctuation">:</span><span class="token builtin">syn</span> off<span class="token operator">&lt;</span>CR<span class="token operator">></span>au VimEnter <span class="token operator">*</span> <span class="token punctuation">:</span><span class="token builtin">syn</span> enable<span class="token operator">&lt;</span>CR<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>coc.nvim 提供的其他功能还有很多，包括定义跳转、文档查询等等。感兴趣的可以自行研究。以下附上我的 coc.nvim 配置。仅供参考。其中<code>vim-which-key</code>的部分如果没有安装该插件就不必配置。</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token comment">" coc.nvim</span>inoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">j</span><span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-n>"</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-j>"</span>inoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">k</span><span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-p>"</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-k>"</span>inoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-y>"</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-g>u\&lt;CR>"</span>inoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> coc#<span class="token function">_select_confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-g>u\&lt;CR>"</span>inoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> coc#<span class="token function">_select_confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-g>u\&lt;CR>\&lt;c-r>=coc#on_enter()\&lt;CR>"</span><span class="token builtin">autocmd</span><span class="token operator">!</span> CompleteDone <span class="token operator">*</span> <span class="token keyword">if</span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> | <span class="token keyword">pclose</span> | <span class="token keyword">endif</span><span class="token comment">" Some servers have issues with backup files, see #649.</span><span class="token keyword">set</span> <span class="token builtin">nobackup</span><span class="token keyword">set</span> <span class="token builtin">nowritebackup</span><span class="token comment">" Give more space for displaying messages.</span><span class="token keyword">set</span> <span class="token builtin">cmdheight</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment">" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable</span><span class="token comment">" delays and poor user experience.</span><span class="token keyword">set</span> <span class="token builtin">updatetime</span><span class="token operator">=</span><span class="token number">300</span><span class="token comment">" Don't pass messages to |ins-completion-menu|.</span><span class="token keyword">set</span> <span class="token builtin">shortmess</span><span class="token operator">+=</span><span class="token keyword">c</span><span class="token comment">" Always show the signcolumn, otherwise it would shift the text each time</span><span class="token comment">" diagnostics appear/become resolved.</span><span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"patch-8.1.1564"</span><span class="token punctuation">)</span><span class="token comment">" Recently vim can merge signcolumn and number column into one</span><span class="token keyword">set</span> signcolumn<span class="token operator">=</span><span class="token keyword">number</span><span class="token keyword">else</span><span class="token keyword">set</span> signcolumn<span class="token operator">=</span>yes<span class="token keyword">endif</span><span class="token comment">" Use tab for trigger completion with characters ahead and navigate.</span><span class="token comment">" NOTE: Use command </span><span class="token string">':verbose imap &lt;tab>'</span> <span class="token keyword">to</span> <span class="token keyword">make</span> sure <span class="token keyword">tab</span> <span class="token operator">is</span> not mapped by<span class="token comment">" other plugin before putting this into your config.</span>inoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>TAB<span class="token operator">></span>\ <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-n>"</span> <span class="token punctuation">:</span>\ <span class="token operator">&lt;</span>SID<span class="token operator">></span><span class="token function">check_back_space</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;TAB>"</span> <span class="token punctuation">:</span>\ coc#<span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>inoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span><span class="token operator">&lt;</span>S<span class="token operator">-</span>TAB<span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-p>"</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-h>"</span><span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">check_back_space</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort<span class="token keyword">let</span> <span class="token keyword">col</span> <span class="token operator">=</span> <span class="token function">col</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">col</span> <span class="token operator">||</span> <span class="token function">getline</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">col</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token operator">=~#</span> <span class="token string">'\s'</span><span class="token keyword">endfunction</span><span class="token comment">" Use &lt;c-space> to trigger completion.</span><span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'nvim'</span><span class="token punctuation">)</span>inoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">c</span><span class="token operator">-</span>space<span class="token operator">></span> coc#<span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span>inoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">c</span><span class="token operator">-</span>@<span class="token operator">></span> coc#<span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token comment">" Use &lt;cr> to confirm completion, `&lt;C-g>u` means break undo chain at current</span><span class="token comment">" position. Coc only does snippet and additional edit on confirm.</span><span class="token comment">" &lt;cr> could be remapped by other vim plugin, try `:verbose imap &lt;CR>`.</span><span class="token keyword">if</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">'*complete_info'</span><span class="token punctuation">)</span>inoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span> <span class="token function">complete_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"selected"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"-1"</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-y>"</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-g>u\&lt;CR>"</span><span class="token keyword">else</span>inoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span> <span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"\&lt;C-y>"</span> <span class="token punctuation">:</span> <span class="token string">"\&lt;C-g>u\&lt;CR>"</span><span class="token keyword">endif</span><span class="token comment">" GoTo code navigation.</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>gy <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>type<span class="token operator">-</span>definition<span class="token punctuation">)</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>gi <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>implementation<span class="token punctuation">)</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">gr</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>references<span class="token punctuation">)</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token builtin">gd</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>definition<span class="token punctuation">)</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span>g <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'+coc.goto'</span><span class="token punctuation">,</span>\ <span class="token string">'y'</span> <span class="token punctuation">:</span> <span class="token string">'go to type definition'</span><span class="token punctuation">,</span>\ <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">'go to implementation'</span><span class="token punctuation">,</span>\ <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'go to references'</span><span class="token punctuation">,</span>\ <span class="token string">'d'</span> <span class="token punctuation">:</span> <span class="token string">'go to definition'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span><span class="token comment">" Use K to show documentation in preview window.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span> K <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token operator">&lt;</span>SID<span class="token operator">></span><span class="token function">show_documentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">show_documentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'vim'</span><span class="token punctuation">,</span><span class="token string">'help'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> &amp;<span class="token keyword">filetype</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>execute <span class="token string">'h '</span><span class="token operator">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">'&lt;cword>'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token keyword">call</span> <span class="token function">CocActionAsync</span><span class="token punctuation">(</span><span class="token string">'doHover'</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token keyword">endfunction</span><span class="token comment">" Highlight the symbol and its references when holding the cursor.</span><span class="token builtin">autocmd</span> CursorHold <span class="token operator">*</span> <span class="token keyword">silent</span> <span class="token keyword">call</span> <span class="token function">CocActionAsync</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token comment">" Symbol renaming.</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">cr</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>rename<span class="token punctuation">)</span><span class="token comment">" Formatting selected code.</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>cm <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>format<span class="token operator">-</span>selected<span class="token punctuation">)</span><span class="token keyword">xmap</span> <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span>cm <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span>format<span class="token operator">-</span>selected<span class="token punctuation">)</span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map1<span class="token operator">.</span><span class="token keyword">c</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+coc'</span><span class="token punctuation">,</span>\ <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'automatically fix errors in current line'</span><span class="token punctuation">,</span>\ <span class="token string">'m'</span> <span class="token punctuation">:</span> <span class="token string">'format selected code'</span><span class="token punctuation">,</span>\ <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'rename symbol'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span>augroup mygroup<span class="token builtin">autocmd</span><span class="token operator">!</span><span class="token comment">" Setup formatexpr specified filetype(s).</span><span class="token builtin">autocmd</span> FileType typescript<span class="token punctuation">,</span>json <span class="token keyword">setl</span> <span class="token builtin">formatexpr</span><span class="token operator">=</span><span class="token function">CocAction</span><span class="token punctuation">(</span><span class="token string">'formatSelected'</span><span class="token punctuation">)</span><span class="token comment">" Update signature help on jump placeholder.</span><span class="token builtin">autocmd</span> User CocJumpPlaceholder <span class="token keyword">call</span> <span class="token function">CocActionAsync</span><span class="token punctuation">(</span><span class="token string">'showSignatureHelp'</span><span class="token punctuation">)</span>augroup end<span class="token comment">" Apply AutoFix to problem on the current line.</span>nmap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>space<span class="token operator">></span><span class="token keyword">cf</span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>coc<span class="token operator">-</span><span class="token keyword">fix</span><span class="token operator">-</span>current<span class="token punctuation">)</span><span class="token comment">" Add `:Format` command to format current buffer.</span>command<span class="token operator">!</span> <span class="token operator">-</span>nargs<span class="token operator">=</span><span class="token number">0</span> Format <span class="token punctuation">:</span><span class="token keyword">call</span> <span class="token function">CocAction</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">)</span><span class="token comment">" Add `:Fold` command to fold current buffer.</span>command<span class="token operator">!</span> <span class="token operator">-</span>nargs<span class="token operator">=</span><span class="token operator">?</span> Fold <span class="token punctuation">:</span><span class="token keyword">call</span>     <span class="token function">CocAction</span><span class="token punctuation">(</span><span class="token string">'fold'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">f</span><span class="token operator">-</span><span class="token keyword">args</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token comment">" Add `:OR` command for organize imports of the current buffer.</span>command<span class="token operator">!</span> <span class="token operator">-</span>nargs<span class="token operator">=</span><span class="token number">0</span> OR   <span class="token punctuation">:</span><span class="token keyword">call</span>     <span class="token function">CocAction</span><span class="token punctuation">(</span><span class="token string">'runCommand'</span><span class="token punctuation">,</span> <span class="token string">'editor.action.organizeImport'</span><span class="token punctuation">)</span><span class="token comment">" Add (Neo)Vim's native statusline support.</span><span class="token comment">" NOTE: Please see `:h coc-status` for integrations with external plugins that</span><span class="token comment">" provide custom statusline: lightline.vim, vim-airline.</span><span class="token keyword">set</span> <span class="token builtin">statusline</span>^<span class="token operator">=</span><span class="token operator">%</span><span class="token punctuation">&#123;</span>coc#<span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token punctuation">&#123;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">b</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'coc_current_function'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">" Mappings for CoCList</span><span class="token comment">" open CocList</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span>ct  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList<span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token comment">" Show all diagnostics.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">ca</span>  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList diagnostics<span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token comment">" Manage extensions.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">ce</span>  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList extensions<span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token comment">" Show commands.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">cc</span>  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList commands<span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token comment">" Find symbol of current document.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">co</span>  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList outline<span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token comment">" Search workspace symbols.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span>cs  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocList <span class="token operator">-</span>I symbols<span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span><span class="token comment">" Do default action for next item.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span>cj  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocNext<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token comment">" Do default action for previous item.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span>cz  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocPrev<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token comment">" Resume latest coc list.</span>nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span>nowait<span class="token operator">></span> <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token keyword">cp</span>  <span class="token punctuation">:</span><span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">u</span><span class="token operator">></span>CocListResume<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token keyword">let</span> g<span class="token punctuation">:</span>which_key_map2<span class="token operator">.</span><span class="token keyword">c</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\ <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'+coc'</span><span class="token punctuation">,</span>\ <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'open coc list'</span><span class="token punctuation">,</span>\ <span class="token string">'a'</span> <span class="token punctuation">:</span> <span class="token string">'show all diagnostics'</span><span class="token punctuation">,</span>\ <span class="token string">'e'</span> <span class="token punctuation">:</span> <span class="token string">'manage extensions'</span><span class="token punctuation">,</span>\ <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'show commands'</span><span class="token punctuation">,</span>\ <span class="token string">'o'</span> <span class="token punctuation">:</span> <span class="token string">'find symbol of current document'</span><span class="token punctuation">,</span>\ <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'search workspace symbols'</span><span class="token punctuation">,</span>\ <span class="token string">'j'</span> <span class="token punctuation">:</span> <span class="token string">'do default action for next item'</span><span class="token punctuation">,</span>\ <span class="token string">'z'</span> <span class="token punctuation">:</span> <span class="token string">'do default action for previous item'</span><span class="token punctuation">,</span>\ <span class="token string">'p'</span> <span class="token punctuation">:</span> <span class="token string">'resume latest coc list'</span><span class="token punctuation">,</span>\ <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Browse and Save Files that Require Root Permissions In Neovim</title>
      <link href="2020/10/18/browse-and-save-files-that-require-root-permissions-in-neovim/"/>
      <url>2020/10/18/browse-and-save-files-that-require-root-permissions-in-neovim/</url>
      
        <content type="html"><![CDATA[<h1 id="Neovim浏览及保存需要root权限的文件"><a href="#Neovim浏览及保存需要root权限的文件" class="headerlink" title="Neovim浏览及保存需要root权限的文件"></a>Neovim浏览及保存需要root权限的文件</h1><h2 id="vim保存时获取root权限"><a href="#vim保存时获取root权限" class="headerlink" title="vim保存时获取root权限"></a>vim保存时获取root权限</h2><p>vim可以在保存文件时使用<code>:w !  sudo  tee  %</code>获取权限。但neovim暂不支持该命令，或者说无法输入密码。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>安装<a href="https://github.com/lambdalisue/suda.vim"><code>suda.vim</code>插件</a>。</p><p>接着在<code>init.vim</code>设置<code>let g:suda_smart_edit = 1</code>即可。插件会自动检测文件权限。当保存需要权限时，会自动提示输入密码。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo System Further Improvement</title>
      <link href="2020/08/08/gentoo-system-further-improvement/"/>
      <url>2020/08/08/gentoo-system-further-improvement/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo 教程目录</a></p><h1 id="Gentoo-系统完善"><a href="#Gentoo-系统完善" class="headerlink" title="Gentoo 系统完善"></a>Gentoo 系统完善</h1><p>本文介绍 gentoo 系统的进一步完善。主要包括一些软件的安装和一些系统配置。</p><h2 id="添加-gentoo-zh-overlay"><a href="#添加-gentoo-zh-overlay" class="headerlink" title="添加 gentoo-zh overlay"></a>添加 gentoo-zh overlay</h2><p>gentoo-zh 包含了许多国内常用的软件。</p><pre class="line-numbers language-none"><code class="language-none">emerge eselect-repositoryeselect repository add gentoo-zh git https:&#x2F;&#x2F;github.com&#x2F;microcai&#x2F;gentoo-zheix-sync# 或者可以直接使用layman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果同步时发生错误<code>Main gentoo tree does not appear to have changed: exiting</code>，可以<code>rm -rf /var/db/repos/*</code>或者<code>eix-sync -a</code>解决。</p><h2 id="字体配置"><a href="#字体配置" class="headerlink" title="字体配置"></a>字体配置</h2><ul><li>安装 fontconfig</li></ul><p>添加 USE flag<code>static-libs</code></p><p><code>emerge media-libs/fontconfig</code></p><p>更多配置见<a href="https://wiki.gentoo.org/wiki/Fontconfig">gentoo wiki fontdconfig</a>。</p><ul><li>安装字体（不需要全部安装）</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge media-fonts&#x2F;font-isas-miscemerge media-fonts&#x2F;arphicfontsemerge media-fonts&#x2F;opendesktop-fontsemerge media-fonts&#x2F;wqy-zenheiemerge media-fonts&#x2F;zh-kcfonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>激活字体</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看字体配置文件eselect fontconfig list# 激活上面安装的字体eselect fontconfig enable number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>（可选）将区域改为中文</li></ul><pre class="line-numbers language-none"><code class="language-none"># 列出可用的区域eselect locale list# 选择中文区域的编号eselect locale set 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置桌面使用中文语言</li></ul><p>值得注意的是 kde 桌面不能完全汉化。如果你不能接受，干脆用全英文。</p><pre class="line-numbers language-none"><code class="language-none">nvim ~&#x2F;.xprofileexport LANG&#x3D;zh_CN.UTF-8export LANGUAGE&#x3D;zh_CN:en_US<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>这里选用 fcitx5 作为输入法。</p><ul><li>安装输入法</li></ul><pre class="line-numbers language-none"><code class="language-none"># 编辑&#x2F;etc&#x2F;portage&#x2F;package.accept_keywords&#x2F;fcitx5，加入&#x3D;app-i18n&#x2F;fcitx5-999999999 **&#x3D;app-i18n&#x2F;kcm-fcitx5-99999999 **&#x3D;app-i18n&#x2F;fcitx5-qt-9999999999 **app-i18n&#x2F;fcitx5-chinese-addons&#x3D;app-i18n&#x2F;libime-99999999 **&#x3D;x11-libs&#x2F;xcb-imdkit-99999999999 **&#x3D;app-i18n&#x2F;cldr-emoji-annotation-9999 **&#x3D;app-i18n&#x2F;fcitx5-gtk-999999999 **<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">emerge boostemerge xcb-imdkit cldr-emoji-annotation fcitx5 kcm-fcitx5 fcitx5-qt fcitx5-chinese-addons libime fcitx5-gtk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<code>app-text/enchant-1.6.1-r1</code>编译失败的解决方案为设置 CC 和 CXX 为</p><pre class="line-numbers language-none"><code class="language-none">CC&#x3D;x86_64-pc-linux-gnu-gccCXX&#x3D;x86_64-pc-linux-gnu-g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>libime 如果编译失败，可尝试修改<code>=app-i18n/libime-99999999 **</code>为<code>app-i18n/libime</code>（<code>fcitx5-chinese-addons</code>失败同理）。</p><pre class="line-numbers language-none"><code class="language-none"># 修改~&#x2F;.xprofileexport GTK_IM_MODULE&#x3D;fcitx5export QT_IM_MODULE&#x3D;fcitx5export XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mkdir ~&#x2F;.config&#x2F;autostartcp &#x2F;usr&#x2F;share&#x2F;applications&#x2F;fcitx5.desktop ~&#x2F;.config&#x2F;autostart# 自启动也可以在系统设置 start and shutdown 中设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装主题</li></ul><p>先关闭 fcitx5</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;Material-Color# 以hosxy&#x2F;Fcitx5-Material-Color为例git clone https:&#x2F;&#x2F;github.com&#x2F;hosxy&#x2F;Fcitx5-Material-Color.git ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;Material-Colorcd ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;Material-Colorln -sf .&#x2F;panel-teal.png panel.pngln -sf .&#x2F;highlight-teal.png highlight.png# 修改~&#x2F;.config&#x2F;fcitx5&#x2F;conf&#x2F;classicui.confVertical Candidate List&#x3D;FalsePerScreenDPI&#x3D;TrueTheme&#x3D;Material-Color<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多配置可以直接在<code>kcm-fcitx5</code>中配置。</p><h2 id="tlp"><a href="#tlp" class="headerlink" title="tlp"></a>tlp</h2><pre class="line-numbers language-none"><code class="language-none">eselect repository add tlp git https:&#x2F;&#x2F;github.com&#x2F;dywisor&#x2F;tlp-portage# 修改&#x2F;etc&#x2F;portage&#x2F;package.accept_keywords&#x2F;tlpapp-laptop&#x2F;tlpsys-power&#x2F;linux-x86-power-tools# 安装emerge tlpsystemctl enable tlp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><pre class="line-numbers language-none"><code class="language-none">emerge zsh# 设置zsh为默认shellchsh -s &#x2F;bin&#x2F;zsh# 查看当前shellecho $SHELL# 安装oh-my-zshgit clone git:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zshcp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc# 配置oh-my-zshgit clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlightinggit clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestionsnvim ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions&#x2F;zsh-autosuggestions.zshZSH_AUTOSUGGEST_HIGHLIGHT_STYLE&#x3D;’fg&#x3D;20’nvim ~&#x2F;.zshrc# 设置主题ZSH_THEME&#x3D;&quot;ys&quot;# 设置插件plugins&#x3D;(git z zsh-syntax-highlighting zsh-autosuggestions extract vi-mode)source ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h2><pre class="line-numbers language-none"><code class="language-none">emerge xmodmapxmodmap -pke &gt; ~&#x2F;.Xmodmap# 修改 ~&#x2F;.Xmodmap，具体配置自行查询。xmodmap ~&#x2F;.Xmodmap # 用ssh连接是无法启动的，需要在主机上执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="触控板手势配置"><a href="#触控板手势配置" class="headerlink" title="触控板手势配置"></a>触控板手势配置</h3><pre class="line-numbers language-none"><code class="language-none">sudo gpasswd -a $USER inputemerge x11-misc&#x2F;libinput-gestureslibinput-gestures-setup autostart# 查看dev-libs&#x2F;libinput和x11-drivers&#x2F;xf86-input-libinput以及x11-misc&#x2F;xdotool是否缺失，缺则补mkdir &#x2F;etc&#x2F;X11&#x2F;xorg.conf.dcp &#x2F;usr&#x2F;share&#x2F;X11&#x2F;xorg.conf.d&#x2F;40-libinput.conf &#x2F;etc&#x2F;X11&#x2F;xorg.conf.d&#x2F;40-libinput.confcp &#x2F;etc&#x2F;libinput-gestures.conf ~&#x2F;.config&#x2F;libinput-gestures.conf# 修改 ~&#x2F;.config&#x2F;libinput-gestures.conf，具体配置自行查询。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="grub-主题"><a href="#grub-主题" class="headerlink" title="grub 主题"></a>grub 主题</h2><p><a href="https://www.gnome-look.org/browse/cat/109/">下载 grub 主题</a></p><p>将主题包解压后放在<code>/boot/grub/themes</code>下。</p><pre class="line-numbers language-none"><code class="language-none"># 修改&#x2F;etc&#x2F;default&#x2F;grubGRUB_THEME&#x3D;&quot;&#x2F;boot&#x2F;grub&#x2F;themes&#x2F;主题包名&#x2F;theme.txt&quot;GRUB_GFXMODE&#x3D;&quot;1920x1080x32&quot;# 更新配置grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启用-snap"><a href="#启用-snap" class="headerlink" title="启用 snap"></a>启用 snap</h2><ul><li>添加 USE flag</li></ul><pre class="line-numbers language-none"><code class="language-none">sys-apps&#x2F;systemd policykit apparmorsys-libs&#x2F;libseccomp static-libs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>开启测试分支</li></ul><pre class="line-numbers language-none"><code class="language-none">sys-libs&#x2F;libapparmorsys-apps&#x2F;apparmorapp-emulation&#x2F;snapdsec-policy&#x2F;apparmor-profiles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装包</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge sys-apps&#x2F;systemdemerge sys-apps&#x2F;apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改 grub 配置</li></ul><pre class="line-numbers language-none"><code class="language-none">nvim &#x2F;etc&#x2F;default&#x2F;grub# 添加GRUB_CMDLINE_LINIX_DEFAULT&#x3D;&quot;apparmor&#x3D;1 security&#x3D;apparmor&quot;grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 snap</li></ul><pre class="line-numbers language-none"><code class="language-none">layman -a snapdeix-sync# 内核需要开启CONFIG_SECURITY_APPARMOR# 如果前面采用的是自动编译，则可以将此项加入&#x2F;usr&#x2F;src&#x2F;linux&#x2F;.config，再重新编译内核emerge --ask app-emulation&#x2F;snapdsudo systemctl enable --now snapdsudo systemctl enable --now snapd.socketsudo systemctl enable --now snapd.apparmor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>snap 加速</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo systemctl edit snapd[Service]Environment&#x3D;&quot;http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:port&quot;Environment&#x3D;&quot;https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:port&quot;sudo systemctl daemon-reloadsudo systemctl restart snapd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Kool Desktop Environment Installation</title>
      <link href="2020/08/08/gentoo-kool-desktop-environment-installation/"/>
      <url>2020/08/08/gentoo-kool-desktop-environment-installation/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo 教程目录</a></p><h1 id="Gentoo-KDE-桌面安装"><a href="#Gentoo-KDE-桌面安装" class="headerlink" title="Gentoo KDE 桌面安装"></a>Gentoo KDE 桌面安装</h1><p>本文以 kde 为例，介绍 gentoo 系统桌面安装流程。</p><p>kde 桌面的安装可参考<a href="https://wiki.gentoo.org/wiki/KDE/">gentoo wiki</a>。</p><h2 id="基本桌面环境安装"><a href="#基本桌面环境安装" class="headerlink" title="基本桌面环境安装"></a>基本桌面环境安装</h2><p>参考上面的链接，安装<code>kde-plasma</code>以及应用程序包。</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装使用-NetworkManager"><a href="#安装使用-NetworkManager" class="headerlink" title="安装使用 NetworkManager"></a>安装使用 NetworkManager</h2><ul><li>安装</li></ul><p>参考<a href="https://wiki.gentoo.org/wiki/NetworkManager">gentoo wiki</a>。</p><ul><li>允许用户使用</li></ul><pre class="line-numbers language-none"><code class="language-none">gpasswd -a &lt;user_name&gt; plugdev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开机启动</li></ul><pre class="line-numbers language-none"><code class="language-none">systemctl enable NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启，测试是否可以进入图形界面。</p><p>下一篇：<a href="https://www.niuiic.top/2020/08/08/gentoo-system-further-improvement/">Gentoo System Further Improvement</a></p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Basic System Installation</title>
      <link href="2020/08/07/gentoo-basic-system-installation/"/>
      <url>2020/08/07/gentoo-basic-system-installation/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo 教程目录</a></p><h1 id="Gentoo-基本系统安装"><a href="#Gentoo-基本系统安装" class="headerlink" title="Gentoo 基本系统安装"></a>Gentoo 基本系统安装</h1><p>本文介绍 gentoo 基本系统的一般安装流程。图形界面的安装配置将在后面的文章中介绍。</p><h2 id="刻录-gentoo-安装镜像"><a href="#刻录-gentoo-安装镜像" class="headerlink" title="刻录 gentoo 安装镜像"></a>刻录 gentoo 安装镜像</h2><p>访问<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a>。选择合适的架构，下载 gentoo 安装镜像。</p><p><img src="1.png" alt="安装镜像列表"></p><p>虚拟机不需要刻录。u 盘的刻录步骤很简单，不再赘述。</p><h2 id="开启网络与-ssh"><a href="#开启网络与-ssh" class="headerlink" title="开启网络与 ssh"></a>开启网络与 ssh</h2><ul><li>有线网卡与虚拟机</li></ul><p>直接<code>dhcpcd</code>即可</p><ul><li>wifi</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看无限网卡名称及状态ip a# 若无限网卡未打开，则开启ip link set interface_name up# 查看可用的wifi# 建议直接从其他设备上查看wifi名称，不必从本地扫描搜索# 生成wifi配置wpa_passphrase 网络 密码 &gt; 文件# 连接wifiwpa_supplicant -c 文件 -i 接口 &amp;# 自动分配ip地址dhcpcd &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启 ssh</li></ul><pre class="line-numbers language-none"><code class="language-none"># 开启ssh&#x2F;etc&#x2F;init.d&#x2F;sshd start# 设置livecd密码passwd# 注意远程连接时用户名不是livecd，而是root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>详见</p><p><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks/zh-cn">gentoo wiki</a><br><a href="https://wiki.gentoo.org/wiki/Handbook:X86/Blocks/Disks/zh-cn">gentoo handbook</a></p><p>由于此处分配分区将牵扯到后面 fstab 的配置，如果你对此完全不了解，建议按最常规的方式划分。如果你有一台现成的 linux，可以仿照其分区，可以帮助后面配置 fstab。</p><p>另外参考你的电脑配置。内存与交换空间之和（单位 G）最好大于 CPU 总线程数。</p><p>以下是 GPT 格式分区，引导方式为 EFI。</p><pre class="line-numbers language-none"><code class="language-none">fdisk -l# 注意以下磁盘名nvme0n1，对于不同规格的硬盘不同fdisk &#x2F;dev&#x2F;nvme0n1g# 分区，具体操作略w# 注意以下分区格式将关系到部分软件，尤其是grub的安装配置。因此必须慎重选择。# 制作引导分区mkfs.fat -F32 &#x2F;dev&#x2F;nvme0n1p1# 制作主分区mkfs.ext4 &#x2F;dev&#x2F;nvme0n1p2# 制作交换分区mkswap &#x2F;dev&#x2F;nvme0n1p3# 启用交换swapon &#x2F;dev&#x2F;nvme0n1p3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分区完毕后将主分区挂在到 livecd 提供的挂载点上。</p><pre class="line-numbers language-none"><code class="language-none">mount &#x2F;dev&#x2F;nvme0n1p2 &#x2F;mnt&#x2F;gentoo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取基础编译环境"><a href="#获取基础编译环境" class="headerlink" title="获取基础编译环境"></a>获取基础编译环境</h2><p>上述步骤已经为 gentoo 系统开辟了空间，下面将正式进入系统的编译安装阶段。</p><p>由于 gentoo livecd 并不携带完整的编译环境，因此我们需要先往系统空间中放一个现成的编译环境，即 gentoo 基础编译环境。</p><p>再次访问<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华镜像站</a>。</p><p>Gentoo 的 stage3 包囊括了整套编译环境以及绝大多数 gentoo 基础工具。</p><p><img src="2.png" alt="stage3"></p><p>Gentoo stage3 包的类型包括但不限于以上几种。根据你所需要的桌面环境，查看其对应的 gentoo wiki，做出选择。其中无 systemd 表示使用 OpenRC。nomultilib 表示仅支持 64 位，一般不建议选择。</p><p>本教程以 systemd kde 为例，因此选择下载以下几个包至<code>/mnt/gentoo</code>。</p><p><img src="3.png" alt="systemd stage3"></p><p>下载完毕后使用<code>sha512sum -c stage3-amd64-*.tar.xz.DIGESTS</code>校验文件，出现两个 ok 和两个 failed 为正常。并继续使用<code>tar xpvf stage3-*.tar.xz --xattrs-include=&#39;*.*&#39; --numeric-owner</code>解压文件。</p><h2 id="设置编译选项"><a href="#设置编译选项" class="headerlink" title="设置编译选项"></a>设置编译选项</h2><p>配置<code>/mnt/gentoo/etc/portage/make.conf</code>。</p><p>这是整个安装过程中最核心、最重要的一步。详情参考<a href="https://wiki.gentoo.org/wiki//etc/portage/make.conf">Gentoo wiki</a>以及<a href="https://dev.gentoo.org/~zmedico/portage/doc/man/make.conf.5.html">gentoo doc</a>。</p><p>此处不再对大部分配置进行说明，仅给出笔者第一次安装 gentoo 时的配置（虽不完美，但在当时不存在错误）。只可参考，不可照抄。</p><pre class="line-numbers language-none"><code class="language-none">COMMON_FLAGS&#x3D;&quot;-march&#x3D;native -O2 -pipe&quot;CFLAGS&#x3D;&quot;$&#123;COMMON_FLAGS&#125;&quot;CXXFLAGS&#x3D;&quot;$&#123;COMMON_FLAGS&#125;&quot;FCFLAGS&#x3D;&quot;$&#123;COMMON_FLAGS&#125;&quot;FFLAGS&#x3D;&quot;$&#123;COMMON_FLAGS&#125;&quot;CHOST&#x3D;&quot;x86_64-pc-linux-gnu&quot;CONFIG_PROTECT&#x3D;&quot;&#x2F;var&#x2F;bind&quot;PORTDIR&#x3D;&quot;&#x2F;var&#x2F;db&#x2F;repos&#x2F;gentoo&quot;DISTDIR&#x3D;&quot;&#x2F;var&#x2F;cache&#x2F;distfiles&quot;PKGDIR&#x3D;&quot;&#x2F;var&#x2F;cache&#x2F;binpkgs&quot;LC_MESSAGES&#x3D;CMAKEOPTS&#x3D;&quot;-j9&quot;GENTOO_MIRRORS&#x3D;&quot;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gentoo&quot;PORTAGE_TMPDIR&#x3D;&quot;&#x2F;var&#x2F;tmp&quot;DISTDIR&#x3D;&#x2F;var&#x2F;gentoo&#x2F;distfilesACCEPT_LICENSE&#x3D;&quot;*&quot;VIDEO_CARDS&#x3D;&quot;radeon&quot;L10N&#x3D;&quot;en_US en zh zh_CN&quot;LINGUAS&#x3D;&quot;en-US zh-CN en zh&quot;AUTO_CLEAN&#x3D;&quot;yes&quot;GRUB_PLATFORMS&#x3D;&quot;efi-64&quot;EMERGE_DEFAULT_OPTS&#x3D;&quot;--with-bdeps&#x3D;y --ask --verbose&#x3D;y --load-average --keep-going&quot;INPUT_DEVICES&#x3D;&quot;libinput synaptics evdev&quot;USE&#x3D;&quot;X alsa clang udev dbus polkit udisks vulkan vdpau vaapi glamor nls&quot;KEYWORDS&#x3D;&quot;amd64&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面对其中的几个选项做简略介绍。</p><p><code>GENTOO_MIRRORS</code>：建议选清华源。虽然清华源的速度中规中矩，时不时还出点问题。但 gentoo 在中国境内的源很少，应该也只有清华源在及时更新。</p><p><code>EMERGE_DEFAULT_OPTS</code>：建议添加，可大大减小 emerge 指令长度。</p><p><code>INPUT_DEVICES</code>：绝不可缺。否则会引起键盘、觸控板、鼠标失效等等问题。</p><p><code>KEYWORDS</code>：不要在这里开启测试分支。</p><p><code>MAKEOPTS</code>：建议等于 CPU 线程数+1。这样计算机在编译软件时尚有余力编译另外的软件或者进行其他操作。</p><h2 id="进一步配置"><a href="#进一步配置" class="headerlink" title="进一步配置"></a>进一步配置</h2><pre class="line-numbers language-none"><code class="language-none">mkdir --parents &#x2F;mnt&#x2F;gentoo&#x2F;etc&#x2F;portage&#x2F;repos.confcp &#x2F;mnt&#x2F;gentoo&#x2F;usr&#x2F;share&#x2F;portage&#x2F;config&#x2F;repos.conf &#x2F;mnt&#x2F;gentoo&#x2F;etc&#x2F;portage&#x2F;repos.conf&#x2F;gentoo.confcp --dereference &#x2F;etc&#x2F;resolv.conf &#x2F;mnt&#x2F;gentoo&#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改<code>/mnt/gentoo/etc/portage/repos.conf/gentoo.conf</code>配置 portage 镜像源</p><pre class="line-numbers language-none"><code class="language-none">sync-uri &#x3D; rsync:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gentoo-portage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进入新系统"><a href="#进入新系统" class="headerlink" title="进入新系统"></a>进入新系统</h2><ul><li>挂载剩余文件系统</li></ul><pre class="line-numbers language-none"><code class="language-none">mount --types proc &#x2F;proc &#x2F;mnt&#x2F;gentoo&#x2F;procmount --rbind &#x2F;sys &#x2F;mnt&#x2F;gentoo&#x2F;sysmount --make-rslave &#x2F;mnt&#x2F;gentoo&#x2F;sysmount --rbind &#x2F;dev &#x2F;mnt&#x2F;gentoo&#x2F;devmount --make-rslave &#x2F;mnt&#x2F;gentoo&#x2F;dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>chroot 登陆新系统</li></ul><pre class="line-numbers language-none"><code class="language-none">chroot &#x2F;mnt&#x2F;gentoo &#x2F;bin&#x2F;bashsource &#x2F;etc&#x2F;profileexport PS1&#x3D;&quot;(chroot) $&#123;PS1&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>挂载 boot 分区</li></ul><pre class="line-numbers language-none"><code class="language-none">mount &#x2F;dev&#x2F;nvme0n1p1 &#x2F;boot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-Portage"><a href="#配置-Portage" class="headerlink" title="配置 Portage"></a>配置 Portage</h2><ul><li>下载数据库快照</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge-webrsync<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>选择 profile</li></ul><p>profile 简单的说就是一系列 USE flag 等配置的集合。这将是新系统的主体配置。</p><pre class="line-numbers language-none"><code class="language-none"># 先列出可用的profile，带星号是目前选择的eselect profile list# 选择你需要的profile（可以从gentoo wiki获得信息）。这里选择kde桌面对应的profileeselect profile set default&#x2F;linux&#x2F;amd64&#x2F;17.1&#x2F;desktop&#x2F;plasma&#x2F;systemd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>17.0 与 17.1 版本差距并不是非常大，如果不想深究，可以随意选择。</p><h2 id="系统工具优化"><a href="#系统工具优化" class="headerlink" title="系统工具优化"></a>系统工具优化</h2><p>所谓工欲善其事，必先利其器。因此在正式编译系统之前，先进行部分工具的完善。</p><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>如果你不喜欢 stage3 中解压出来的 nano，可以优先安装一款自己喜欢的编辑器。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>使用 git 同步 portage。</p><p>优点：大大提高同步速度。</p><p>缺点：略占用更多空间。</p><p>安装 git，不赘述。</p><p>修改当前系统的<code>/etc/portage/repos.conf/gentoo.conf</code></p><pre class="line-numbers language-none"><code class="language-none">[gentoo]sync-type &#x3D; gitsync-uri &#x3D; https:&#x2F;&#x2F;github.com&#x2F;gentoo-mirror&#x2F;gentoo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 移除之前同步的portagerm -rf &#x2F;mnt&#x2F;gentoo&#x2F;var&#x2F;db&#x2F;repos&#x2F;gentoo&#96;# 同步portage&#96;emerge --sync&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gentoolkit"><a href="#gentoolkit" class="headerlink" title="gentoolkit"></a>gentoolkit</h3><p>安装 gentoolkit，不赘述。</p><ul><li>常用指令</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看已经enable的USE flageuse -a -g或者euse -a -l# 激活USE flageuse -E flagname# 关闭USE flageuse -D flagname# 注意不可单独使用euse -D或者euse -E。这将作用到所有的USE flag。# 查看指定包的use标志equery --nocolor uses &#x3D;gnumeric-1.12.31# 清理源代码eclean-dist# 清理二进制包eclean-pkg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>eclean 说明</li></ul><p>默认情况下当前存储库中的任何 ebuild 相对应的源文件和二进制包都不会被删除。</p><p>可以通过同时使用 <code>--deep</code> 和 <code>--package-names</code> 选项指定删除当前存储库中 ebuild 对应的源文件和二进制包。</p><h3 id="安装-layman"><a href="#安装-layman" class="headerlink" title="安装 layman"></a>安装 layman</h3><p>layman 是一个优秀的 gentoo overlay 管理工具。eix-sync 指令中也集成了<code>layman -S</code>指令。</p><p>详情见<a href="https://wiki.gentoo.org/wiki/Layman">gentoo wiki</a>。</p><ul><li>layman 安装</li></ul><p>建议开启的 USE flag 有 git、sync-plugin-portage。</p><pre class="line-numbers language-none"><code class="language-none">emerge --ask app-portage&#x2F;laymanmkdir &#x2F;etc&#x2F;portage&#x2F;repos.conflayman-updater -R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>相关指令</li></ul><pre class="line-numbers language-none"><code class="language-none">layman -L # 显示存储库列表layman -a &lt;name&gt; # 从本地列表添加存储库layman -o &lt;url of repository xml file&gt; -f -a &lt;name&gt; # 添加非官方存储库layman -d &lt;name&gt; # 删除存储库layman -s &lt;name&gt; # 更新存储库layman -S # 更新所有存储库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-eix"><a href="#安装-eix" class="headerlink" title="安装 eix"></a>安装 eix</h3><p>详情见<a href="https://wiki.gentoo.org/wiki/Eix">gentoo wiki</a>。</p><p>eix 在教程的前面的内容中已经提及并作简要介绍。</p><ul><li>eix 安装</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge app-portage&#x2F;eixeix-updateeix-sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>eix-sync</code>代替<code>emerge --sync</code>，可以在同步数据库后自动更新 eix 的缓存。</p><p>修改<code>/etc/eix-sync.conf</code>，写入<code>*</code>，以同步 ebuild 存储库。</p><ul><li>相关指令</li></ul><pre class="line-numbers language-none"><code class="language-none"># 搜索包eix name# 搜索本地包eix -I name# 在软件包描述文件中搜索，-c用于输出紧凑的结果eix -S -c name# 在包类别中搜索eix -C name# 搜索许可证eix -Cc games-rpg -L &quot;EULA&quot;# 排除结果eix --not -L &quot;EULA&quot;# 搜索过时的包eix-test-obsolete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-ccache"><a href="#安装-ccache" class="headerlink" title="安装 ccache"></a>安装 ccache</h3><p>ccache 原理是缓存编译时的中间结果，当重新编译时就可以大大减少编译时间。其应用场景主要为编译失败后修改配置，然后再次编译。此时之前编译的有效内容可以直接被利用，这部分将以极快的速度完成编译。但是第一次运行 ccache 时，会拖慢编译速度。</p><ul><li>ccache 安装</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge --ask ccachemkdir -p &#x2F;var&#x2F;cache&#x2F;ccachechown root:portage &#x2F;var&#x2F;cache&#x2F;ccache&#x2F;chmod 2775 &#x2F;var&#x2F;cache&#x2F;ccache&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>/etc/portage/make.conf</code>。</p><pre class="line-numbers language-none"><code class="language-none">FEATURES&#x3D;&quot;ccache&quot;CCACHE_DIR&#x3D;&quot;&#x2F;var&#x2F;cache&#x2F;ccache&quot;CCACHE_SIZE&#x3D;&quot;16G&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="开启-32-位库支持"><a href="#开启-32-位库支持" class="headerlink" title="开启 32 位库支持"></a>开启 32 位库支持</h3><p>Gentoo 官方并不建议使用纯 64 位模式。其最现实的原因是几乎无法改回兼容 32 位的模式。因此对于新手而言，强烈建议选择兼容 32 位的模式。</p><p>然而之前下载 stage3 包虽不是 nomultilib，但并不完全适配 32 位编译环境，需要手动修复。</p><pre class="line-numbers language-none"><code class="language-none">emerge --ask --verbose db# 编辑&#x2F;etc&#x2F;portage&#x2F;package.use&#x2F;abi_x86_32，写入sys-libs&#x2F;zlib abi_x86_32# 编辑&#x2F;etc&#x2F;portage&#x2F;make.conf，写入ABI_X86&#x3D;&quot;32 64&quot;emerge --ask --verbose zlib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局域网编译与打包分发"><a href="#局域网编译与打包分发" class="headerlink" title="局域网编译与打包分发"></a>局域网编译与打包分发</h3><p>Gentoo 可以联合局域网下的多台主机一起编译，也可以将本地编译好的包打包分发。</p><p>考虑到一般个人用户不太会用到这些功能，此处不赘述。详情见<a href="https://wiki.gentoo.org/wiki/Handbook:Parts/Full/Working/zh-cn#.E5.B0.86.E9.A2.84.E6.9E.84.E5.BB.BA.E7.9A.84.E8.BD.AF.E4.BB.B6.E5.8C.85.E5.88.86.E5.8F.91.E7.BB.99.E4.BB.96.E4.BA.BA">gentoo handbook</a>，<a href="https://docs.huihoo.com/gentoo/resources/document-listing/distcc.html">gentoo doc</a>以及<a href="https://wiki.gentoo.org/wiki/Distcc/zh-cn">gentoo wiki</a>。</p><h2 id="配置时间和区域"><a href="#配置时间和区域" class="headerlink" title="配置时间和区域"></a>配置时间和区域</h2><p>时间与区域可以在之后配置，此处提前配置主要是为了方便某些 GFW 偷渡者。PS：这种东西很重要，甚至直接关系到能否成功安装，但得你自己想办法。</p><ul><li>时区</li></ul><pre class="line-numbers language-none"><code class="language-none">echo Asia&#x2F;Shanghai &gt; &#x2F;etc&#x2F;timezone emerge --config sys-libs&#x2F;timezone-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>区域</li></ul><pre class="line-numbers language-none"><code class="language-none"># 生成中英文 locale.genecho &#39;zh_CN.UTF-8 UTF-8&#39; &gt;&gt; &#x2F;etc&#x2F;locale.genecho &#39;en_US.UTF-8 UTF-8&#39; &gt;&gt; &#x2F;etc&#x2F;locale.genlocale-gen# 列出可用的区域eselect locale list# 选择英文区域的编号eselect locale set 3# 重新加载环境变量env-update &amp;&amp; source &#x2F;etc&#x2F;profile &amp;&amp; export PS1&#x3D;&quot;(chroot) \$&#123;PS1&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上述操作可能导致系统时间发生错误，可以手动纠正。但这可能导致/usr/bin/git 时间错误，致于无法安装 systemd。重装 git 可解决上述问题。</p><ul><li>时间修正</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看时间是否正确hwclockdatedate -s 2020&#x2F;03&#x2F;09date -s 11:50:30hwclock -w# 自动更新，但此时暂不可用timedatectl set-ntp true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重新编译-gcc"><a href="#重新编译-gcc" class="headerlink" title="重新编译 gcc"></a>重新编译 gcc</h2><p>为获取最适配本机的编译器，必须先配置并重新编译 gcc。即使你选择 clang 作为主编译器，也应当重新编译 gcc 的稳定分支。</p><p>警告：此处配置编译需要万分小心。一旦出现不当，损坏编译器，就会很麻烦。如果真的遇到这种情况，也无需慌张。通过直接安装已编译完成的正常的 gcc 二进制包救场即可。</p><ul><li>USE flag</li></ul><p>根据需求配置，以下仅为参考。</p><pre class="line-numbers language-none"><code class="language-none">fortran nls nptl openmp pch sanitize ssp lto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编译 gcc</li></ul><pre class="line-numbers language-none"><code class="language-none"># 更新Portageeix-sync# 编译安装gccemerge --ask gcc# 如果编译了新版本的gcc，继续进行下列操作。# 查看可用gcc版本gcc-config --list-profiles# 选择新编译出来的gccgcc-config 2source &#x2F;etc&#x2F;profileexport PS1&#x3D;&quot;(chroot) $&#123;PS1&#125;&quot;emerge --ask --oneshot --usepkg&#x3D;n sys-devel&#x2F;libtool# 检查当前gcc版本gcc -v# 如果需要拆卸旧版本emerge --ask --depclean &#x3D;sys-devel&#x2F;gcc-9.3.0# 验证系统完整性revdep-rebuild# 重新编译部分包emerge --ask --oneshot --usepkg&#x3D;n --verbose sys-devel&#x2F;llvm sys-devel&#x2F;clang# 如果有问题可以重新构建系统emerge --ask --emptytree --usepkg&#x3D;n @system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-clang"><a href="#安装-clang" class="headerlink" title="安装 clang"></a>安装 clang</h2><p>笔者使用 clang 作为主编译器。即使你使用 gcc 作为主编译器，也可以选择安装 clang 解决部分编译错误问题（这在<a href="https://www.niuiic.top/2020/08/06/gentoo-compile-error-handling/">Gentoo Compile Error Handling</a>一文中已作介绍）。</p><p>重新编译整个系统。如果你不使用 clang 作为主编译器或者觉得没有必要，可以跳过此步。</p><pre class="line-numbers language-none"><code class="language-none">emerge --ask --emptytree --usepkg&#x3D;n @system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h2><pre class="line-numbers language-none"><code class="language-none"># 将数据库更新到最近一小时eix-syncemerge --oneshot sys-apps&#x2F;portage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，所有准备工作都已进行完毕。</p><h2 id="更新-world"><a href="#更新-world" class="headerlink" title="更新@world"></a>更新@world</h2><p>编译安装所有在配置中需要的软件。但在此之前，需要先安装内核源代码提供内核版本信息。</p><pre class="line-numbers language-none"><code class="language-none">emerge sys-kernel&#x2F;gentoo-sourcesemerge --deep --with-bdeps&#x3D;y --changed-use --update --ask --verbose --keep-going @world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置-fstab"><a href="#配置-fstab" class="headerlink" title="配置 fstab"></a>配置 fstab</h2><p>fstab 简单的说就是系统启动时挂载文件系统的配置文件。</p><p>由 fstab 引起的常见错误有文件系统挂载为只读模式，无法写入任何文件等。</p><p>这里不介绍 fstab 的具体配置方法。有需要的参考<a href="https://wiki.gentoo.org/wiki/Fstab">gentoo wiki</a>。</p><p>前面提到，如果有现成的 linux 系统，完全可以仿照其分区方式。主要就是为了 copy 现成的<code>/etc/fstab</code>。</p><p>比如获得的文件如下</p><pre class="line-numbers language-none"><code class="language-none">UUID&#x3D;e5bc0d97-ac5c-400c-b26e-137cefe6ae68       &#x2F;               ext4            rw,relatime     0 1UUID&#x3D;B320-B5C7          &#x2F;boot           vfat            rw,relatime,fmask&#x3D;0022,dmask&#x3D;0022,codepage&#x3D;437,iocharset&#x3D;iso8859-1,shortname&#x3D;mixed,utf8,errors&#x3D;remount-ro       0 2UUID&#x3D;c4b396e5-cb87-42dc-b44e-4b26661e5cc0       none            swap            defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>blkid</code>获取文件系统的 UUID，替换文件中的 UUID 即可。</p><h2 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h2><p>Gentoo 内核复杂点主要在于各选项的配置。此处不会介绍相关具体内容，只是提供一种投机取巧的方法。</p><p>具体的内核选项配置，参考<a href="https://wiki.gentoo.org/wiki/Kernel/Gentoo_Kernel_Configuration_Guide">gentoo wiki</a>。</p><h3 id="自动编译内核"><a href="#自动编译内核" class="headerlink" title="自动编译内核"></a>自动编译内核</h3><p>自动编译内核会开启大部分选项。不过如果不是对性能与简洁有极致的要求，着实是可以接受的。</p><ul><li>安装内核编译工具</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge sys-kernel&#x2F;genkernel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>选择内核版本</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看源代码列表eselect kernel list# 选择eselect kernel set number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自动编译内核</li></ul><pre class="line-numbers language-none"><code class="language-none">genkernel all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="手动编译内核"><a href="#手动编译内核" class="headerlink" title="手动编译内核"></a>手动编译内核</h3><ul><li>安装内核配置工具</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge --ask sys-apps&#x2F;pciutils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看功能</li></ul><p>通过<code>lsmod</code>命令来查看当前所处的 Gentoo Live 镜像开启的功能，这可以作为我们在配置内核时的重要参考。</p><ul><li>配置</li></ul><pre class="line-numbers language-none"><code class="language-none"># 进入源码菜单cd &#x2F;usr&#x2F;src&#x2F;linux# 打开配置工具make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按需求配置即可。</p><p>把上面所有必选项都配置好之后，选择 save 保存配置文件，然后 exit 退出。默认配置文件名是.config，但是最好手动复制一个备份，有时候默认名称的配置文件会莫名丢失，只能重头再配置一次。然后就可以开始编译和安装。</p><ul><li>编译安装内核</li></ul><pre class="line-numbers language-none"><code class="language-none">makemake modules_installmake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>投机取巧的方法</li></ul><p>先自动编译内核，等到输出信息显示配置完毕后打断进程，进入源码菜单，修改配置文件即可。这至少将提供一份正确的配置方案，在此基础上修改将节省大量时间。</p><h2 id="安装-firmware-和-initrampfs"><a href="#安装-firmware-和-initrampfs" class="headerlink" title="安装 firmware 和 initrampfs"></a>安装 firmware 和 initrampfs</h2><pre class="line-numbers language-none"><code class="language-none">emerge --ask sys-kernel&#x2F;linux-firmware# 如果是自动安装内核，则不需要下一步genkernel --install initramfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><p>此处的系统配置基于 Systemd，如果你使用的是 OpenRC，部分配置将不适用。</p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><ul><li>修改<code>/etc/hostname</code></li></ul><p>设置主机名</p><pre class="line-numbers language-none"><code class="language-none">yourname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改<code>/etc/hosts</code></li></ul><pre class="line-numbers language-none"><code class="language-none"># 定义的是现在系统，假设主机名为tux127.0.0.1     localhost::1   localhost127.0.1.1   name.localdomain name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>网络工具的安装</li></ul><p>如果你想在安装完毕基础系统后不再使用 livecd，就需要先安装基础网络工具。之后等桌面环境安装完毕后，最终将采用 NetworkManager 作为 wifi 配置连接工具。</p><pre class="line-numbers language-none"><code class="language-none">emerge net-wireless&#x2F;wpa_supplicant dhcpcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><pre class="line-numbers language-none"><code class="language-none">passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要 8 字符及以上。</p><p>也可以修改<code>/etc/pam.d/system-auth</code>，将<code>min=8,8,8,8,8 retry=3</code>中所有的 8 改为 1。</p><h3 id="部分系统工具的安装"><a href="#部分系统工具的安装" class="headerlink" title="部分系统工具的安装"></a>部分系统工具的安装</h3><ul><li>日志工具</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge --ask app-admin&#x2F;syslog-ngsystemctl enable syslog-ng@default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>远程登录</li></ul><pre class="line-numbers language-none"><code class="language-none">systemctl enable sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>文件系统工具</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge --ask sys-fs&#x2F;dosfstools sys-fs&#x2F;e2fsprogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><pre class="line-numbers language-none"><code class="language-none">useradd -m -G users,wheel,audio -s &#x2F;bin&#x2F;bash usernamepasswd username # 需要三个单词，总长度大于8个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="磁盘清理"><a href="#磁盘清理" class="headerlink" title="磁盘清理"></a>磁盘清理</h3><pre class="line-numbers language-none"><code class="language-none">rm &#x2F;stage3-*.tar.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装系统引导器"><a href="#安装系统引导器" class="headerlink" title="安装系统引导器"></a>安装系统引导器</h2><ul><li>安装 grub</li></ul><pre class="line-numbers language-none"><code class="language-none">emerge --ask --verbose sys-boot&#x2F;grub:2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将 grub 安装到系统中</li></ul><p>注意如果你不是 efi 引导，需要修改下列命令。</p><pre class="line-numbers language-none"><code class="language-none">grub-install --target&#x3D;x86_64-efi --efi-directory&#x3D;&#x2F;bootgrub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装配置-sudo"><a href="#安装配置-sudo" class="headerlink" title="安装配置 sudo"></a>安装配置 sudo</h3><pre class="line-numbers language-none"><code class="language-none">emerge --ask sudonvim &#x2F;etc&#x2F;sudoers# 在root ALL&#x3D;(ALL) ALL下添加新的用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置-sshd"><a href="#配置-sshd" class="headerlink" title="配置 sshd"></a>配置 sshd</h3><p>修改<code>/etc/ssh/sshd_config</code>，做以下修改。</p><pre class="line-numbers language-none"><code class="language-none">Port 22PermitRootLogin yesPasswordAuthentication yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="开启-SysRq"><a href="#开启-SysRq" class="headerlink" title="开启 SysRq"></a>开启 SysRq</h3><p>修改<code>/etc/sysctl.conf</code>。</p><pre class="line-numbers language-none"><code class="language-none">kernel.sysrq &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，Gentoo 基础系统已经安装完毕。退出 chroot，重启检查是否有误。</p><p>下一篇：<a href="https://www.niuiic.top/2020/08/08/gentoo-kool-desktop-environment-installation/">Gentoo Kool Desktop Environment Installation</a></p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Tutorials Directory</title>
      <link href="2020/08/06/gentoo-tutorials-directory/"/>
      <url>2020/08/06/gentoo-tutorials-directory/</url>
      
        <content type="html"><![CDATA[<h1 id="Gentoo-系列教程目录"><a href="#Gentoo-系列教程目录" class="headerlink" title="Gentoo 系列教程目录"></a>Gentoo 系列教程目录</h1><h2 id="Gentoo-Preface"><a href="#Gentoo-Preface" class="headerlink" title="Gentoo Preface"></a><a href="https://niuiic.top/2020/08/04/gentoo-preface/">Gentoo Preface</a></h2><h2 id="Gentoo-Package-Management"><a href="#Gentoo-Package-Management" class="headerlink" title="Gentoo Package Management"></a><a href="https://niuiic.top/2020/08/05/gentoo-package-management/">Gentoo Package Management</a></h2><h2 id="Gentoo-Compiler-Selection"><a href="#Gentoo-Compiler-Selection" class="headerlink" title="Gentoo Compiler Selection"></a><a href="https://niuiic.top/2020/08/05/gentoo-compiler-selection/">Gentoo Compiler Selection</a></h2><h2 id="Gentoo-Compile-Error-Handling"><a href="#Gentoo-Compile-Error-Handling" class="headerlink" title="Gentoo Compile Error Handling"></a><a href="https://niuiic.top/2020/08/06/gentoo-compile-error-handling/">Gentoo Compile Error Handling</a></h2><h2 id="Gentoo-Basic-System-Installation"><a href="#Gentoo-Basic-System-Installation" class="headerlink" title="Gentoo Basic System Installation"></a><a href="https://www.niuiic.top/2020/08/07/gentoo-basic-system-installation/">Gentoo Basic System Installation</a></h2><h2 id="Gentoo-Kool-Desktop-Environment-Installation"><a href="#Gentoo-Kool-Desktop-Environment-Installation" class="headerlink" title="Gentoo Kool Desktop Environment Installation"></a><a href="https://www.niuiic.top/2020/08/08/gentoo-kool-desktop-environment-installation/">Gentoo Kool Desktop Environment Installation</a></h2><h2 id="Gentoo-System-Further-Improvement"><a href="#Gentoo-System-Further-Improvement" class="headerlink" title="Gentoo System Further Improvement"></a><a href="https://www.niuiic.top/2020/08/08/gentoo-system-further-improvement/">Gentoo System Further Improvement</a></h2>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Preface</title>
      <link href="2020/08/06/vim-preface/"/>
      <url>2020/08/06/vim-preface/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-前言"><a href="#Vim-前言" class="headerlink" title="Vim 前言"></a>Vim 前言</h1><h4 id="vim-是必要的？"><a href="#vim-是必要的？" class="headerlink" title="vim 是必要的？"></a>vim 是必要的？</h4><p>显然，“必要”是不存在的。无数现代编辑器以及各类 IDE 都可以成为替代对象。即使是在命令行中，也有 nano 等替代品。</p><h4 id="学习-vim-有什么好处？"><a href="#学习-vim-有什么好处？" class="headerlink" title="学习 vim 有什么好处？"></a>学习 vim 有什么好处？</h4><p>首先，尽管有那么多替代品，但vim至今仍保持着强大的生命力，送走了一代又一代所谓的“替代者”。vim的强大毋庸置疑。学习 vim 至少能让你多一件高效率工具。</p><p>其次，学习vim可以分为两类。一种是仅学习vim模式，另一种在此基础上深究vim编辑器的配套设施，即无与伦比的可扩展性。作为前者，可以大幅度提高码字、查找效率。作为后者，在此基础上能够享受亲手搭建最契合自己的编辑工具的快乐，能够深入了解插件体系的奥妙，能够提升自己的搜索技巧、专业知识、动手能力，甚至品性修养。学习vim只是一个表象，你想得到什么，肯花时间细细琢磨，就有可能从中获取什么。</p><h4 id="学习vim意味着放弃其他优秀编辑器？"><a href="#学习vim意味着放弃其他优秀编辑器？" class="headerlink" title="学习vim意味着放弃其他优秀编辑器？"></a>学习vim意味着放弃其他优秀编辑器？</h4><p>显然，这是个误区。退一万步讲，vim不仅是一个编辑器，更是一种编辑模式，一种可以并已经大量移植到其他编辑器上的模式。vim不可能永远适应所有的环境，当vim不能胜任时，不必固守，选择最适应的工具是最容易解决问题的办法。当然如果你愿意为自己的vim扩展相应的功能而去深入研究，自然是极好的。</p><h4 id="给vim初学者的忠告"><a href="#给vim初学者的忠告" class="headerlink" title="给vim初学者的忠告"></a>给vim初学者的忠告</h4><p>如果你想对vim进行大幅度扩展，linux系统将是你最好的选择，这里是程序员的天堂。同时，毫不夸张地讲，windows将是你的噩梦。</p><p>对学习的建议只有一步一步，坚持动手，不断尝试。从熟悉<code>hjkl</code>，到逐渐掌握各种跳转命令，查找、替换指令，学会安装第一个插件，使用插件管理器，为各种插件配置环境、指令，到深入研究vim高级功能，自己写插件等等。</p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Compile Error Handling</title>
      <link href="2020/08/06/gentoo-compile-error-handling/"/>
      <url>2020/08/06/gentoo-compile-error-handling/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo教程目录</a></p><h1 id="Gentoo-编译错误解决方案"><a href="#Gentoo-编译错误解决方案" class="headerlink" title="Gentoo 编译错误解决方案"></a>Gentoo 编译错误解决方案</h1><p>本文介绍软件编译错误的常用解决方案。仅限于 gentoo 系统提供的操作，不涉及源代码层面的 bug 修复等内容。</p><h2 id="找出错误"><a href="#找出错误" class="headerlink" title="找出错误"></a>找出错误</h2><p>无论发生什么错误，知道是什么错误都是第一步。</p><p>gentoo 的 emerge 指令会在编译过程中输出 log，且在编译失败后打印错误信息以及日志文件地址等内容。及时查看并找到错误点是解决问题的第一步，也是最重要的一步。</p><h2 id="分析错误"><a href="#分析错误" class="headerlink" title="分析错误"></a>分析错误</h2><p>这里指的编译错误分为三类：编译前错误、编译期错误、安装期错误。</p><p>编译前错误五花八门，但解决难度一般较低，除非是严重的依赖问题。这类问题中大部分已经在<a href="https://www.niuiic.top/2020/08/05/gentoo-package-management/">Gentoo Package Management</a>一文中提及。这里不赘述。</p><p>编译期错误一般不会显示在最后的报错信息中，需要自行到 log 中查找。这类错误一般看起来像是源代码本身的 bug，但实际上绝大多数不过是编译选项、软件选项、编译器选择的问题。这类问题将在下文中作详细讨论。</p><p>安装期错误是最让人摸不着头脑的。这类错误也并无统一的解决方案。通常遇到这种错误时，第一时间使用 google 或其他搜索引擎搜索该错误信息。如果没有满意的结果，建议直接向打包者或源代码作者寻求帮助。当然如果你对 linux 系统的了解比较深，可能可以自行解决部分问题。</p><h2 id="解决错误的一般方案"><a href="#解决错误的一般方案" class="headerlink" title="解决错误的一般方案"></a>解决错误的一般方案</h2><p>如前所述，这里的解决方案针对编译期错误。建议参考下列方案的列写顺序以及错误信息的分析结果有顺序地进行尝试。</p><ul><li>重试</li></ul><p>重试看起来无效，但事实上是可能解决问题的。若重试一次无效，则无需再试。</p><ul><li>利用搜索引擎</li></ul><p>使用搜索引擎直接搜索错误信息是效率最高的搜索方法。但需要注意以下几点。</p><p>优先使用英文搜索，再考虑中文。</p><p>优先使用 google 搜索，再考虑其他。</p><p>如果错误信息看起来与 gentoo 无关联，则在适当位置加入 gentoo 关键字。</p><ul><li>更换编译器</li></ul><p>gcc 和 clang 互换，或者不同版本的同一编译器互换。这在用 clang 或者测试分支的 gcc 作为主编译器的情况下非常有效。</p><ul><li>减小编译线程数</li></ul><p>部分软件编译过程产生的临时文件过大，内存和交换无法负载，就会导致编译失败。</p><ul><li>设置编译选项</li></ul><p>主要是关闭编译优化。</p><p>但是还有一些特殊情况，该软件对 CC 及 CXX 的设置要求比较苛刻。比如<code>app-text/enchant-1.6.1-r1</code>，其要求的设置如下。</p><pre class="line-numbers language-none"><code class="language-none">CC&#x3D;x86_64-pc-linux-gnu-gccCXX&#x3D;x86_64-pc-linux-gnu-g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>设置软件选项</li></ul><p>主要是 USE flag。一般通过错误信息判断可能是哪个 USE flag 管理的功能编译出错，将其禁用即可。</p><ul><li>控制软件版本</li></ul><p>升级或降级。</p><ul><li>打补丁</li></ul><p>前面使用搜索引擎搜索时注意某些软件可能已经给出修复 bug 的补丁。但这些补丁并未直接加入 ebuild。这时需要手动添加。</p><p>以<code>x11-misc/pcmanfm-1.2.5</code>为例。<code>mkdir -p /etc/portage/patches/x11-misc/pcmanfm-1.2.5</code>。然后将补丁放在该目录下，重新编译即可。</p><ul><li>等待上游修复 bug</li></ul><p>看起来是个逃避问题的选择，但实际上是相当常用且实用的方案。</p><h2 id="解决错误的高级方案"><a href="#解决错误的高级方案" class="headerlink" title="解决错误的高级方案"></a>解决错误的高级方案</h2><p>以上方案已经足以应对绝大多数编译错误。剩下的部分问题，除了源代码的 bug，其他的基本都可以使用重写 ebuild 解决。这将在后面的文章中介绍。</p><p>下一篇：<a href="https://www.niuiic.top/2020/08/07/gentoo-basic-system-installation/">Gentoo Basic System Installation</a></p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Compiler Selection</title>
      <link href="2020/08/05/gentoo-compiler-selection/"/>
      <url>2020/08/05/gentoo-compiler-selection/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo教程目录</a></p><h1 id="Gentoo-编译器选择"><a href="#Gentoo-编译器选择" class="headerlink" title="Gentoo 编译器选择"></a>Gentoo 编译器选择</h1><p>本文介绍构建 gentoo 系统的编译器选择方案，及一些尤其引起的 bug 的解决方案，不涉及选择编译器的专业观点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>众所周知 Gentoo 系统完全在本地构建。因此编译器的选择很大程度上决定了编译系统的耗时以及整个系统的性能。</p><p>用于构建整个 Gentoo 系统的编译器只推荐两个，gcc 与 clang。</p><p>gcc 由 GNU 出品，与 GNU linux 自然匹配度更高。因此选择 gcc 作为编译器是最稳妥的方案。</p><p>clang 被苹果公司支持，近年来发展速度迅速，也具备许多 gcc 不具备的特性。但 clang 编译 linux 系统尚不稳定。</p><p>目前，绝大多数使用 clang 编译出错的 bug 已有解决方案。但部分软件，比如 gcc、linux 内核等必须使用 gcc 构建。因此即便你选择 clang 作为主编译器，也必须保留 gcc 作为辅助编译器。</p><h2 id="使用-gcc-作为主编译器"><a href="#使用-gcc-作为主编译器" class="headerlink" title="使用 gcc 作为主编译器"></a>使用 gcc 作为主编译器</h2><p>gcc 是 gentoo 的默认编译器，且比较稳定，这里不作太多说明。</p><p>只是需要注意一点，测试分支的 gcc 存在许多不稳定因素，可能会造成编译错误。考虑到编译器对于系统的重要性，强烈建议保留稳定分支的 gcc。</p><ul><li>gcc 版本选择</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看系统中的gcc版本gcc-config --list-profiles# 选择需要的gccgcc-config number# 刷新配置source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-clang-作为主编译器"><a href="#使用-clang-作为主编译器" class="headerlink" title="使用 clang 作为主编译器"></a>使用 clang 作为主编译器</h2><p>详见<a href="https://wiki.gentoo.org/wiki/Clang">gentoo wiki</a></p><p>关于 clang 的安装，可以参考上面的链接。这里主要介绍将 clang 作为主编译器的必要配置。</p><p>首先，在<code>make.conf</code>中作如下设置。</p><pre class="line-numbers language-none"><code class="language-none">CC &#x3D; clangCXX &#x3D; clang++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时，clang 已经成为系统的默认编译器。接下来设置备选方案，即当软件无法用 clang 编译时，使用 gcc 编译。</p><p>在<code>/etc/portage/env</code>目录下创建<code>compiler-gcc</code>，写入</p><pre class="line-numbers language-none"><code class="language-none">CC &#x3D; gccCXX &#x3D; g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在<code>/etc/portage/package.env</code>文件中写入如<code>sys-devel/gcc compiler-gcc</code>的内容，即可将该包的编译器设置为 gcc。</p><p>这一步可以通过<code>app-portage/flaggie</code>工具自动完成。其指令为<code>flaggie app-foo/bar +compiler-gcc</code>。</p><p>至此，配置完毕。当发现 clang 无法编译某软件而 gcc 可行时只需将其加入上述文件即可。</p><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><p>这里的编译选项主要指优化选项。为提高系统性能，你可以设置编译优化选项。但由此带来的问题是编译时间大大增长，更容易遇到 bug，过多的或者不合理的优化选项导致性能反而下降。</p><p>这里不介绍配置优化选项的具体内容，只通过大致的感受给出一个建议。基于亲身体会，优化与不优化差别并不大，至少以人的感官很难感觉出来。因此这里建议新手不要开启优化选项，至少是过多的优化选项，除非你是为了折腾。</p><p>就前文提到的 gcc 备选方案的配置，你也可以将其运用到为具体的包选择性开启优化选项。比如编辑<code>/etc/portage/env/compiler-gcc-flto</code>。</p><pre class="line-numbers language-none"><code class="language-none">CC&#x3D;&quot;gcc&quot;CXX&#x3D;&quot;g++&quot;CFLAGS&#x3D;&quot;-flto -march&#x3D;native -O2 -pipe&quot;CXXFLAGS&#x3D;&quot;$&#123;CFLAGS&#125;&quot;AR&#x3D;&quot;gcc-ar&quot;NM&#x3D;&quot;gcc-nm&quot;RANLIB&#x3D;&quot;gcc-ranlib&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在<code>/etc/portage/package.env</code>中设置包的编译方案即可。</p><p>下一篇：<a href="https://www.niuiic.top/2020/08/06/gentoo-compile-error-handling/">Gentoo Compile Error Handling</a></p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Package Management</title>
      <link href="2020/08/05/gentoo-package-management/"/>
      <url>2020/08/05/gentoo-package-management/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo 教程目录</a></p><h1 id="Gentoo-包管理"><a href="#Gentoo-包管理" class="headerlink" title="Gentoo 包管理"></a>Gentoo 包管理</h1><p>本文介绍 gentoo 包管理系统核心配置，以清晰明了、简单易懂为原则，不涉及深层内容。</p><p>掌握本文内容足以应对绝大部分软件安装、管理问题。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gentoo 的包管理系统是 Portage，详情可查看 emerge 的 man page 及以下链接。</p><p><a href="https://wiki.gentoo.org/wiki/Handbook:X86/Working/Portage/zh-cn">gentoo handbook</a></p><p><a href="https://wiki.gentoo.org/wiki/Portage">gentoo wiki</a></p><h2 id="Gentoo-软件仓库"><a href="#Gentoo-软件仓库" class="headerlink" title="Gentoo 软件仓库"></a>Gentoo 软件仓库</h2><p>Portage 对于软件的行为基于本地的 ebuild。 ebuild 相当于 arch 的 PKGBUILD，简单的说，ebuild 用于指导软件包及其依赖的构建。</p><ul><li>如何获取 ebuild</li></ul><p>绝大多数的 ebuild 或者说软件包都被包含在 gentoo 官方仓库中，只需同步软件仓库即可得到。</p><pre class="line-numbers language-none"><code class="language-none">emerge --sync# 或者emerge-webrsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但部分软件并非由官方打包，其 ebuild 也不是官方维护。这些称为“野包”，可以通过添加其所属 overlay 后同步软件仓库获得。</p><ul><li>如何查找 ebuild</li></ul><p>假设你需要安装一个软件，但只知其一般名称，不清楚具体名称，且不清楚是否存在本地 ebuild。</p><p>首先通过<code>emerge -S package_name</code>模糊查询本地 ebuild。如果没有，访问<a href="https://packages.gentoo.org/">https://packages.gentoo.org/</a>查找所需软件。这里包含了所有官方维护的 ebuild 以及已注册的一些 overlay 中的 ebuild。如果还是没有，可以 google 或 github 搜索<code>gentoo package_name</code>。如果还是没有，可以尝试自己创建。</p><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><h3 id="gentookit"><a href="#gentookit" class="headerlink" title="gentookit"></a>gentookit</h3><p>gentookit 包含了一系列用于软件管理的工具，可以帮助用户管理软件包并跟踪其系统中正在发生的事情。对于新手而言，主要使用的是 euse（USE flag 管理工具）、revdep-rebuild（依赖修复工具）、eclean（源码及二进制包清理工具）。</p><p>详见<a href="https://wiki.gentoo.org/wiki/Gentoolkit">gentoo wiki</a></p><h3 id="eix"><a href="#eix" class="headerlink" title="eix"></a>eix</h3><p>eix 主要用于替代<code>emerge -S</code>，提供更好的搜索体验。对于新手而言，熟悉<code>eix package_name</code>以及<code>eix -I package_name</code>足以。</p><p>详见<a href="https://wiki.gentoo.org/wiki/Eix">gentoo wiki</a></p><h2 id="软件选项"><a href="#软件选项" class="headerlink" title="软件选项"></a>软件选项</h2><p>Gentoo 的包管理系统为软件定制设置了许多选项。其全局配置文件为<code>/etc/portage/make.conf</code>。</p><h3 id="USE-flag"><a href="#USE-flag" class="headerlink" title="USE flag"></a>USE flag</h3><p>简单的说，USE flag 就是指定软件功能的选项。比如你需要某软件的文档，那么就为该软件激活<code>doc</code>这个 USE flag。如果不需要文档，则将其关闭，设置为<code>-doc</code>。</p><ul><li>USE flag 设置分类</li></ul><p>一种分类方法是全局和局部。</p><p>全局配置文件<code>/etc/portage/make.conf</code>（以下简称<code>make.conf</code>）中可以设置<code>USE=&quot;clang nls&quot;</code>等全局 USE flag。</p><p>局部配置是为具体的包定制的，其配置位于<code>/etc/portage/package.use</code>。注意这可以是一个目录，也可以是一个文件。据个人经验，未防止自动更新配置文件时打乱注释，建议使用目录形式，为每个包单独设置一个配置文件。比如配置<code>sys-devel/gcc</code>的 USE flag，创建<code>/etc/portage/package.use/gcc</code>（文件名理论上可以任意取，但建议取用包名或部分包名）。在文件中添加<code>sys-devel/gcc fortran nls nptl openmp pch sanitize ssp lto</code>，其中<code>sys-devel/gcc</code>是包名，后面的都是 USE flag。当然你也可以分行写，每一行都是包名 + 一个 USE flag。</p><p>另一种分类方法是永久和临时。</p><p>永久的设置方式前面已经说明。同时 gentoo 还提供了一种临时使用 USE flag 的办法。这种临时方法也适用于很多其他选项。</p><p>比如安装 gcc，使用<code>USE=&quot;nls pch&quot; emerge sys-devel/gcc</code>即可。</p><ul><li>如何查看 USE flag</li></ul><p>使用<code>equery uses package_name</code>查看包当前 USE flag 的状态。</p><p>Equery 是使用<code>app-portage/gentoolkit</code>包安装的工具集的一部分。详见<a href="https://wiki.gentoo.org/wiki/Equery">gentoo wiki</a>。</p><p>也可以使用<code>eix package_name</code>查看。</p><p>如果你不知道每个 USE flag 的具体含义，可查看<a href="https://www.gentoo.org/support/use-flags/">https://www.gentoo.org/support/use-flags/</a>。也可以点击<a href="https://packages.gentoo.org/">https://packages.gentoo.org/</a>中包页面中的 USE flag 查看详情。对于一些重要且流行的包，如 kde 的 plasma，可以在其相关的 wiki 中找到 USE flag 说明。</p><h3 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h3><p>简单的说，keywords 用于告知软件在哪些架构下是稳定的、测试状态的或者未测试的。详见<a href="https://wiki.gentoo.org/wiki/KEYWORDS">gentoo wiki</a>。</p><p>以 amd64 为例，<code>KEYWORDS=amd64</code>表示接受所有已经在 amd64 架构下测试过的进入稳定分支的软件包。<code>KEYWORDS=~amd64</code>则表示接受所有在 amd64 架构下进入稳定分支和测试分支的软件包。</p><p>此外还有一些特殊形式的 KEYWORDS。但本质上是一样的。</p><p>如果软件的 ebuild 的 KEYWORDS 中不包含 amd64，则表明当前软件未在该架构下测试，或不可用。</p><ul><li>如何配置 keywords</li></ul><p>同样，在全局配置文件<code>make.conf</code>中可以配置<code>KEYWORDS=amd64</code>。</p><p>也可以在<code>/etc/portage/package.accept_keywords</code>中接受具体包的 keywords。同样这可以是一个目录，也可以是一个文件，建议设置为目录。在文件中写入<code>app-i18n/fcitx5-chinese-addons</code>之类的包全称即可。</p><p>这里还可以对包版本进行控制。如上例是接受该包所有版本的 keywords。若要接受指定版本，则<code>=x11-libs/xcb-imdkit-99999999999 **</code>。同样<code>&gt; &lt; &gt;= &lt;=</code>均是适用的。这也可以用于其他选项的配置。</p><ul><li>如何查看 keywords</li></ul><p><code>equery meta package_name</code>或者<code>eix package_name</code></p><p>建议使用<code>eix package_name</code>，结果如下</p><p><img src="1.png" alt="gcc"></p><p><img src="2.png" alt="kcm-fcitx5"></p><p>其中版本号前带<code>~</code>的为测试分支。特别注意带<code>(**)</code>的在配置文件中应当写入<code>=app-i18n/kcm-fcitx5-99999999 **</code>。直接写入<code>app-i18n/kcm-fcitx5</code>不会接受该版本。</p><ul><li>是否选择开启测试分支</li></ul><p>测试分支与稳定分支的差异无需多言。不过对于 gentoo 而言，有相当一部分“野包”并未进入稳定分支。因此软件的测试分支并不一定不稳定。</p><p>首先明确，新手绝不要在全局开启测试分支。一来，软件不稳定，bug 较多，新手无能力修复。二来更新频繁，电脑性能不足将严重影响体验感。最后，想再改到稳定分支难上加难。</p><p>是否需要为内核开启测试分支取决于计算机配置。截至本文攥写时，gentoo 稳定分支最新内核版本为 5.4.48，可能已经无法满足部分新机型需要。此时可以选择开启测试分支。gentoo 测试分支内核源码更新频率基本维持在几天一更。如果觉得过于频繁，可以指定测试分支版本或者隔几个版本编译一次内核。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>另外一个重要的选项是 license，即许可证。虽然 gentoo wiki 并不建议在全局接受所有许可证，但个人建议，如果你对此并不了解，完全可以在<code>make.conf</code>中直接设置<code>ACCEPT_LICENSE=&quot;*&quot;</code>。</p><p>对于新手而言，熟悉以上三个选项足以。</p><p>其他选项可以自行参考 gentoo wiki。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>多版本软件并存是 gentoo 的一大特色，但事实上绝大多数软件并不具备该特性。</p><ul><li>如何查看是否可以多版本共存</li></ul><p><img src="3.png" alt="instance"></p><p>上图是<code>eix clang</code>的部分结果，其中 clang 与 clang-common 均存在多个可选版本。其中版本号前有<code>(number)</code>的 clang 可以多版本共存，而 clang-common 不可。</p><ul><li>如何控制软件版本</li></ul><p>临时设置可以直接在安装命令中指定，如<code>emerge &quot;=sys-devel/clang-9.0.1&quot;</code>。</p><p>如果需要永久固定软件版本，可以通过以下两种方案。</p><p>方案一：如果该软件版本处于测试分支，则在接受其 keyword 时，指定具体版本。当然，这并不能屏蔽稳定分支版本。因此仅适用于无稳定分支的软件。</p><p>方案二：对于方案一不可行的软件，可以在<code>/etc/portage/package.mask</code>中设置将该版本之后的所有版本屏蔽。如<code>&gt;=sys-power/powertop-1.97</code>。</p><h2 id="Portage-常见报错"><a href="#Portage-常见报错" class="headerlink" title="Portage 常见报错"></a>Portage 常见报错</h2><h3 id="被阻挡的包"><a href="#被阻挡的包" class="headerlink" title="被阻挡的包"></a>被阻挡的包</h3><ul><li>报错示例</li></ul><pre class="line-numbers language-none"><code class="language-none">!!! Error: the mail-mta&#x2F;postfix package conflicts with another package.!!!        both can&#39;t be installed on the same system together.!!!        Please use &#39;emerge --pretend&#39; to determine blockers.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>原因</li></ul><p>首先由报错信息可知，该软件包被阻挡显然是因为包冲突。一般是因为依赖冲突，包括编译依赖冲突和运行依赖冲突。</p><ul><li>解决方案</li></ul><p>如果你不熟悉 ebuild，不应当首先考虑修改 ebuild。如果可以二者取其一，则只需拆卸一个。如果二者都需要，可以考虑修改安装软件的版本，这可能助于避开依赖冲突。实在没有办法的情况下可以到<a href="https://bugs.gentoo.org/">Gentoo’s bugtracking system</a>提交 bug。</p><h3 id="被屏蔽的包"><a href="#被屏蔽的包" class="headerlink" title="被屏蔽的包"></a>被屏蔽的包</h3><ul><li>报错示例</li></ul><pre class="line-numbers language-none"><code class="language-none">!!! all ebuilds that could satisfy &quot;bootsplash&quot; have been masked.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">!!! possible candidates are:- gnome-base&#x2F;gnome-2.8.0_pre1 (masked by: ~x86 keyword)- lm-sensors&#x2F;lm-sensors-2.8.7 (masked by: -sparc keyword)- sys-libs&#x2F;glibc-2.3.4.20040808 (masked by: -* keyword)- dev-util&#x2F;cvsd-1.0.2 (masked by: missing keyword)- games-fps&#x2F;unreal-tournament-451 (masked by: package.mask)- sys-libs&#x2F;glibc-2.3.2-r11 (masked by: profile)- net-im&#x2F;skype-2.1.0.81 (masked by: skype-eula license(s))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原因</li></ul><p>一般是由于 keyword（包未经测试，未进入稳定分支）、license（许可证未接受）、package.mask（软件包损坏或有严重问题）或 profile（软件不适合当前 profile）。</p><ul><li>解决方案</li></ul><p>首先明确处于最后两种情况的软件不应被安装。</p><p>前两种情况只需单独为包设置 keyword 或者 license 即可。</p><h3 id="USE-flag-的必要更改"><a href="#USE-flag-的必要更改" class="headerlink" title="USE flag 的必要更改"></a>USE flag 的必要更改</h3><ul><li>报错示例</li></ul><pre class="line-numbers language-none"><code class="language-none">The following USE changes are necessary to proceed:#required by app-text&#x2F;happypackage-2.0, required by happypackage (argument)&gt;&#x3D;app-text&#x2F;feelings-1.0.0 test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>原因</li></ul><p>USE flag 不满足当前软件包编译安装需要</p><ul><li>解决方案</li></ul><p>手动修改 USE flag 或者<code>etc-update</code></p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>依赖缺失、循环依赖等依赖方面的错误对于新手而言是个难题，如果你并没有能力自己修复，那么等上游修复 bug 后重试是最好的选择。</p><p>下载失败错误的一般原因应当不用多说，但也不排除 ebuild 中下载地址错误的情况。</p><p>下一篇：<a href="https://www.niuiic.top/2020/08/05/gentoo-compiler-selection/">Gentoo Compiler Selection</a></p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Choose vim to edit markdown and latex files</title>
      <link href="2020/08/04/vim-markdown-latex/"/>
      <url>2020/08/04/vim-markdown-latex/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-vim-编写-markdown-和-latex"><a href="#使用-vim-编写-markdown-和-latex" class="headerlink" title="使用 vim 编写 markdown 和 latex"></a>使用 vim 编写 markdown 和 latex</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h3><ul><li>操作系统：arch linux</li><li>编辑器：neovim（coc-actions 仅支持 neovim），如果使用 vim，请换用另外的补全插件</li><li>预览：markdown 使用 typora，latex 用 vimtex 调用 MuPDF</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>在使用 vim 之前，曾尝试了两种方案，一是 vscode + vim，配置简单，功能都还不错，问题是自动输入法切换延迟有点长，甚至使用方向键都有点卡，二是 jetbrains 系列的 ide，windows 下用来码字是体验最好的（linux 下对中文输入法不友好），但资源消耗太多，且预览不是很理想</p><p>下面是这套方案的优缺点</p><ul><li>linux 下 vim 的输入法切换体验远远好于 windows（笔者未使用 mac os，不清楚情况）</li><li>windows 下使用 texlive 安装 latex 相关依赖，编译 latex 文档时出现错误，暂时没能修复，linux 下比较稳定</li><li>neovim 以及 vim 比 vscode + vim 插件更流畅</li><li>支持 latex 即时编译，缺点是无法正反向搜索，这点在 vscode 中是支持的</li><li>typora 对 markdown 渲染的支持比 vim 以及 vscode 的相关插件好得多，比如支持本地 mp4 视频插入等，缺点是无法正反向搜索</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>以下步骤全靠回忆，不会有错，但可能有漏，请小心操作，避免掉坑，欢迎留言</li><li>由于网页的关系，直接从本文复制的内容可能存在非法字符，复制粘贴后应当检查一下</li><li>arch linux 可能帮你避开许多坑，如果想了解并使用 arch，可参考 arch wiki 安装教程，若水平有限，可以在网上搜索视频安装教程，还不行的话直接装 manjaro 吧</li><li>装好下面提到的软件时注意检查是否可以直接在终端调用</li></ul><h2 id="vim-简单配置"><a href="#vim-简单配置" class="headerlink" title="vim 简单配置"></a>vim 简单配置</h2><h3 id="vim-plug"><a href="#vim-plug" class="headerlink" title="vim-plug"></a>vim-plug</h3><p><a href="https://github.com/junegunn/vim-plug">github 地址</a></p><p>作者提供的安装方式应该是装不上的，似乎是这个链接本身有问题，不是 GFW 的锅</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>把项目克隆到本地，将项目中的 plug.vim 放到<code>~/.local/share/nvim/site/autoload</code>目录下，如果你使用 vim，可以放到<code>~/.vim/autoload</code>目录下</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>编辑<code>~/.config/nvim/init.vim</code></p><p>一个<code>Plug</code>对应一个插件，如果你和我一样只是想用 vim 编辑 markdown 和 latex（不包括 markdown 预览），那就直接 copy 吧（注意可以更换第一行<code>begin</code>后插件存放的路径）</p><p>插件依次为自动补全、文件树、文件浏览器（需要安装 nnn，没有的话就不要它了）、snippets 补全、snippets 补全、状态栏美化、自动格式化、markdown 支持、开始界面、latex 支持</p><p>部分本文未涉及的插件的具体用法请自行前往 github 查看，或者放弃使用</p><pre class="line-numbers language-none"><code class="language-none">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)Plug &#39;neoclide&#x2F;coc.nvim&#39;, &#123;&#39;branch&#39;: &#39;release&#39;&#125;Plug &#39;preservim&#x2F;nerdtree&#39;Plug &#39;mcchrish&#x2F;nnn.vim&#39;Plug &#39;SirVer&#x2F;ultisnips&#39;Plug &#39;honza&#x2F;vim-snippets&#39;Plug &#39;vim-airline&#x2F;vim-airline&#39;Plug &#39;Chiel92&#x2F;vim-autoformat&#39;Plug &#39;plasticboy&#x2F;vim-markdown&#39;Plug &#39;mhinz&#x2F;vim-startify&#39;Plug &#39;lervag&#x2F;vimtex&#39;call plug#end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先别急着装插件，查看<a href="https://github.com/neoclide/coc.nvim/wiki/Install-coc.nvim">coc.nvim wiki</a>，先把依赖装了，主要是<code>nodejs</code>和<code>yarn</code>，作者给出的方法再次有点为难了，不过 arch linux 直接用包管理器装就行，其他的可能需要折腾一会儿</p><p>另外<a href="https://github.com/Chiel92/vim-autoformat">vim-autoformat</a>插件需要安装依赖，在 vim-autoformat 的 github 主页下查找，主要是<code>remark</code> for markdown 以及<code>latexindent.pl</code> for latex，arch 系 linux 可以先尝试从 aur 安装，不行的话可以按照 github 上作者给出的方式安装，大概又是一番折腾，特别注意，如果这两个软件无法在全局调用，需要在配置文件中加上<code>let g:formatterpath = [&#39;/some/path/to/a/folder&#39;, &#39;/home/superman/formatters&#39;]</code>，也可以选择创建符号链接使其可在全局调用（暂时有个问题，格式化 markdown 时会将其中的 latex 公式比如<code>$\frac&#123;&#125;&#123;&#125;$</code>变为<code>$\\frac&#123;&#125;&#123;&#125;$</code>，不过可以手动替换<code>\\</code>为<code>\</code>，或者也可以尝试其他的格式化工具，见补充部分）</p><p>重新进入 neovim，执行<code>:PlugInstall</code>，等待安装结束，退出</p><h3 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h3><p>剩余的配置如下，重要的在下面，从<code>&quot; vim snippets##########################################</code>开始，前面的除了前两行都是 copy 自<code>coc.nvim</code>的基础配置，不想细看就 copy 吧，如果只想编写 markdown 或 latex，则删除对应插件的配置，顺便把前面的插件也给删了</p><pre class="line-numbers language-none"><code class="language-none">set relativenumberset number&quot; TextEdit might fail if hidden is not set.set hidden&quot; Some servers have issues with backup files, see #649.set nobackupset nowritebackup&quot; Give more space for displaying messages.set cmdheight&#x3D;2&quot; Having longer updatetime (default is 4000 ms &#x3D; 4 s) leads to noticeable&quot; delays and poor user experience.set updatetime&#x3D;300&quot; Don&#39;t pass messages to |ins-completion-menu|.set shortmess+&#x3D;c&quot; Always show the signcolumn, otherwise it would shift the text each time&quot; diagnostics appear&#x2F;become resolved.set signcolumn&#x3D;yes&quot; Use tab for trigger completion with characters ahead and navigate.&quot; NOTE: Use command &#39;:verbose imap &lt;tab&gt;&#39; to make sure tab is not mapped by&quot; other plugin before putting this into your config.inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;\ pumvisible() ? &quot;\&lt;C-n&gt;&quot; :\ &lt;SID&gt;check_back_space() ? &quot;\&lt;TAB&gt;&quot; :\ coc#refresh()inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? &quot;\&lt;C-p&gt;&quot; : &quot;\&lt;C-h&gt;&quot;function! s:check_back_space() abortlet col &#x3D; col(&#39;.&#39;) - 1return !col || getline(&#39;.&#39;)[col - 1]  &#x3D;~# &#39;\s&#39;endfunction&quot; Use &lt;c-space&gt; to trigger completion.inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()&quot; Use &lt;cr&gt; to confirm completion, &#96;&lt;C-g&gt;u&#96; means break undo chain at current&quot; position. Coc only does snippet and additional edit on confirm.&quot; &lt;cr&gt; could be remapped by other vim plugin, try &#96;:verbose imap &lt;CR&gt;&#96;.if exists(&#39;*complete_info&#39;)inoremap &lt;expr&gt; &lt;cr&gt; complete_info()[&quot;selected&quot;] !&#x3D; &quot;-1&quot; ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;C-g&gt;u\&lt;CR&gt;&quot;elseinoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;C-g&gt;u\&lt;CR&gt;&quot;endif&quot; Use &#96;[g&#96; and &#96;]g&#96; to navigate diagnosticsnmap &lt;silent&gt; [g &lt;Plug&gt;(coc-diagnostic-prev)nmap &lt;silent&gt; ]g &lt;Plug&gt;(coc-diagnostic-next)&quot; GoTo code navigation.nmap &lt;silent&gt; gd &lt;Plug&gt;(coc-definition)nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)nmap &lt;silent&gt; gi &lt;Plug&gt;(coc-implementation)nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)&quot; Use K to show documentation in preview window.nnoremap &lt;silent&gt; K :call &lt;SID&gt;show_documentation()&lt;CR&gt;function! s:show_documentation()if (index([&#39;vim&#39;,&#39;help&#39;], &amp;filetype) &gt;&#x3D; 0)execute &#39;h &#39;.expand(&#39;&lt;cword&gt;&#39;)elsecall CocAction(&#39;doHover&#39;)endifendfunction&quot; Highlight the symbol and its references when holding the cursor.autocmd CursorHold * silent call CocActionAsync(&#39;highlight&#39;)&quot; Symbol renaming.nmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)&quot; Formatting selected code.xmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)nmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)augroup mygroupautocmd!&quot; Setup formatexpr specified filetype(s).autocmd FileType typescript,json setl formatexpr&#x3D;CocAction(&#39;formatSelected&#39;)&quot; Update signature help on jump placeholder.autocmd User CocJumpPlaceholder call CocActionAsync(&#39;showSignatureHelp&#39;)augroup end&quot; Applying codeAction to the selected region.&quot; Example: &#96;&lt;leader&gt;aap&#96; for current paragraphxmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)nmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)&quot; Remap keys for applying codeAction to the current line.nmap &lt;leader&gt;ac  &lt;Plug&gt;(coc-codeaction)&quot; Apply AutoFix to problem on the current line.nmap &lt;leader&gt;qf  &lt;Plug&gt;(coc-fix-current)&quot; Map function and class text objects&quot; NOTE: Requires &#39;textDocument.documentSymbol&#39; support from the language server.xmap if &lt;Plug&gt;(coc-funcobj-i)omap if &lt;Plug&gt;(coc-funcobj-i)xmap af &lt;Plug&gt;(coc-funcobj-a)omap af &lt;Plug&gt;(coc-funcobj-a)xmap ic &lt;Plug&gt;(coc-classobj-i)omap ic &lt;Plug&gt;(coc-classobj-i)xmap ac &lt;Plug&gt;(coc-classobj-a)omap ac &lt;Plug&gt;(coc-classobj-a)&quot; Use CTRL-S for selections ranges.&quot; Requires &#39;textDocument&#x2F;selectionRange&#39; support of LS, ex: coc-tsservernmap &lt;silent&gt; &lt;C-s&gt; &lt;Plug&gt;(coc-range-select)xmap &lt;silent&gt; &lt;C-s&gt; &lt;Plug&gt;(coc-range-select)&quot; Add &#96;:Format&#96; command to format current buffer.command! -nargs&#x3D;0 Format :call CocAction(&#39;format&#39;)&quot; Add &#96;:Fold&#96; command to fold current buffer.command! -nargs&#x3D;? Fold :call     CocAction(&#39;fold&#39;, &lt;f-args&gt;)&quot; Add &#96;:OR&#96; command for organize imports of the current buffer.command! -nargs&#x3D;0 OR   :call     CocAction(&#39;runCommand&#39;, &#39;editor.action.organizeImport&#39;)&quot; Add (Neo)Vim&#39;s native statusline support.&quot; NOTE: Please see &#96;:h coc-status&#96; for integrations with external plugins that&quot; provide custom statusline: lightline.vim, vim-airline.set statusline^&#x3D;%&#123;coc#status()&#125;%&#123;get(b:,&#39;coc_current_function&#39;,&#39;&#39;)&#125;&quot; Mappings using CoCList:&quot; Show all diagnostics.nnoremap &lt;silent&gt; &lt;space&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;&quot; Manage extensions.nnoremap &lt;silent&gt; &lt;space&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;&quot; Show commands.nnoremap &lt;silent&gt; &lt;space&gt;c  :&lt;C-u&gt;CocList commands&lt;cr&gt;&quot; Find symbol of current document.nnoremap &lt;silent&gt; &lt;space&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;&quot; Search workspace symbols.nnoremap &lt;silent&gt; &lt;space&gt;s  :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;&quot; Do default action for next item.nnoremap &lt;silent&gt; &lt;space&gt;j  :&lt;C-u&gt;CocNext&lt;CR&gt;&quot; Do default action for previous item.nnoremap &lt;silent&gt; &lt;space&gt;k  :&lt;C-u&gt;CocPrev&lt;CR&gt;&quot; Resume latest coc list.nnoremap &lt;silent&gt; &lt;space&gt;p  :&lt;C-u&gt;CocListResume&lt;CR&gt;&quot; vim snippets##########################################let g:UltiSnipsExpandTrigger&#x3D;&quot;&lt;tab&gt;&quot;let g:UltiSnipsJumpForwardTrigger&#x3D;&quot;&lt;c-b&gt;&quot;let g:UltiSnipsJumpBackwardTrigger&#x3D;&quot;&lt;c-z&gt;&quot;&quot; autoformat##########################################noremap &lt;C-L&gt; :Autoformat&lt;CR&gt;&quot; nerdtree##########################################map &lt;C-p&gt; :NERDTreeToggle&lt;CR&gt;&quot; vimtex##########################################let g:vimtex_view_general_viewer &#x3D; &#39;mupdf&#39;let g:vimtex_view_general_options_latexmk &#x3D; &#39;-reuse-instance&#39;let g:vimtex_view_general_options\ &#x3D; &#39;-reuse-instance -forward-search @tex @line @pdf&#39;\ . &#39; -inverse-search &quot;&#39; . exepath(v:progpath)\ . &#39; --servername &#39; . v:servername\ . &#39; --remote-send \&quot;^&lt;C-\^&gt;^&lt;C-n^&gt;&#39;\ . &#39;:execute &#39;&#39;drop &#39;&#39; . fnameescape(&#39;&#39;\%f&#39;&#39;)^&lt;CR^&gt;&#39;\ . &#39;:\%l^&lt;CR^&gt;:normal\! zzzv^&lt;CR^&gt;&#39;\ . &#39;:call remote_foreground(&#39;&#39;&#39;.v:servername.&#39;&#39;&#39;)^&lt;CR^&gt;^&lt;CR^&gt;\&quot;&quot;&#39;set conceallevel&#x3D;1let g:tex_conceal&#x3D;&#39;abdmg&#39;&quot; Prevent that vim detect a file with the tex suffix as a plaintexlet g:tex_flavor&#x3D;&#39;latex&#39;&quot; Set the viewer methodlet g:vimtex_view_method&#x3D;&#39;mupdf&#39;&quot; Never opened&#x2F;closed the quickfix window automatically. The quickfix window shows the errors and&#x2F;or warnings when compile, and we can open the quickfix windows use \lelet g:vimtex_quickfix_mode&#x3D;0&quot; 最后两行开启自动隐藏功能,开启了这个功能，除了你光标所在的那一行之外，文本里夹杂的LaTeX代码就都会隐藏或者替换成其他符号set conceallevel&#x3D;1let &amp;t_SI.&#x3D;&quot;\e[5 q&quot; &quot;SI &#x3D; INSERT modelet &amp;t_SR.&#x3D;&quot;\e[4 q&quot; &quot;SR &#x3D; REPLACE modelet &amp;t_EI.&#x3D;&quot;\e[1 q&quot; &quot;EI &#x3D; NORMAL mode (ELSE)inoremap &lt;C-c&gt; &lt;esc&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：格式化快捷键设置成了<code>ctrl + l</code>，<code>coc.nvim</code>可以使用<code>ctrl + n</code>选择提示项（只能往下翻，对我来说足够了，需要更好地体验可以自行设置），按<code>ctrl + p</code>打开文件树</p><h3 id="输入法自动切换"><a href="#输入法自动切换" class="headerlink" title="输入法自动切换"></a>输入法自动切换</h3><p>这部分很重要，极其影响体验感</p><p>首先确保你使用的是 fcitx 输入法，fcitx4 和 fcitx5 都可以</p><p><a href="https://www.vim.org/scripts/script.php?script_id=3764">下载最新版本的 fcitx.vim</a></p><p>解压后把 plugin 和 so 两个文件夹放到<code>~/.config/nvim</code>，或者干脆在这个目录下解压，如果是 vim，则应放到<code>~/.vim</code></p><p>这里有个坑，上面已经填了，配置文件最后一行<code>inoremap &lt;C-c&gt; &lt;esc&gt;</code>，将<code>ctrl + c</code>映射为<code>esc</code>，默认情况下两者都可以进入普通模式，但前者不会触发相关事件，这使得插件无效（不知有没有像我一样使用<code>ctrl + c</code>的 vimer）</p><p>如果你的<code>ctrl + c</code>在插入模式下另有用处，请删除该行</p><p>注意：作者并不是为 neovim 设计的插件，目前最新版本的 neovim 可以使用，但不意味着一直可以使用</p><h3 id="相关-python-依赖安装"><a href="#相关-python-依赖安装" class="headerlink" title="相关 python 依赖安装"></a>相关 python 依赖安装</h3><p>coc.nvim 需要 python 模块支持，另外 fcitx.vim 也需要 python 的 vim 模块以使用 fcitx.py 来获取更好的体验，不过这和 neovim 就没关系了，也可以装上，还有<code>autoformat</code>插件也需要 Python 模块</p><p>使用<code>pip</code>安装<code>python-vim</code>、<code>neovim</code>，并<code>python3 -m pip install pynvim</code></p><p>对于 gentoo，使用 pip 安装 python 模块需要加–usr 选项，这样安装的模块默认情况下是无法被 python 找到的，需要设置一下。如果不知如何解决，可以直接<code>emerge dev-python/pynvim</code>，其他的就无需安装</p><p>如果你的 neovim 找不到 Python3，则在 neovim 配置文件中加入<code>let g:python3_host_prog=/path/to/python/executable/</code>，路径自己改</p><h3 id="coc-nvim-配置"><a href="#coc-nvim-配置" class="headerlink" title="coc.nvim 配置"></a>coc.nvim 配置</h3><p>查看<a href="https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions">coc extensions</a>，找到 markdown 和 latex 的对应扩展（按需安装），使用<code>:CocInstall</code>指令安装</p><p>此外，还需要安装<code>coc-snippets</code>和<code>coc-actions</code>以配合 snippets 相关插件</p><p>查看<a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers">coc language servers</a>，找到 markdown 和 latex，按照指示完成配置，如果遇到困难，继续往下看</p><p>这里使用<code>:CocConfig</code>指令打开 coc 配置文件，如果你不熟悉 json，特别注意，文件中的所有内容需要用<code>&#123;&#125;</code>包起来，直接 copy 作者给的配置会出现语法错误</p><p>这里安装<code>efm-langserver</code>和<code>digestif</code>又有问题了，arch 直接从 aur 安装再次避坑（需要先配置 go 语言环境，GOROOT 在 arch 上为<code>/usr/lib/go</code>，如果你上网找的话，可能会被<code>/usr/local/go</code>给坑了，go 安裝完毕后 GOROOT 下是有文件的，不确定是哪个可以去查看一下，另外还需要打开<code>go module</code>，以及给<code>go get</code>设置国内代理，详见<a href="https://blog.csdn.net/weixin_44690437/article/details/103571558">go 语言依赖管理</a>，试图那啥的可以省省了，<code>go get</code>不认这招，或许全系统代理可以），其他的可能需要折腾一会儿</p><p>这里附上我的<code>coc-settings.json</code>，copy 的时候把两个路径换成自己的，另外特别注意<code>command</code>需要使用绝对路径</p><pre class="line-numbers language-none"><code class="language-none">&#123;          languageserver : &#123;                   digestif : &#123;                          command :  &#x2F;bin&#x2F;digestif ,                          filetypes : [ tex ,  plaintex ,  context ]                 &#125;,                  efm : &#123;                          command :  &#x2F;bin&#x2F;efm-langserver ,                         args : [ -c ,  &#x2F;home&#x2F;yourUsername&#x2F;.config&#x2F;efm-langserver&#x2F;config.yaml ],                          filetypes : [ vim ,  eruby ,  markdown ]                 &#125;        &#125;,          suggest.noselect : false &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p>markdown 的部分上面已经完成的差不多了，现在先创建一个.md 文件，查看是否可以补全，<code>nvim test.md</code>，输入<code>img</code>，应该会有提示，如果没有，请检查<code>coc.nvim</code>以及两个关于<code>snippets</code>的插件</p><p>目前还有一个至关重要的问题，markdown 中的 latex 无法补全，极其影响体验感，不过<code>coc.nvim</code>可以<a href="https://github.com/neoclide/coc.nvim/wiki/Create-custom-source">自定义 sources</a>，在<code>~/.config/nvim/autoload/coc/source</code>下创建<code>latex.vim</code>，写入</p><pre class="line-numbers language-none"><code class="language-none">function! coc#source#latex#init() abortreturn &#123;\ &#39;triggerCharacters&#39;: [&#39;\&#39;],\&#39;filetype&#39;:[&#39;markdown&#39;]\&#125;endfunctionfunction! coc#source#latex#complete(opt, cb) abortlet items &#x3D; [&#39;dot&#123;&#125;&#39;, &#39;ddot&#123;&#125;&#39;, &#39;bar&#123;&#125;&#39;, &#39;hat&#123;&#125;&#39;, &#39;exp&#39;, &#39;sin&#39;, &#39;cos&#39;, &#39;tan&#39;, &#39;sec&#39;, &#39;csc&#39;, &#39;vec&#123;&#125;&#39;, &#39;cot&#39;, &#39;arcsin&#39;, &#39;arccos&#39;, &#39;arctan&#39;, &#39;sinh&#39;, &#39;cosh&#39;, &#39;tanh&#39;, &#39;coth&#39;, &#39;sh&#39;, &#39;ch&#39;, &#39;th&#39;, &#39;max&#39;, &#39;min&#39;, &#39;partial&#39;, &#39;nabla&#39;, &#39;prime&#39;, &#39;backprime&#39;, &#39;infty&#39;, &#39;eth&#39;, &#39;hbar&#39;, &#39;sqrt&#123;&#125;&#39;, &#39;sqrt[]&#123;&#125;&#39;, &#39;pm&#39;, &#39;mp&#39;, &#39;times&#39;, &#39;div&#39;, &#39;cdot&#39;, &#39;odot&#39;, &#39;bigodot&#39; , &#39;&#123; \&#125;&#39;, &#39;in&#39;, &#39;not&#39;, &#39;ni&#39;, &#39;cap&#39;, &#39;Cap&#39;, &#39;bigcap&#39;, &#39;cup&#39;, &#39;Cup&#39;, &#39;bigcup&#39;, &#39;subset&#39;, &#39;supset&#39;, &#39;supseteq&#39;, &#39;subseteq&#39;, &#39;subseteqq&#39;, &#39;supseteqq&#39;, &#39;subsetneq&#39;, &#39;supsetneq&#39;, &#39;supsetneqq&#39;, &#39;subsetneqq&#39;, &#39;sim&#39;, &#39;approx&#39;, &#39;leq&#39;, &#39;geq&#39;, &#39;parallel&#39;, &#39;nparallel&#39;, &#39;perp&#39;, &#39;angle&#39;, &#39;Box&#39;, &#39;bigtriangleup&#39;, &#39;bigtriangledown&#39;, &#39;forall&#39;, &#39;therefore&#39;, &#39;because&#39;, &#39;overline&#123;&#125;&#39;, &#39;Rightarrow&#39;, &#39;Leftarrow&#39;, &#39;rightarrow&#39;, &#39;leftarrow&#39;, &#39;leftrightarrow&#39;, &#39;nRightarrow&#39;, &#39;nLeftarrow&#39;, &#39;nleftarrow&#39;, &#39;nrightarrow&#39;, &#39;nleftrightarrow&#39;, &#39;overleftarrow&#123;&#125;&#39;, &#39;overrightarrow&#123;&#125;&#39;, &#39;overset&#123;&#125;&#39;, &#39;underline&#123;&#125;&#39;, &#39;sum&#39;, &#39;prod&#39;, &#39;lim&#39;, &#39;limits&#39;, &#39;int&#39;, &#39;iint&#39;, &#39;oint&#39;, &#39;iiint&#39;, &#39;frac&#123;&#125;&#123;&#125;&#39;, &#39;tfrac&#123;&#125;&#123;&#125;&#39;, &#39;dfrac&#123;&#125;&#123;&#125;&#39;, &#39;\begin&#123;matrix&#125;\end&#123;matrix&#125;&#39;, &#39;\begin&#123;vmatrix&#125;\end&#123;vmatrix&#125;&#39;, &#39;\begin&#123;bmatrix&#125;\end&#123;bmatrix&#125;&#39;, &#39;\begin&#123;Bmatrix&#125;\end&#123;Bmatrix&#125;&#39;, &#39;\begin&#123;pmatrix&#125;\end&#123;pmatrix&#125;&#39;,&#39;\begin&#123;cases&#125;\end&#123;cases&#125;&#39;, &#39;\begin&#123;aligned&#125;\end&#123;aligned&#125;&#39;, &#39;\begin&#123;array&#125;\end&#123;array&#125;&#39;, &#39;alpha&#39;, &#39;psi&#39;, &#39;Delta&#39;, &#39;delta&#39;, &#39;beta&#39;, &#39;lambda&#39;, &#39;rho&#39;, &#39;varepsilon&#39;, &#39;Gamma&#39;, &#39;chi&#39;, &#39;mu&#39;, &#39;sigma&#39;, &#39;Lambda&#39;, &#39;tau&#39;, &#39;varphi&#39;, &#39;varPhi&#39;, &#39;phi&#39;, &#39;Phi&#39;, &#39;eta&#39;, &#39;omega&#39;, &#39;varrho&#39;, &#39;Pi&#39;, &#39;pi&#39;, &#39;gamma&#39;, &#39;xi&#39;, &#39;Psi&#39;, &#39;Sigma&#39;, &#39;varnothing&#39;, &#39;iiiint&#39;]call a:cb(items)endfunction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于自定义 source 的具体细节，请前往 github，上面给出的 source 设定在 markdown 文件下加载，使用<code>\</code>作为触发符，这里只加入了我常用的几个命令，更多内容可以自行添加</p><p>到此，markdown 部分已经完成，可以先检查一下有没有问题</p><h2 id="latex"><a href="#latex" class="headerlink" title="latex"></a>latex</h2><p>首先安装 latex 编译环境，这里使用 texlive</p><p>参考<a href="https://wiki.archlinux.org/index.php/TeX_Live_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">arch wiki</a>，不想折腾的话就把安装部分提到的几个包全装了，应该就问题不大了</p><p>如果还有问题，或者是其他 linux 发行版，可以参考<a href="https://zhuanlan.zhihu.com/p/40053417">Deepin Linux 安装和搭建 LaTex 环境</a>和<a href="https://blog.csdn.net/qq_41814939/article/details/82288145">Ubuntu18.04 安装 LaTeX 并配置中文环境</a>，不过安装 texlive-full 实在太麻烦了，我装了 3 小时，最后似乎卡住了，手贱中断了，再也装不上了，这个包和前面 arch wiki 中提到的包大部分是冲突的，如果是 arch 系的就不要折腾这个了，如果是 gentoo 的话，如果坚持本地编译的话，建议备好电影小零食~~（窃以为使用 gentoo 的 linux 骨灰级玩家不需要这篇文章，强行 gentoo 的玩家可能还没从坑里爬出来）</p><p>安装 MuPDF，当然你也可以选择别的，详见<a href="https://github.com/lervag/vimtex">github</a>，如果换了的话需要把上面的配置也一并修改</p><p>到此结束，测试一下，<code>nvim test.tex</code>，写入</p><pre class="line-numbers language-none"><code class="language-none">\documentclass&#123;article&#125;\begin&#123;document&#125;你好，world!\end&#123;document&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在普通模式下按<code>\ll</code>进行编译，再按<code>\lv</code>预览，不要关闭预览窗口，修改成<code>hello world</code>，保存，重新编译，看看预览是否同步改变，这里还可以设置保存时自动编译</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ul><li>linux 下没有可以和 FastStone 媲美的截图软件，不过可以用 KolourPaint 快速编辑图片，需要更多操作可以使用 GIMP，不建议使用 Pinta，由于无法输入中文</li><li>markdown 中可以用 html 语法插入 mp4 视频，比起 gif 的好处就不用多说了，缺点是略显臃肿</li><li>可以再为 vim 配置更多插件，比如 markdown 自动贴图、markdown 预览等等，也可以继续自定义 snippets，这些部分按个人喜好配置，这里不再介绍</li><li>桌面推荐 i3，i3 配置较为麻烦，可以保留原有桌面，简单配置 i3，仅用来写 markdown 和 latex</li><li>或许可以在 WSL 中配置，不过暂时折腾到此为止了</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="为-markdown-添加大纲显示"><a href="#为-markdown-添加大纲显示" class="headerlink" title="为 markdown 添加大纲显示"></a>为 markdown 添加大纲显示</h3><h4 id="Excuberant-Ctags"><a href="#Excuberant-Ctags" class="headerlink" title="Excuberant Ctags"></a>Excuberant Ctags</h4><p>首先安装<code>Excuberant Ctags</code>，debian 系和 redhat 系应该可以使用包管理工具直接安装，arch 这次似乎进坑了，需要编译源码</p><p>访问<a href="http://ctags.sourceforge.net/">Excuberant Ctags 下载页面</a>，没错，GFW 警告，这个资源可以在网上搜，文件名为 ctags-5.8，csdn 上有，本来想上传一个免费的，结果死活都重复，算了</p><p>解压，cd 入目录，<code>./configure</code>，继续<code>make &amp;&amp; sudo make install</code>，正常情况下应该没问题了，如果有问题，请参考<a href="https://blog.csdn.net/dream2009gd/article/details/44102227">安装 Exuberant Ctags 及 Tag List 插件</a></p><h4 id="easytags"><a href="#easytags" class="headerlink" title="easytags"></a>easytags</h4><p>使用<code>vim-plug</code>安装</p><pre class="line-numbers language-none"><code class="language-none">Plug &#39;xolox&#x2F;vim-misc&#39;Plug &#39;xolox&#x2F;vim-easytags&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="tagbar"><a href="#tagbar" class="headerlink" title="tagbar"></a><a href="https://github.com/majutsushi/tagbar">tagbar</a></h4><pre class="line-numbers language-none"><code class="language-none">Plug &#39;majutsushi&#x2F;tagbar&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意使用该插件时可能有问题，详情见 github</p><h4 id="markdown2ctags"><a href="#markdown2ctags" class="headerlink" title="markdown2ctags"></a>markdown2ctags</h4><pre class="line-numbers language-none"><code class="language-none">Plug &#39;jszakmeister&#x2F;markdown2ctags&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-none"><code class="language-none">&quot; tagbar#####################################nmap &lt;C-M&gt; :TagbarToggle&lt;CR&gt;&quot; markdown2ctags#####################################let g:tagbar_type_markdown &#x3D; &#123;    \ &#39;ctagstype&#39;: &#39;markdown&#39;,    \ &#39;ctagsbin&#39; : &#39;&#x2F;home&#x2F;yourUsername&#x2F;.vim&#x2F;plugged&#x2F;markdown2ctags&#x2F;markdown2ctags.py&#39;,    \ &#39;ctagsargs&#39; : &#39;-f - --sort&#x3D;yes --sro&#x3D;»&#39;,    \ &#39;kinds&#39; : [        \ &#39;s:sections&#39;,        \ &#39;i:images&#39;    \ ],    \ &#39;sro&#39; : &#39;»&#39;,    \ &#39;kind2scope&#39; : &#123;        \ &#39;s&#39; : &#39;section&#39;,    \ &#125;,    \ &#39;sort&#39;: 0,\ &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里给 tagbar 的快捷键设置为<code>ctrl + m</code>，<code>markdown2ctags</code>的配置中需要注意更换你的<code>markdown2ctags.py</code>所在路径，且注意通过<code>:set filetype</code>查看你的 markdown 文件的文件类型名称是否是 markdown，若不是，则修改<code>ctagstype</code></p><h3 id="格式化插件neoformat"><a href="#格式化插件neoformat" class="headerlink" title="格式化插件neoformat"></a>格式化插件<a href="https://github.com/sbdchd/neoformat">neoformat</a></h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><pre class="line-numbers language-none"><code class="language-none">Plug &#39;sbdchd&#x2F;neoformat&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><h5 id="prettier-for-markdown"><a href="#prettier-for-markdown" class="headerlink" title="prettier for markdown"></a><a href="https://github.com/prettier/prettier">prettier</a> for markdown</h5><p>不要选 remark 作为格式化软件</p><p>arch 可以直接从 aur 安装，其他参考<a href="https://prettier.io/docs/en/install.html">install prettier</a></p><h5 id="latexindent-pl-for-latex"><a href="#latexindent-pl-for-latex" class="headerlink" title="latexindent.pl for latex"></a><a href="https://github.com/cmhughes/latexindent.pl">latexindent.pl</a> for latex</h5><p>将项目 clone 到本地</p><p>安装<code>perl</code>，执行<code>sudo cpan</code></p><p>进入<code>cpan</code>环境后，执行</p><pre class="line-numbers language-none"><code class="language-none">install Log::Log4perlinstall Log::Dispatch::Fileinstall YAML::Tinyinstall File::HomeDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次 GFW 警告</p><p>进入项目目录，测试 latexindent.pl 是否可以正常运行，并设置为可全局调用（最简单的方式是写个 sh 文件，<code>cd youPathToLatexindent.pl &amp;&amp; ./latexindent.pl</code>，然后将其链接到<code>/bin</code>或者<code>/usr/bin</code>）</p><h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>只需在<code>init.vim</code>中添加</p><pre class="line-numbers language-none"><code class="language-none">let g:neoformat_latex_latexindent &#x3D;&#123;&#39;exe&#39;:&#39;latexindent&#39;,&#39;args&#39;:[],&#39;stdin&#39;:1&#125;let g:neoformat_enabled_latex&#x3D;[&#39;latexindent&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用 prettier 格式化 markdown 失败，笔者暂时未解决该错误，可以使用<a href="https://github.com/prettier/vim-prettier">vim-prettier</a>插件代替，或者手动运行<code>prettier --wirte pathToYourFile</code></p><p>为不同类型的文件添加格式化快捷键</p><pre class="line-numbers language-none"><code class="language-none">nnoremap &lt;C-l&gt; :Neoformat&lt;CR&gt;autocmd FileType markdown nnoremap &lt;buffer&gt; &lt;C-l&gt; :Prettier&lt;CR&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Latex </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo Preface</title>
      <link href="2020/08/04/gentoo-preface/"/>
      <url>2020/08/04/gentoo-preface/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.niuiic.top/2020/08/06/gentoo-tutorials-directory/">Gentoo 教程目录</a></p><h1 id="Gentoo-教程：前言"><a href="#Gentoo-教程：前言" class="headerlink" title="Gentoo 教程：前言"></a>Gentoo 教程：前言</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本教程旨在帮助 gentoo 入坑者快速熟悉 gentoo 系统基本操作。</p><p>你应当可以在完成本教程后成功安装，配置 gentoo 系统。并具备一定维护能力。</p><p>笔者并非专业人士，文中涉及的部分操作可能并不合适。但对于新手而言应当是非常有效的。</p><p>参考来源：</p><p><a href="https://wiki.gentoo.org/wiki/Main_Page">gentoo wiki</a><br><a href="https://wiki.archlinux.org/">arch wiki</a><br><a href="https://forums.gentoo.org/">gentoo forums</a><br><a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page/zh-cn">gentoo handbook</a><br><a href="https://www.gentoo.org/support/documentation/">gentoo documentation</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>必须对 linux 系统有一定了解，且比较熟悉命令行。（如果你能安装 arch，就足以尝试安装 gentoo）</li><li>电脑配置及格。</li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li>官方 wiki 是最好的教程，但比较零散。强烈建议参考本教程的步骤，结合官方 wiki，进行操作。</li><li>先在虚拟机中尝试，方便回滚，减少犯错的时间成本。</li><li>切勿急于求成，一定要保证配置好编译选项以及内核。</li></ul><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><p><img src="1.png" alt="Gentoo Linux with Kool Desktop Environment"></p><p>下一篇：<a href="https://www.niuiic.top/2020/08/05/gentoo-package-management/">Gentoo Package Management</a></p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
